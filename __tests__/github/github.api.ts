import {
  NamedType,
  Argument,
  Value,
  Field,
  InlineFragment,
  Operation,
  Selection,
  SelectionSet,
  Variable,
} from "../../src";

export enum AuditLogOrderField {
  CREATED_AT = "CREATED_AT",
}

export enum CheckAnnotationLevel {
  FAILURE = "FAILURE",
  NOTICE = "NOTICE",
  WARNING = "WARNING",
}

export enum CheckConclusionState {
  ACTION_REQUIRED = "ACTION_REQUIRED",
  CANCELLED = "CANCELLED",
  FAILURE = "FAILURE",
  NEUTRAL = "NEUTRAL",
  SKIPPED = "SKIPPED",
  STALE = "STALE",
  STARTUP_FAILURE = "STARTUP_FAILURE",
  SUCCESS = "SUCCESS",
  TIMED_OUT = "TIMED_OUT",
}

export enum CheckRunType {
  ALL = "ALL",
  LATEST = "LATEST",
}

export enum CheckStatusState {
  COMPLETED = "COMPLETED",
  IN_PROGRESS = "IN_PROGRESS",
  QUEUED = "QUEUED",
  REQUESTED = "REQUESTED",
}

export enum CollaboratorAffiliation {
  ALL = "ALL",
  DIRECT = "DIRECT",
  OUTSIDE = "OUTSIDE",
}

export enum CommentAuthorAssociation {
  COLLABORATOR = "COLLABORATOR",
  CONTRIBUTOR = "CONTRIBUTOR",
  FIRST_TIMER = "FIRST_TIMER",
  FIRST_TIME_CONTRIBUTOR = "FIRST_TIME_CONTRIBUTOR",
  MANNEQUIN = "MANNEQUIN",
  MEMBER = "MEMBER",
  NONE = "NONE",
  OWNER = "OWNER",
}

export enum CommentCannotUpdateReason {
  ARCHIVED = "ARCHIVED",
  DENIED = "DENIED",
  INSUFFICIENT_ACCESS = "INSUFFICIENT_ACCESS",
  LOCKED = "LOCKED",
  LOGIN_REQUIRED = "LOGIN_REQUIRED",
  MAINTENANCE = "MAINTENANCE",
  VERIFIED_EMAIL_REQUIRED = "VERIFIED_EMAIL_REQUIRED",
}

export enum CommitContributionOrderField {
  COMMIT_COUNT = "COMMIT_COUNT",
  OCCURRED_AT = "OCCURRED_AT",
}

export enum DefaultRepositoryPermissionField {
  ADMIN = "ADMIN",
  NONE = "NONE",
  READ = "READ",
  WRITE = "WRITE",
}

export enum DeploymentOrderField {
  CREATED_AT = "CREATED_AT",
}

export enum DeploymentState {
  ABANDONED = "ABANDONED",
  ACTIVE = "ACTIVE",
  DESTROYED = "DESTROYED",
  ERROR = "ERROR",
  FAILURE = "FAILURE",
  INACTIVE = "INACTIVE",
  IN_PROGRESS = "IN_PROGRESS",
  PENDING = "PENDING",
  QUEUED = "QUEUED",
  WAITING = "WAITING",
}

export enum DeploymentStatusState {
  ERROR = "ERROR",
  FAILURE = "FAILURE",
  INACTIVE = "INACTIVE",
  IN_PROGRESS = "IN_PROGRESS",
  PENDING = "PENDING",
  QUEUED = "QUEUED",
  SUCCESS = "SUCCESS",
}

export enum DiffSide {
  LEFT = "LEFT",
  RIGHT = "RIGHT",
}

export enum EnterpriseAdministratorInvitationOrderField {
  CREATED_AT = "CREATED_AT",
}

export enum EnterpriseAdministratorRole {
  BILLING_MANAGER = "BILLING_MANAGER",
  OWNER = "OWNER",
}

export enum EnterpriseDefaultRepositoryPermissionSettingValue {
  ADMIN = "ADMIN",
  NONE = "NONE",
  NO_POLICY = "NO_POLICY",
  READ = "READ",
  WRITE = "WRITE",
}

export enum EnterpriseEnabledDisabledSettingValue {
  DISABLED = "DISABLED",
  ENABLED = "ENABLED",
  NO_POLICY = "NO_POLICY",
}

export enum EnterpriseEnabledSettingValue {
  ENABLED = "ENABLED",
  NO_POLICY = "NO_POLICY",
}

export enum EnterpriseMemberOrderField {
  CREATED_AT = "CREATED_AT",
  LOGIN = "LOGIN",
}

export enum EnterpriseMembersCanCreateRepositoriesSettingValue {
  ALL = "ALL",
  DISABLED = "DISABLED",
  NO_POLICY = "NO_POLICY",
  PRIVATE = "PRIVATE",
  PUBLIC = "PUBLIC",
}

export enum EnterpriseMembersCanMakePurchasesSettingValue {
  DISABLED = "DISABLED",
  ENABLED = "ENABLED",
}

export enum EnterpriseServerInstallationOrderField {
  CREATED_AT = "CREATED_AT",
  CUSTOMER_NAME = "CUSTOMER_NAME",
  HOST_NAME = "HOST_NAME",
}

export enum EnterpriseServerUserAccountEmailOrderField {
  EMAIL = "EMAIL",
}

export enum EnterpriseServerUserAccountOrderField {
  LOGIN = "LOGIN",
  REMOTE_CREATED_AT = "REMOTE_CREATED_AT",
}

export enum EnterpriseServerUserAccountsUploadOrderField {
  CREATED_AT = "CREATED_AT",
}

export enum EnterpriseServerUserAccountsUploadSyncState {
  FAILURE = "FAILURE",
  PENDING = "PENDING",
  SUCCESS = "SUCCESS",
}

export enum EnterpriseUserAccountMembershipRole {
  MEMBER = "MEMBER",
  OWNER = "OWNER",
}

export enum EnterpriseUserDeployment {
  CLOUD = "CLOUD",
  SERVER = "SERVER",
}

export enum FileViewedState {
  DISMISSED = "DISMISSED",
  UNVIEWED = "UNVIEWED",
  VIEWED = "VIEWED",
}

export enum FundingPlatform {
  COMMUNITY_BRIDGE = "COMMUNITY_BRIDGE",
  CUSTOM = "CUSTOM",
  GITHUB = "GITHUB",
  ISSUEHUNT = "ISSUEHUNT",
  KO_FI = "KO_FI",
  LIBERAPAY = "LIBERAPAY",
  OPEN_COLLECTIVE = "OPEN_COLLECTIVE",
  OTECHIE = "OTECHIE",
  PATREON = "PATREON",
  TIDELIFT = "TIDELIFT",
}

export enum GistOrderField {
  CREATED_AT = "CREATED_AT",
  PUSHED_AT = "PUSHED_AT",
  UPDATED_AT = "UPDATED_AT",
}

export enum GistPrivacy {
  ALL = "ALL",
  PUBLIC = "PUBLIC",
  SECRET = "SECRET",
}

export enum GitSignatureState {
  BAD_CERT = "BAD_CERT",
  BAD_EMAIL = "BAD_EMAIL",
  EXPIRED_KEY = "EXPIRED_KEY",
  GPGVERIFY_ERROR = "GPGVERIFY_ERROR",
  GPGVERIFY_UNAVAILABLE = "GPGVERIFY_UNAVAILABLE",
  INVALID = "INVALID",
  MALFORMED_SIG = "MALFORMED_SIG",
  NOT_SIGNING_KEY = "NOT_SIGNING_KEY",
  NO_USER = "NO_USER",
  OCSP_ERROR = "OCSP_ERROR",
  OCSP_PENDING = "OCSP_PENDING",
  OCSP_REVOKED = "OCSP_REVOKED",
  UNKNOWN_KEY = "UNKNOWN_KEY",
  UNKNOWN_SIG_TYPE = "UNKNOWN_SIG_TYPE",
  UNSIGNED = "UNSIGNED",
  UNVERIFIED_EMAIL = "UNVERIFIED_EMAIL",
  VALID = "VALID",
}

export enum IdentityProviderConfigurationState {
  CONFIGURED = "CONFIGURED",
  ENFORCED = "ENFORCED",
  UNCONFIGURED = "UNCONFIGURED",
}

export enum IpAllowListEnabledSettingValue {
  DISABLED = "DISABLED",
  ENABLED = "ENABLED",
}

export enum IpAllowListEntryOrderField {
  ALLOW_LIST_VALUE = "ALLOW_LIST_VALUE",
  CREATED_AT = "CREATED_AT",
}

export enum IssueCommentOrderField {
  UPDATED_AT = "UPDATED_AT",
}

export enum IssueOrderField {
  COMMENTS = "COMMENTS",
  CREATED_AT = "CREATED_AT",
  UPDATED_AT = "UPDATED_AT",
}

export enum IssueState {
  CLOSED = "CLOSED",
  OPEN = "OPEN",
}

export enum IssueTimelineItemsItemType {
  ADDED_TO_PROJECT_EVENT = "ADDED_TO_PROJECT_EVENT",
  ASSIGNED_EVENT = "ASSIGNED_EVENT",
  CLOSED_EVENT = "CLOSED_EVENT",
  COMMENT_DELETED_EVENT = "COMMENT_DELETED_EVENT",
  CONNECTED_EVENT = "CONNECTED_EVENT",
  CONVERTED_NOTE_TO_ISSUE_EVENT = "CONVERTED_NOTE_TO_ISSUE_EVENT",
  CROSS_REFERENCED_EVENT = "CROSS_REFERENCED_EVENT",
  DEMILESTONED_EVENT = "DEMILESTONED_EVENT",
  DISCONNECTED_EVENT = "DISCONNECTED_EVENT",
  ISSUE_COMMENT = "ISSUE_COMMENT",
  LABELED_EVENT = "LABELED_EVENT",
  LOCKED_EVENT = "LOCKED_EVENT",
  MARKED_AS_DUPLICATE_EVENT = "MARKED_AS_DUPLICATE_EVENT",
  MENTIONED_EVENT = "MENTIONED_EVENT",
  MILESTONED_EVENT = "MILESTONED_EVENT",
  MOVED_COLUMNS_IN_PROJECT_EVENT = "MOVED_COLUMNS_IN_PROJECT_EVENT",
  PINNED_EVENT = "PINNED_EVENT",
  REFERENCED_EVENT = "REFERENCED_EVENT",
  REMOVED_FROM_PROJECT_EVENT = "REMOVED_FROM_PROJECT_EVENT",
  RENAMED_TITLE_EVENT = "RENAMED_TITLE_EVENT",
  REOPENED_EVENT = "REOPENED_EVENT",
  SUBSCRIBED_EVENT = "SUBSCRIBED_EVENT",
  TRANSFERRED_EVENT = "TRANSFERRED_EVENT",
  UNASSIGNED_EVENT = "UNASSIGNED_EVENT",
  UNLABELED_EVENT = "UNLABELED_EVENT",
  UNLOCKED_EVENT = "UNLOCKED_EVENT",
  UNMARKED_AS_DUPLICATE_EVENT = "UNMARKED_AS_DUPLICATE_EVENT",
  UNPINNED_EVENT = "UNPINNED_EVENT",
  UNSUBSCRIBED_EVENT = "UNSUBSCRIBED_EVENT",
  USER_BLOCKED_EVENT = "USER_BLOCKED_EVENT",
}

export enum LabelOrderField {
  CREATED_AT = "CREATED_AT",
  NAME = "NAME",
}

export enum LanguageOrderField {
  SIZE = "SIZE",
}

export enum LockReason {
  OFF_TOPIC = "OFF_TOPIC",
  RESOLVED = "RESOLVED",
  SPAM = "SPAM",
  TOO_HEATED = "TOO_HEATED",
}

export enum MergeableState {
  CONFLICTING = "CONFLICTING",
  MERGEABLE = "MERGEABLE",
  UNKNOWN = "UNKNOWN",
}

export enum MilestoneOrderField {
  CREATED_AT = "CREATED_AT",
  DUE_DATE = "DUE_DATE",
  NUMBER = "NUMBER",
  UPDATED_AT = "UPDATED_AT",
}

export enum MilestoneState {
  CLOSED = "CLOSED",
  OPEN = "OPEN",
}

export enum OauthApplicationCreateAuditEntryState {
  ACTIVE = "ACTIVE",
  PENDING_DELETION = "PENDING_DELETION",
  SUSPENDED = "SUSPENDED",
}

export enum OperationType {
  ACCESS = "ACCESS",
  AUTHENTICATION = "AUTHENTICATION",
  CREATE = "CREATE",
  MODIFY = "MODIFY",
  REMOVE = "REMOVE",
  RESTORE = "RESTORE",
  TRANSFER = "TRANSFER",
}

export enum OrderDirection {
  ASC = "ASC",
  DESC = "DESC",
}

export enum OrgAddMemberAuditEntryPermission {
  ADMIN = "ADMIN",
  READ = "READ",
}

export enum OrgCreateAuditEntryBillingPlan {
  BUSINESS = "BUSINESS",
  BUSINESS_PLUS = "BUSINESS_PLUS",
  FREE = "FREE",
  TIERED_PER_SEAT = "TIERED_PER_SEAT",
  UNLIMITED = "UNLIMITED",
}

export enum OrgRemoveBillingManagerAuditEntryReason {
  SAML_EXTERNAL_IDENTITY_MISSING = "SAML_EXTERNAL_IDENTITY_MISSING",
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY",
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE",
}

export enum OrgRemoveMemberAuditEntryMembershipType {
  ADMIN = "ADMIN",
  BILLING_MANAGER = "BILLING_MANAGER",
  DIRECT_MEMBER = "DIRECT_MEMBER",
  OUTSIDE_COLLABORATOR = "OUTSIDE_COLLABORATOR",
  UNAFFILIATED = "UNAFFILIATED",
}

export enum OrgRemoveMemberAuditEntryReason {
  SAML_EXTERNAL_IDENTITY_MISSING = "SAML_EXTERNAL_IDENTITY_MISSING",
  SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY",
  TWO_FACTOR_ACCOUNT_RECOVERY = "TWO_FACTOR_ACCOUNT_RECOVERY",
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE",
  USER_ACCOUNT_DELETED = "USER_ACCOUNT_DELETED",
}

export enum OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
  BILLING_MANAGER = "BILLING_MANAGER",
  OUTSIDE_COLLABORATOR = "OUTSIDE_COLLABORATOR",
  UNAFFILIATED = "UNAFFILIATED",
}

export enum OrgRemoveOutsideCollaboratorAuditEntryReason {
  SAML_EXTERNAL_IDENTITY_MISSING = "SAML_EXTERNAL_IDENTITY_MISSING",
  TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE",
}

export enum OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
  ADMIN = "ADMIN",
  NONE = "NONE",
  READ = "READ",
  WRITE = "WRITE",
}

export enum OrgUpdateMemberAuditEntryPermission {
  ADMIN = "ADMIN",
  READ = "READ",
}

export enum OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
  ALL = "ALL",
  INTERNAL = "INTERNAL",
  NONE = "NONE",
  PRIVATE = "PRIVATE",
  PRIVATE_INTERNAL = "PRIVATE_INTERNAL",
  PUBLIC = "PUBLIC",
  PUBLIC_INTERNAL = "PUBLIC_INTERNAL",
  PUBLIC_PRIVATE = "PUBLIC_PRIVATE",
}

export enum OrganizationInvitationRole {
  ADMIN = "ADMIN",
  BILLING_MANAGER = "BILLING_MANAGER",
  DIRECT_MEMBER = "DIRECT_MEMBER",
  REINSTATE = "REINSTATE",
}

export enum OrganizationInvitationType {
  EMAIL = "EMAIL",
  USER = "USER",
}

export enum OrganizationMemberRole {
  ADMIN = "ADMIN",
  MEMBER = "MEMBER",
}

export enum OrganizationMembersCanCreateRepositoriesSettingValue {
  ALL = "ALL",
  DISABLED = "DISABLED",
  PRIVATE = "PRIVATE",
}

export enum OrganizationOrderField {
  CREATED_AT = "CREATED_AT",
  LOGIN = "LOGIN",
}

export enum PackageFileOrderField {
  CREATED_AT = "CREATED_AT",
}

export enum PackageOrderField {
  CREATED_AT = "CREATED_AT",
}

export enum PackageType {
  DEBIAN = "DEBIAN",
  DOCKER = "DOCKER",
  MAVEN = "MAVEN",
  NPM = "NPM",
  NUGET = "NUGET",
  PYPI = "PYPI",
  RUBYGEMS = "RUBYGEMS",
}

export enum PackageVersionOrderField {
  CREATED_AT = "CREATED_AT",
}

export enum PinnableItemType {
  GIST = "GIST",
  ISSUE = "ISSUE",
  ORGANIZATION = "ORGANIZATION",
  PROJECT = "PROJECT",
  PULL_REQUEST = "PULL_REQUEST",
  REPOSITORY = "REPOSITORY",
  TEAM = "TEAM",
  USER = "USER",
}

export enum ProjectCardArchivedState {
  ARCHIVED = "ARCHIVED",
  NOT_ARCHIVED = "NOT_ARCHIVED",
}

export enum ProjectCardState {
  CONTENT_ONLY = "CONTENT_ONLY",
  NOTE_ONLY = "NOTE_ONLY",
  REDACTED = "REDACTED",
}

export enum ProjectColumnPurpose {
  DONE = "DONE",
  IN_PROGRESS = "IN_PROGRESS",
  TODO = "TODO",
}

export enum ProjectOrderField {
  CREATED_AT = "CREATED_AT",
  NAME = "NAME",
  UPDATED_AT = "UPDATED_AT",
}

export enum ProjectState {
  CLOSED = "CLOSED",
  OPEN = "OPEN",
}

export enum ProjectTemplate {
  AUTOMATED_KANBAN_V2 = "AUTOMATED_KANBAN_V2",
  AUTOMATED_REVIEWS_KANBAN = "AUTOMATED_REVIEWS_KANBAN",
  BASIC_KANBAN = "BASIC_KANBAN",
  BUG_TRIAGE = "BUG_TRIAGE",
}

export enum PullRequestMergeMethod {
  MERGE = "MERGE",
  REBASE = "REBASE",
  SQUASH = "SQUASH",
}

export enum PullRequestOrderField {
  CREATED_AT = "CREATED_AT",
  UPDATED_AT = "UPDATED_AT",
}

export enum PullRequestReviewCommentState {
  PENDING = "PENDING",
  SUBMITTED = "SUBMITTED",
}

export enum PullRequestReviewDecision {
  APPROVED = "APPROVED",
  CHANGES_REQUESTED = "CHANGES_REQUESTED",
  REVIEW_REQUIRED = "REVIEW_REQUIRED",
}

export enum PullRequestReviewEvent {
  APPROVE = "APPROVE",
  COMMENT = "COMMENT",
  DISMISS = "DISMISS",
  REQUEST_CHANGES = "REQUEST_CHANGES",
}

export enum PullRequestReviewState {
  APPROVED = "APPROVED",
  CHANGES_REQUESTED = "CHANGES_REQUESTED",
  COMMENTED = "COMMENTED",
  DISMISSED = "DISMISSED",
  PENDING = "PENDING",
}

export enum PullRequestState {
  CLOSED = "CLOSED",
  MERGED = "MERGED",
  OPEN = "OPEN",
}

export enum PullRequestTimelineItemsItemType {
  ADDED_TO_PROJECT_EVENT = "ADDED_TO_PROJECT_EVENT",
  ASSIGNED_EVENT = "ASSIGNED_EVENT",
  AUTOMATIC_BASE_CHANGE_FAILED_EVENT = "AUTOMATIC_BASE_CHANGE_FAILED_EVENT",
  AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT = "AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT",
  BASE_REF_CHANGED_EVENT = "BASE_REF_CHANGED_EVENT",
  BASE_REF_DELETED_EVENT = "BASE_REF_DELETED_EVENT",
  BASE_REF_FORCE_PUSHED_EVENT = "BASE_REF_FORCE_PUSHED_EVENT",
  CLOSED_EVENT = "CLOSED_EVENT",
  COMMENT_DELETED_EVENT = "COMMENT_DELETED_EVENT",
  CONNECTED_EVENT = "CONNECTED_EVENT",
  CONVERTED_NOTE_TO_ISSUE_EVENT = "CONVERTED_NOTE_TO_ISSUE_EVENT",
  CONVERT_TO_DRAFT_EVENT = "CONVERT_TO_DRAFT_EVENT",
  CROSS_REFERENCED_EVENT = "CROSS_REFERENCED_EVENT",
  DEMILESTONED_EVENT = "DEMILESTONED_EVENT",
  DEPLOYED_EVENT = "DEPLOYED_EVENT",
  DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT = "DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT",
  DISCONNECTED_EVENT = "DISCONNECTED_EVENT",
  HEAD_REF_DELETED_EVENT = "HEAD_REF_DELETED_EVENT",
  HEAD_REF_FORCE_PUSHED_EVENT = "HEAD_REF_FORCE_PUSHED_EVENT",
  HEAD_REF_RESTORED_EVENT = "HEAD_REF_RESTORED_EVENT",
  ISSUE_COMMENT = "ISSUE_COMMENT",
  LABELED_EVENT = "LABELED_EVENT",
  LOCKED_EVENT = "LOCKED_EVENT",
  MARKED_AS_DUPLICATE_EVENT = "MARKED_AS_DUPLICATE_EVENT",
  MENTIONED_EVENT = "MENTIONED_EVENT",
  MERGED_EVENT = "MERGED_EVENT",
  MILESTONED_EVENT = "MILESTONED_EVENT",
  MOVED_COLUMNS_IN_PROJECT_EVENT = "MOVED_COLUMNS_IN_PROJECT_EVENT",
  PINNED_EVENT = "PINNED_EVENT",
  PULL_REQUEST_COMMIT = "PULL_REQUEST_COMMIT",
  PULL_REQUEST_COMMIT_COMMENT_THREAD = "PULL_REQUEST_COMMIT_COMMENT_THREAD",
  PULL_REQUEST_REVIEW = "PULL_REQUEST_REVIEW",
  PULL_REQUEST_REVIEW_THREAD = "PULL_REQUEST_REVIEW_THREAD",
  PULL_REQUEST_REVISION_MARKER = "PULL_REQUEST_REVISION_MARKER",
  READY_FOR_REVIEW_EVENT = "READY_FOR_REVIEW_EVENT",
  REFERENCED_EVENT = "REFERENCED_EVENT",
  REMOVED_FROM_PROJECT_EVENT = "REMOVED_FROM_PROJECT_EVENT",
  RENAMED_TITLE_EVENT = "RENAMED_TITLE_EVENT",
  REOPENED_EVENT = "REOPENED_EVENT",
  REVIEW_DISMISSED_EVENT = "REVIEW_DISMISSED_EVENT",
  REVIEW_REQUESTED_EVENT = "REVIEW_REQUESTED_EVENT",
  REVIEW_REQUEST_REMOVED_EVENT = "REVIEW_REQUEST_REMOVED_EVENT",
  SUBSCRIBED_EVENT = "SUBSCRIBED_EVENT",
  TRANSFERRED_EVENT = "TRANSFERRED_EVENT",
  UNASSIGNED_EVENT = "UNASSIGNED_EVENT",
  UNLABELED_EVENT = "UNLABELED_EVENT",
  UNLOCKED_EVENT = "UNLOCKED_EVENT",
  UNMARKED_AS_DUPLICATE_EVENT = "UNMARKED_AS_DUPLICATE_EVENT",
  UNPINNED_EVENT = "UNPINNED_EVENT",
  UNSUBSCRIBED_EVENT = "UNSUBSCRIBED_EVENT",
  USER_BLOCKED_EVENT = "USER_BLOCKED_EVENT",
}

export enum PullRequestUpdateState {
  CLOSED = "CLOSED",
  OPEN = "OPEN",
}

export enum ReactionContent {
  CONFUSED = "CONFUSED",
  EYES = "EYES",
  HEART = "HEART",
  HOORAY = "HOORAY",
  LAUGH = "LAUGH",
  ROCKET = "ROCKET",
  THUMBS_DOWN = "THUMBS_DOWN",
  THUMBS_UP = "THUMBS_UP",
}

export enum ReactionOrderField {
  CREATED_AT = "CREATED_AT",
}

export enum RefOrderField {
  ALPHABETICAL = "ALPHABETICAL",
  TAG_COMMIT_DATE = "TAG_COMMIT_DATE",
}

export enum ReleaseOrderField {
  CREATED_AT = "CREATED_AT",
  NAME = "NAME",
}

export enum RepoAccessAuditEntryVisibility {
  INTERNAL = "INTERNAL",
  PRIVATE = "PRIVATE",
  PUBLIC = "PUBLIC",
}

export enum RepoAddMemberAuditEntryVisibility {
  INTERNAL = "INTERNAL",
  PRIVATE = "PRIVATE",
  PUBLIC = "PUBLIC",
}

export enum RepoArchivedAuditEntryVisibility {
  INTERNAL = "INTERNAL",
  PRIVATE = "PRIVATE",
  PUBLIC = "PUBLIC",
}

export enum RepoChangeMergeSettingAuditEntryMergeType {
  MERGE = "MERGE",
  REBASE = "REBASE",
  SQUASH = "SQUASH",
}

export enum RepoCreateAuditEntryVisibility {
  INTERNAL = "INTERNAL",
  PRIVATE = "PRIVATE",
  PUBLIC = "PUBLIC",
}

export enum RepoDestroyAuditEntryVisibility {
  INTERNAL = "INTERNAL",
  PRIVATE = "PRIVATE",
  PUBLIC = "PUBLIC",
}

export enum RepoRemoveMemberAuditEntryVisibility {
  INTERNAL = "INTERNAL",
  PRIVATE = "PRIVATE",
  PUBLIC = "PUBLIC",
}

export enum ReportedContentClassifiers {
  ABUSE = "ABUSE",
  DUPLICATE = "DUPLICATE",
  OFF_TOPIC = "OFF_TOPIC",
  OUTDATED = "OUTDATED",
  RESOLVED = "RESOLVED",
  SPAM = "SPAM",
}

export enum RepositoryAffiliation {
  COLLABORATOR = "COLLABORATOR",
  ORGANIZATION_MEMBER = "ORGANIZATION_MEMBER",
  OWNER = "OWNER",
}

export enum RepositoryContributionType {
  COMMIT = "COMMIT",
  ISSUE = "ISSUE",
  PULL_REQUEST = "PULL_REQUEST",
  PULL_REQUEST_REVIEW = "PULL_REQUEST_REVIEW",
  REPOSITORY = "REPOSITORY",
}

export enum RepositoryInteractionLimit {
  COLLABORATORS_ONLY = "COLLABORATORS_ONLY",
  CONTRIBUTORS_ONLY = "CONTRIBUTORS_ONLY",
  EXISTING_USERS = "EXISTING_USERS",
  NO_LIMIT = "NO_LIMIT",
}

export enum RepositoryInteractionLimitExpiry {
  ONE_DAY = "ONE_DAY",
  ONE_MONTH = "ONE_MONTH",
  ONE_WEEK = "ONE_WEEK",
  SIX_MONTHS = "SIX_MONTHS",
  THREE_DAYS = "THREE_DAYS",
}

export enum RepositoryInteractionLimitOrigin {
  ORGANIZATION = "ORGANIZATION",
  REPOSITORY = "REPOSITORY",
  USER = "USER",
}

export enum RepositoryInvitationOrderField {
  CREATED_AT = "CREATED_AT",
  INVITEE_LOGIN = "INVITEE_LOGIN",
}

export enum RepositoryLockReason {
  BILLING = "BILLING",
  MIGRATING = "MIGRATING",
  MOVING = "MOVING",
  RENAME = "RENAME",
}

export enum RepositoryOrderField {
  CREATED_AT = "CREATED_AT",
  NAME = "NAME",
  PUSHED_AT = "PUSHED_AT",
  STARGAZERS = "STARGAZERS",
  UPDATED_AT = "UPDATED_AT",
}

export enum RepositoryPermission {
  ADMIN = "ADMIN",
  MAINTAIN = "MAINTAIN",
  READ = "READ",
  TRIAGE = "TRIAGE",
  WRITE = "WRITE",
}

export enum RepositoryPrivacy {
  PRIVATE = "PRIVATE",
  PUBLIC = "PUBLIC",
}

export enum RepositoryVisibility {
  INTERNAL = "INTERNAL",
  PRIVATE = "PRIVATE",
  PUBLIC = "PUBLIC",
}

export enum RequestableCheckStatusState {
  COMPLETED = "COMPLETED",
  IN_PROGRESS = "IN_PROGRESS",
  QUEUED = "QUEUED",
}

export enum SamlDigestAlgorithm {
  SHA1 = "SHA1",
  SHA256 = "SHA256",
  SHA384 = "SHA384",
  SHA512 = "SHA512",
}

export enum SamlSignatureAlgorithm {
  RSA_SHA1 = "RSA_SHA1",
  RSA_SHA256 = "RSA_SHA256",
  RSA_SHA384 = "RSA_SHA384",
  RSA_SHA512 = "RSA_SHA512",
}

export enum SavedReplyOrderField {
  UPDATED_AT = "UPDATED_AT",
}

export enum SearchType {
  ISSUE = "ISSUE",
  REPOSITORY = "REPOSITORY",
  USER = "USER",
}

export enum SecurityAdvisoryEcosystem {
  COMPOSER = "COMPOSER",
  MAVEN = "MAVEN",
  NPM = "NPM",
  NUGET = "NUGET",
  PIP = "PIP",
  RUBYGEMS = "RUBYGEMS",
}

export enum SecurityAdvisoryIdentifierType {
  CVE = "CVE",
  GHSA = "GHSA",
}

export enum SecurityAdvisoryOrderField {
  PUBLISHED_AT = "PUBLISHED_AT",
  UPDATED_AT = "UPDATED_AT",
}

export enum SecurityAdvisorySeverity {
  CRITICAL = "CRITICAL",
  HIGH = "HIGH",
  LOW = "LOW",
  MODERATE = "MODERATE",
}

export enum SecurityVulnerabilityOrderField {
  UPDATED_AT = "UPDATED_AT",
}

export enum SponsorsTierOrderField {
  CREATED_AT = "CREATED_AT",
  MONTHLY_PRICE_IN_CENTS = "MONTHLY_PRICE_IN_CENTS",
}

export enum SponsorshipOrderField {
  CREATED_AT = "CREATED_AT",
}

export enum SponsorshipPrivacy {
  PRIVATE = "PRIVATE",
  PUBLIC = "PUBLIC",
}

export enum StarOrderField {
  STARRED_AT = "STARRED_AT",
}

export enum StatusState {
  ERROR = "ERROR",
  EXPECTED = "EXPECTED",
  FAILURE = "FAILURE",
  PENDING = "PENDING",
  SUCCESS = "SUCCESS",
}

export enum SubscriptionState {
  IGNORED = "IGNORED",
  SUBSCRIBED = "SUBSCRIBED",
  UNSUBSCRIBED = "UNSUBSCRIBED",
}

export enum TeamDiscussionCommentOrderField {
  NUMBER = "NUMBER",
}

export enum TeamDiscussionOrderField {
  CREATED_AT = "CREATED_AT",
}

export enum TeamMemberOrderField {
  CREATED_AT = "CREATED_AT",
  LOGIN = "LOGIN",
}

export enum TeamMemberRole {
  MAINTAINER = "MAINTAINER",
  MEMBER = "MEMBER",
}

export enum TeamMembershipType {
  ALL = "ALL",
  CHILD_TEAM = "CHILD_TEAM",
  IMMEDIATE = "IMMEDIATE",
}

export enum TeamOrderField {
  NAME = "NAME",
}

export enum TeamPrivacy {
  SECRET = "SECRET",
  VISIBLE = "VISIBLE",
}

export enum TeamRepositoryOrderField {
  CREATED_AT = "CREATED_AT",
  NAME = "NAME",
  PERMISSION = "PERMISSION",
  PUSHED_AT = "PUSHED_AT",
  STARGAZERS = "STARGAZERS",
  UPDATED_AT = "UPDATED_AT",
}

export enum TeamRole {
  ADMIN = "ADMIN",
  MEMBER = "MEMBER",
}

export enum TopicSuggestionDeclineReason {
  NOT_RELEVANT = "NOT_RELEVANT",
  PERSONAL_PREFERENCE = "PERSONAL_PREFERENCE",
  TOO_GENERAL = "TOO_GENERAL",
  TOO_SPECIFIC = "TOO_SPECIFIC",
}

export enum UserBlockDuration {
  ONE_DAY = "ONE_DAY",
  ONE_MONTH = "ONE_MONTH",
  ONE_WEEK = "ONE_WEEK",
  PERMANENT = "PERMANENT",
  THREE_DAYS = "THREE_DAYS",
}

export enum UserStatusOrderField {
  UPDATED_AT = "UPDATED_AT",
}

export interface AcceptEnterpriseAdministratorInvitationInput {
  clientMutationId?: string;
  invitationId: string;
}

export interface AcceptTopicSuggestionInput {
  clientMutationId?: string;
  name: string;
  repositoryId: string;
}

export interface AddAssigneesToAssignableInput {
  assignableId: string;
  assigneeIds: string;
  clientMutationId?: string;
}

export interface AddCommentInput {
  body: string;
  clientMutationId?: string;
  subjectId: string;
}

export interface AddLabelsToLabelableInput {
  clientMutationId?: string;
  labelIds: string;
  labelableId: string;
}

export interface AddProjectCardInput {
  clientMutationId?: string;
  contentId?: string;
  note?: string;
  projectColumnId: string;
}

export interface AddProjectColumnInput {
  clientMutationId?: string;
  name: string;
  projectId: string;
}

export interface AddPullRequestReviewCommentInput {
  body: string;
  clientMutationId?: string;
  commitOID?: unknown;
  inReplyTo?: string;
  path?: string;
  position?: number;
  pullRequestId?: string;
  pullRequestReviewId?: string;
}

export interface AddPullRequestReviewInput {
  body?: string;
  clientMutationId?: string;
  comments?: DraftPullRequestReviewComment[];
  commitOID?: unknown;
  event?: PullRequestReviewEvent;
  pullRequestId: string;
  threads?: DraftPullRequestReviewThread[];
}

export interface AddPullRequestReviewThreadInput {
  body: string;
  clientMutationId?: string;
  line: number;
  path: string;
  pullRequestId?: string;
  pullRequestReviewId?: string;
  side?: DiffSide;
  startLine?: number;
  startSide?: DiffSide;
}

export interface AddReactionInput {
  clientMutationId?: string;
  content: ReactionContent;
  subjectId: string;
}

export interface AddStarInput {
  clientMutationId?: string;
  starrableId: string;
}

export interface ArchiveRepositoryInput {
  clientMutationId?: string;
  repositoryId: string;
}

export interface AuditLogOrder {
  direction?: OrderDirection;
  field?: AuditLogOrderField;
}

export interface CancelEnterpriseAdminInvitationInput {
  clientMutationId?: string;
  invitationId: string;
}

export interface ChangeUserStatusInput {
  clientMutationId?: string;
  emoji?: string;
  expiresAt?: unknown;
  limitedAvailability?: boolean;
  message?: string;
  organizationId?: string;
}

export interface CheckAnnotationData {
  annotationLevel: CheckAnnotationLevel;
  location: CheckAnnotationRange;
  message: string;
  path: string;
  rawDetails?: string;
  title?: string;
}

export interface CheckAnnotationRange {
  endColumn?: number;
  endLine: number;
  startColumn?: number;
  startLine: number;
}

export interface CheckRunAction {
  description: string;
  identifier: string;
  label: string;
}

export interface CheckRunFilter {
  appId?: number;
  checkName?: string;
  checkType?: CheckRunType;
  status?: CheckStatusState;
}

export interface CheckRunOutput {
  annotations?: CheckAnnotationData[];
  images?: CheckRunOutputImage[];
  summary: string;
  text?: string;
  title: string;
}

export interface CheckRunOutputImage {
  alt: string;
  caption?: string;
  imageUrl: unknown;
}

export interface CheckSuiteAutoTriggerPreference {
  appId: string;
  setting: boolean;
}

export interface CheckSuiteFilter {
  appId?: number;
  checkName?: string;
}

export interface ClearLabelsFromLabelableInput {
  clientMutationId?: string;
  labelableId: string;
}

export interface CloneProjectInput {
  body?: string;
  clientMutationId?: string;
  includeWorkflows: boolean;
  name: string;
  public?: boolean;
  sourceId: string;
  targetOwnerId: string;
}

export interface CloneTemplateRepositoryInput {
  clientMutationId?: string;
  description?: string;
  includeAllBranches?: boolean;
  name: string;
  ownerId: string;
  repositoryId: string;
  visibility: RepositoryVisibility;
}

export interface CloseIssueInput {
  clientMutationId?: string;
  issueId: string;
}

export interface ClosePullRequestInput {
  clientMutationId?: string;
  pullRequestId: string;
}

export interface CommitAuthor {
  emails?: string[];
  id?: string;
}

export interface CommitContributionOrder {
  direction: OrderDirection;
  field: CommitContributionOrderField;
}

export interface ContributionOrder {
  direction: OrderDirection;
}

export interface ConvertProjectCardNoteToIssueInput {
  body?: string;
  clientMutationId?: string;
  projectCardId: string;
  repositoryId: string;
  title?: string;
}

export interface CreateBranchProtectionRuleInput {
  allowsDeletions?: boolean;
  allowsForcePushes?: boolean;
  clientMutationId?: string;
  dismissesStaleReviews?: boolean;
  isAdminEnforced?: boolean;
  pattern: string;
  pushActorIds?: string[];
  repositoryId: string;
  requiredApprovingReviewCount?: number;
  requiredStatusCheckContexts?: string[];
  requiresApprovingReviews?: boolean;
  requiresCodeOwnerReviews?: boolean;
  requiresCommitSignatures?: boolean;
  requiresLinearHistory?: boolean;
  requiresStatusChecks?: boolean;
  requiresStrictStatusChecks?: boolean;
  restrictsPushes?: boolean;
  restrictsReviewDismissals?: boolean;
  reviewDismissalActorIds?: string[];
}

export interface CreateCheckRunInput {
  actions?: CheckRunAction[];
  clientMutationId?: string;
  completedAt?: unknown;
  conclusion?: CheckConclusionState;
  detailsUrl?: unknown;
  externalId?: string;
  headSha: unknown;
  name: string;
  output?: CheckRunOutput;
  repositoryId: string;
  startedAt?: unknown;
  status?: RequestableCheckStatusState;
}

export interface CreateCheckSuiteInput {
  clientMutationId?: string;
  headSha: unknown;
  repositoryId: string;
}

export interface CreateEnterpriseOrganizationInput {
  adminLogins: string;
  billingEmail: string;
  clientMutationId?: string;
  enterpriseId: string;
  login: string;
  profileName: string;
}

export interface CreateIpAllowListEntryInput {
  allowListValue: string;
  clientMutationId?: string;
  isActive: boolean;
  name?: string;
  ownerId: string;
}

export interface CreateIssueInput {
  assigneeIds?: string[];
  body?: string;
  clientMutationId?: string;
  issueTemplate?: string;
  labelIds?: string[];
  milestoneId?: string;
  projectIds?: string[];
  repositoryId: string;
  title: string;
}

export interface CreateProjectInput {
  body?: string;
  clientMutationId?: string;
  name: string;
  ownerId: string;
  repositoryIds?: string[];
  template?: ProjectTemplate;
}

export interface CreatePullRequestInput {
  baseRefName: string;
  body?: string;
  clientMutationId?: string;
  draft?: boolean;
  headRefName: string;
  maintainerCanModify?: boolean;
  repositoryId: string;
  title: string;
}

export interface CreateRefInput {
  clientMutationId?: string;
  name: string;
  oid: unknown;
  repositoryId: string;
}

export interface CreateRepositoryInput {
  clientMutationId?: string;
  description?: string;
  hasIssuesEnabled?: boolean;
  hasWikiEnabled?: boolean;
  homepageUrl?: unknown;
  name: string;
  ownerId?: string;
  teamId?: string;
  template?: boolean;
  visibility: RepositoryVisibility;
}

export interface CreateTeamDiscussionCommentInput {
  body: string;
  clientMutationId?: string;
  discussionId: string;
}

export interface CreateTeamDiscussionInput {
  body: string;
  clientMutationId?: string;
  private?: boolean;
  teamId: string;
  title: string;
}

export interface DeclineTopicSuggestionInput {
  clientMutationId?: string;
  name: string;
  reason: TopicSuggestionDeclineReason;
  repositoryId: string;
}

export interface DeleteBranchProtectionRuleInput {
  branchProtectionRuleId: string;
  clientMutationId?: string;
}

export interface DeleteDeploymentInput {
  clientMutationId?: string;
  id: string;
}

export interface DeleteIpAllowListEntryInput {
  clientMutationId?: string;
  ipAllowListEntryId: string;
}

export interface DeleteIssueCommentInput {
  clientMutationId?: string;
  id: string;
}

export interface DeleteIssueInput {
  clientMutationId?: string;
  issueId: string;
}

export interface DeleteProjectCardInput {
  cardId: string;
  clientMutationId?: string;
}

export interface DeleteProjectColumnInput {
  clientMutationId?: string;
  columnId: string;
}

export interface DeleteProjectInput {
  clientMutationId?: string;
  projectId: string;
}

export interface DeletePullRequestReviewCommentInput {
  clientMutationId?: string;
  id: string;
}

export interface DeletePullRequestReviewInput {
  clientMutationId?: string;
  pullRequestReviewId: string;
}

export interface DeleteRefInput {
  clientMutationId?: string;
  refId: string;
}

export interface DeleteTeamDiscussionCommentInput {
  clientMutationId?: string;
  id: string;
}

export interface DeleteTeamDiscussionInput {
  clientMutationId?: string;
  id: string;
}

export interface DeploymentOrder {
  direction: OrderDirection;
  field: DeploymentOrderField;
}

export interface DismissPullRequestReviewInput {
  clientMutationId?: string;
  message: string;
  pullRequestReviewId: string;
}

export interface DraftPullRequestReviewComment {
  body: string;
  path: string;
  position: number;
}

export interface DraftPullRequestReviewThread {
  body: string;
  line: number;
  path: string;
  side?: DiffSide;
  startLine?: number;
  startSide?: DiffSide;
}

export interface EnterpriseAdministratorInvitationOrder {
  direction: OrderDirection;
  field: EnterpriseAdministratorInvitationOrderField;
}

export interface EnterpriseMemberOrder {
  direction: OrderDirection;
  field: EnterpriseMemberOrderField;
}

export interface EnterpriseServerInstallationOrder {
  direction: OrderDirection;
  field: EnterpriseServerInstallationOrderField;
}

export interface EnterpriseServerUserAccountEmailOrder {
  direction: OrderDirection;
  field: EnterpriseServerUserAccountEmailOrderField;
}

export interface EnterpriseServerUserAccountOrder {
  direction: OrderDirection;
  field: EnterpriseServerUserAccountOrderField;
}

export interface EnterpriseServerUserAccountsUploadOrder {
  direction: OrderDirection;
  field: EnterpriseServerUserAccountsUploadOrderField;
}

export interface FollowUserInput {
  clientMutationId?: string;
  userId: string;
}

export interface GistOrder {
  direction: OrderDirection;
  field: GistOrderField;
}

export interface InviteEnterpriseAdminInput {
  clientMutationId?: string;
  email?: string;
  enterpriseId: string;
  invitee?: string;
  role?: EnterpriseAdministratorRole;
}

export interface IpAllowListEntryOrder {
  direction: OrderDirection;
  field: IpAllowListEntryOrderField;
}

export interface IssueCommentOrder {
  direction: OrderDirection;
  field: IssueCommentOrderField;
}

export interface IssueFilters {
  assignee?: string;
  createdBy?: string;
  labels?: string[];
  mentioned?: string;
  milestone?: string;
  since?: unknown;
  states?: IssueState[];
  viewerSubscribed?: boolean;
}

export interface IssueOrder {
  direction: OrderDirection;
  field: IssueOrderField;
}

export interface LabelOrder {
  direction: OrderDirection;
  field: LabelOrderField;
}

export interface LanguageOrder {
  direction: OrderDirection;
  field: LanguageOrderField;
}

export interface LinkRepositoryToProjectInput {
  clientMutationId?: string;
  projectId: string;
  repositoryId: string;
}

export interface LockLockableInput {
  clientMutationId?: string;
  lockReason?: LockReason;
  lockableId: string;
}

export interface MarkFileAsViewedInput {
  clientMutationId?: string;
  path: string;
  pullRequestId: string;
}

export interface MarkPullRequestReadyForReviewInput {
  clientMutationId?: string;
  pullRequestId: string;
}

export interface MergeBranchInput {
  authorEmail?: string;
  base: string;
  clientMutationId?: string;
  commitMessage?: string;
  head: string;
  repositoryId: string;
}

export interface MergePullRequestInput {
  authorEmail?: string;
  clientMutationId?: string;
  commitBody?: string;
  commitHeadline?: string;
  expectedHeadOid?: unknown;
  mergeMethod?: PullRequestMergeMethod;
  pullRequestId: string;
}

export interface MilestoneOrder {
  direction: OrderDirection;
  field: MilestoneOrderField;
}

export interface MinimizeCommentInput {
  classifier: ReportedContentClassifiers;
  clientMutationId?: string;
  subjectId: string;
}

export interface MoveProjectCardInput {
  afterCardId?: string;
  cardId: string;
  clientMutationId?: string;
  columnId: string;
}

export interface MoveProjectColumnInput {
  afterColumnId?: string;
  clientMutationId?: string;
  columnId: string;
}

export interface OrganizationOrder {
  direction: OrderDirection;
  field: OrganizationOrderField;
}

export interface PackageFileOrder {
  direction?: OrderDirection;
  field?: PackageFileOrderField;
}

export interface PackageOrder {
  direction?: OrderDirection;
  field?: PackageOrderField;
}

export interface PackageVersionOrder {
  direction?: OrderDirection;
  field?: PackageVersionOrderField;
}

export interface ProjectOrder {
  direction: OrderDirection;
  field: ProjectOrderField;
}

export interface PullRequestOrder {
  direction: OrderDirection;
  field: PullRequestOrderField;
}

export interface ReactionOrder {
  direction: OrderDirection;
  field: ReactionOrderField;
}

export interface RefOrder {
  direction: OrderDirection;
  field: RefOrderField;
}

export interface RegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  clientMutationId?: string;
  enterpriseId: string;
}

export interface ReleaseOrder {
  direction: OrderDirection;
  field: ReleaseOrderField;
}

export interface RemoveAssigneesFromAssignableInput {
  assignableId: string;
  assigneeIds: string;
  clientMutationId?: string;
}

export interface RemoveEnterpriseAdminInput {
  clientMutationId?: string;
  enterpriseId: string;
  login: string;
}

export interface RemoveEnterpriseIdentityProviderInput {
  clientMutationId?: string;
  enterpriseId: string;
}

export interface RemoveEnterpriseOrganizationInput {
  clientMutationId?: string;
  enterpriseId: string;
  organizationId: string;
}

export interface RemoveLabelsFromLabelableInput {
  clientMutationId?: string;
  labelIds: string;
  labelableId: string;
}

export interface RemoveOutsideCollaboratorInput {
  clientMutationId?: string;
  organizationId: string;
  userId: string;
}

export interface RemoveReactionInput {
  clientMutationId?: string;
  content: ReactionContent;
  subjectId: string;
}

export interface RemoveStarInput {
  clientMutationId?: string;
  starrableId: string;
}

export interface ReopenIssueInput {
  clientMutationId?: string;
  issueId: string;
}

export interface ReopenPullRequestInput {
  clientMutationId?: string;
  pullRequestId: string;
}

export interface RepositoryInvitationOrder {
  direction: OrderDirection;
  field: RepositoryInvitationOrderField;
}

export interface RepositoryOrder {
  direction: OrderDirection;
  field: RepositoryOrderField;
}

export interface RequestReviewsInput {
  clientMutationId?: string;
  pullRequestId: string;
  teamIds?: string[];
  union?: boolean;
  userIds?: string[];
}

export interface RerequestCheckSuiteInput {
  checkSuiteId: string;
  clientMutationId?: string;
  repositoryId: string;
}

export interface ResolveReviewThreadInput {
  clientMutationId?: string;
  threadId: string;
}

export interface SavedReplyOrder {
  direction: OrderDirection;
  field: SavedReplyOrderField;
}

export interface SecurityAdvisoryIdentifierFilter {
  type: SecurityAdvisoryIdentifierType;
  value: string;
}

export interface SecurityAdvisoryOrder {
  direction: OrderDirection;
  field: SecurityAdvisoryOrderField;
}

export interface SecurityVulnerabilityOrder {
  direction: OrderDirection;
  field: SecurityVulnerabilityOrderField;
}

export interface SetEnterpriseIdentityProviderInput {
  clientMutationId?: string;
  digestMethod: SamlDigestAlgorithm;
  enterpriseId: string;
  idpCertificate: string;
  issuer?: string;
  signatureMethod: SamlSignatureAlgorithm;
  ssoUrl: unknown;
}

export interface SetOrganizationInteractionLimitInput {
  clientMutationId?: string;
  expiry?: RepositoryInteractionLimitExpiry;
  limit: RepositoryInteractionLimit;
  organizationId: string;
}

export interface SetRepositoryInteractionLimitInput {
  clientMutationId?: string;
  expiry?: RepositoryInteractionLimitExpiry;
  limit: RepositoryInteractionLimit;
  repositoryId: string;
}

export interface SetUserInteractionLimitInput {
  clientMutationId?: string;
  expiry?: RepositoryInteractionLimitExpiry;
  limit: RepositoryInteractionLimit;
  userId: string;
}

export interface SponsorsTierOrder {
  direction: OrderDirection;
  field: SponsorsTierOrderField;
}

export interface SponsorshipOrder {
  direction: OrderDirection;
  field: SponsorshipOrderField;
}

export interface StarOrder {
  direction: OrderDirection;
  field: StarOrderField;
}

export interface SubmitPullRequestReviewInput {
  body?: string;
  clientMutationId?: string;
  event: PullRequestReviewEvent;
  pullRequestId?: string;
  pullRequestReviewId?: string;
}

export interface TeamDiscussionCommentOrder {
  direction: OrderDirection;
  field: TeamDiscussionCommentOrderField;
}

export interface TeamDiscussionOrder {
  direction: OrderDirection;
  field: TeamDiscussionOrderField;
}

export interface TeamMemberOrder {
  direction: OrderDirection;
  field: TeamMemberOrderField;
}

export interface TeamOrder {
  direction: OrderDirection;
  field: TeamOrderField;
}

export interface TeamRepositoryOrder {
  direction: OrderDirection;
  field: TeamRepositoryOrderField;
}

export interface TransferIssueInput {
  clientMutationId?: string;
  issueId: string;
  repositoryId: string;
}

export interface UnarchiveRepositoryInput {
  clientMutationId?: string;
  repositoryId: string;
}

export interface UnfollowUserInput {
  clientMutationId?: string;
  userId: string;
}

export interface UnlinkRepositoryFromProjectInput {
  clientMutationId?: string;
  projectId: string;
  repositoryId: string;
}

export interface UnlockLockableInput {
  clientMutationId?: string;
  lockableId: string;
}

export interface UnmarkFileAsViewedInput {
  clientMutationId?: string;
  path: string;
  pullRequestId: string;
}

export interface UnmarkIssueAsDuplicateInput {
  canonicalId: string;
  clientMutationId?: string;
  duplicateId: string;
}

export interface UnminimizeCommentInput {
  clientMutationId?: string;
  subjectId: string;
}

export interface UnresolveReviewThreadInput {
  clientMutationId?: string;
  threadId: string;
}

export interface UpdateBranchProtectionRuleInput {
  allowsDeletions?: boolean;
  allowsForcePushes?: boolean;
  branchProtectionRuleId: string;
  clientMutationId?: string;
  dismissesStaleReviews?: boolean;
  isAdminEnforced?: boolean;
  pattern?: string;
  pushActorIds?: string[];
  requiredApprovingReviewCount?: number;
  requiredStatusCheckContexts?: string[];
  requiresApprovingReviews?: boolean;
  requiresCodeOwnerReviews?: boolean;
  requiresCommitSignatures?: boolean;
  requiresLinearHistory?: boolean;
  requiresStatusChecks?: boolean;
  requiresStrictStatusChecks?: boolean;
  restrictsPushes?: boolean;
  restrictsReviewDismissals?: boolean;
  reviewDismissalActorIds?: string[];
}

export interface UpdateCheckRunInput {
  actions?: CheckRunAction[];
  checkRunId: string;
  clientMutationId?: string;
  completedAt?: unknown;
  conclusion?: CheckConclusionState;
  detailsUrl?: unknown;
  externalId?: string;
  name?: string;
  output?: CheckRunOutput;
  repositoryId: string;
  startedAt?: unknown;
  status?: RequestableCheckStatusState;
}

export interface UpdateCheckSuitePreferencesInput {
  autoTriggerPreferences: CheckSuiteAutoTriggerPreference;
  clientMutationId?: string;
  repositoryId: string;
}

export interface UpdateEnterpriseAdministratorRoleInput {
  clientMutationId?: string;
  enterpriseId: string;
  login: string;
  role: EnterpriseAdministratorRole;
}

export interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  clientMutationId?: string;
  enterpriseId: string;
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

export interface UpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  clientMutationId?: string;
  enterpriseId: string;
  settingValue: EnterpriseDefaultRepositoryPermissionSettingValue;
}

export interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  clientMutationId?: string;
  enterpriseId: string;
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

export interface UpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  clientMutationId?: string;
  enterpriseId: string;
  membersCanCreateInternalRepositories?: boolean;
  membersCanCreatePrivateRepositories?: boolean;
  membersCanCreatePublicRepositories?: boolean;
  membersCanCreateRepositoriesPolicyEnabled?: boolean;
  settingValue?: EnterpriseMembersCanCreateRepositoriesSettingValue;
}

export interface UpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  clientMutationId?: string;
  enterpriseId: string;
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

export interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  clientMutationId?: string;
  enterpriseId: string;
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

export interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  clientMutationId?: string;
  enterpriseId: string;
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

export interface UpdateEnterpriseMembersCanMakePurchasesSettingInput {
  clientMutationId?: string;
  enterpriseId: string;
  settingValue: EnterpriseMembersCanMakePurchasesSettingValue;
}

export interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  clientMutationId?: string;
  enterpriseId: string;
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

export interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  clientMutationId?: string;
  enterpriseId: string;
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

export interface UpdateEnterpriseOrganizationProjectsSettingInput {
  clientMutationId?: string;
  enterpriseId: string;
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

export interface UpdateEnterpriseProfileInput {
  clientMutationId?: string;
  description?: string;
  enterpriseId: string;
  location?: string;
  name?: string;
  websiteUrl?: string;
}

export interface UpdateEnterpriseRepositoryProjectsSettingInput {
  clientMutationId?: string;
  enterpriseId: string;
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

export interface UpdateEnterpriseTeamDiscussionsSettingInput {
  clientMutationId?: string;
  enterpriseId: string;
  settingValue: EnterpriseEnabledDisabledSettingValue;
}

export interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  clientMutationId?: string;
  enterpriseId: string;
  settingValue: EnterpriseEnabledSettingValue;
}

export interface UpdateIpAllowListEnabledSettingInput {
  clientMutationId?: string;
  ownerId: string;
  settingValue: IpAllowListEnabledSettingValue;
}

export interface UpdateIpAllowListEntryInput {
  allowListValue: string;
  clientMutationId?: string;
  ipAllowListEntryId: string;
  isActive: boolean;
  name?: string;
}

export interface UpdateIssueCommentInput {
  body: string;
  clientMutationId?: string;
  id: string;
}

export interface UpdateIssueInput {
  assigneeIds?: string[];
  body?: string;
  clientMutationId?: string;
  id: string;
  labelIds?: string[];
  milestoneId?: string;
  projectIds?: string[];
  state?: IssueState;
  title?: string;
}

export interface UpdateProjectCardInput {
  clientMutationId?: string;
  isArchived?: boolean;
  note?: string;
  projectCardId: string;
}

export interface UpdateProjectColumnInput {
  clientMutationId?: string;
  name: string;
  projectColumnId: string;
}

export interface UpdateProjectInput {
  body?: string;
  clientMutationId?: string;
  name?: string;
  projectId: string;
  public?: boolean;
  state?: ProjectState;
}

export interface UpdatePullRequestInput {
  assigneeIds?: string[];
  baseRefName?: string;
  body?: string;
  clientMutationId?: string;
  labelIds?: string[];
  maintainerCanModify?: boolean;
  milestoneId?: string;
  projectIds?: string[];
  pullRequestId: string;
  state?: PullRequestUpdateState;
  title?: string;
}

export interface UpdatePullRequestReviewCommentInput {
  body: string;
  clientMutationId?: string;
  pullRequestReviewCommentId: string;
}

export interface UpdatePullRequestReviewInput {
  body: string;
  clientMutationId?: string;
  pullRequestReviewId: string;
}

export interface UpdateRefInput {
  clientMutationId?: string;
  force?: boolean;
  oid: unknown;
  refId: string;
}

export interface UpdateRepositoryInput {
  clientMutationId?: string;
  description?: string;
  hasIssuesEnabled?: boolean;
  hasProjectsEnabled?: boolean;
  hasWikiEnabled?: boolean;
  homepageUrl?: unknown;
  name?: string;
  repositoryId: string;
  template?: boolean;
}

export interface UpdateSubscriptionInput {
  clientMutationId?: string;
  state: SubscriptionState;
  subscribableId: string;
}

export interface UpdateTeamDiscussionCommentInput {
  body: string;
  bodyVersion?: string;
  clientMutationId?: string;
  id: string;
}

export interface UpdateTeamDiscussionInput {
  body?: string;
  bodyVersion?: string;
  clientMutationId?: string;
  id: string;
  pinned?: boolean;
  title?: string;
}

export interface UpdateTopicsInput {
  clientMutationId?: string;
  repositoryId: string;
  topicNames: string;
}

export interface UserStatusOrder {
  direction: OrderDirection;
  field: UserStatusOrderField;
}

type IAssignee = IBot | IMannequin | IOrganization | IUser;

interface AssigneeSelector {
  __typename: () => Field<"__typename">;

  on: <
    T extends Array<Selection>,
    F extends "Bot" | "Mannequin" | "Organization" | "User"
  >(
    type: F,
    select: (
      t: F extends "Bot"
        ? BotSelector
        : F extends "Mannequin"
        ? MannequinSelector
        : F extends "Organization"
        ? OrganizationSelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Assignee: AssigneeSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "Bot": {
        return new InlineFragment(
          new NamedType("Bot") as any,
          new SelectionSet(select(Bot as any))
        );
      }

      case "Mannequin": {
        return new InlineFragment(
          new NamedType("Mannequin") as any,
          new SelectionSet(select(Mannequin as any))
        );
      }

      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IAuditEntryActor = IBot | IOrganization | IUser;

interface AuditEntryActorSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "Bot" | "Organization" | "User">(
    type: F,
    select: (
      t: F extends "Bot"
        ? BotSelector
        : F extends "Organization"
        ? OrganizationSelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const AuditEntryActor: AuditEntryActorSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "Bot": {
        return new InlineFragment(
          new NamedType("Bot") as any,
          new SelectionSet(select(Bot as any))
        );
      }

      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type ICloser = ICommit | IPullRequest;

interface CloserSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "Commit" | "PullRequest">(
    type: F,
    select: (
      t: F extends "Commit"
        ? CommitSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Closer: CloserSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "Commit": {
        return new InlineFragment(
          new NamedType("Commit") as any,
          new SelectionSet(select(Commit as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type ICreatedIssueOrRestrictedContribution =
  | ICreatedIssueContribution
  | IRestrictedContribution;

interface CreatedIssueOrRestrictedContributionSelector {
  __typename: () => Field<"__typename">;

  on: <
    T extends Array<Selection>,
    F extends "CreatedIssueContribution" | "RestrictedContribution"
  >(
    type: F,
    select: (
      t: F extends "CreatedIssueContribution"
        ? CreatedIssueContributionSelector
        : F extends "RestrictedContribution"
        ? RestrictedContributionSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const CreatedIssueOrRestrictedContribution: CreatedIssueOrRestrictedContributionSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "CreatedIssueContribution": {
        return new InlineFragment(
          new NamedType("CreatedIssueContribution") as any,
          new SelectionSet(select(CreatedIssueContribution as any))
        );
      }

      case "RestrictedContribution": {
        return new InlineFragment(
          new NamedType("RestrictedContribution") as any,
          new SelectionSet(select(RestrictedContribution as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type ICreatedPullRequestOrRestrictedContribution =
  | ICreatedPullRequestContribution
  | IRestrictedContribution;

interface CreatedPullRequestOrRestrictedContributionSelector {
  __typename: () => Field<"__typename">;

  on: <
    T extends Array<Selection>,
    F extends "CreatedPullRequestContribution" | "RestrictedContribution"
  >(
    type: F,
    select: (
      t: F extends "CreatedPullRequestContribution"
        ? CreatedPullRequestContributionSelector
        : F extends "RestrictedContribution"
        ? RestrictedContributionSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const CreatedPullRequestOrRestrictedContribution: CreatedPullRequestOrRestrictedContributionSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "CreatedPullRequestContribution": {
        return new InlineFragment(
          new NamedType("CreatedPullRequestContribution") as any,
          new SelectionSet(select(CreatedPullRequestContribution as any))
        );
      }

      case "RestrictedContribution": {
        return new InlineFragment(
          new NamedType("RestrictedContribution") as any,
          new SelectionSet(select(RestrictedContribution as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type ICreatedRepositoryOrRestrictedContribution =
  | ICreatedRepositoryContribution
  | IRestrictedContribution;

interface CreatedRepositoryOrRestrictedContributionSelector {
  __typename: () => Field<"__typename">;

  on: <
    T extends Array<Selection>,
    F extends "CreatedRepositoryContribution" | "RestrictedContribution"
  >(
    type: F,
    select: (
      t: F extends "CreatedRepositoryContribution"
        ? CreatedRepositoryContributionSelector
        : F extends "RestrictedContribution"
        ? RestrictedContributionSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const CreatedRepositoryOrRestrictedContribution: CreatedRepositoryOrRestrictedContributionSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "CreatedRepositoryContribution": {
        return new InlineFragment(
          new NamedType("CreatedRepositoryContribution") as any,
          new SelectionSet(select(CreatedRepositoryContribution as any))
        );
      }

      case "RestrictedContribution": {
        return new InlineFragment(
          new NamedType("RestrictedContribution") as any,
          new SelectionSet(select(RestrictedContribution as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IEnterpriseMember = IEnterpriseUserAccount | IUser;

interface EnterpriseMemberSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "EnterpriseUserAccount" | "User">(
    type: F,
    select: (
      t: F extends "EnterpriseUserAccount"
        ? EnterpriseUserAccountSelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const EnterpriseMember: EnterpriseMemberSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "EnterpriseUserAccount": {
        return new InlineFragment(
          new NamedType("EnterpriseUserAccount") as any,
          new SelectionSet(select(EnterpriseUserAccount as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IIpAllowListOwner = IEnterprise | IOrganization;

interface IpAllowListOwnerSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "Enterprise" | "Organization">(
    type: F,
    select: (
      t: F extends "Enterprise"
        ? EnterpriseSelector
        : F extends "Organization"
        ? OrganizationSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const IpAllowListOwner: IpAllowListOwnerSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "Enterprise": {
        return new InlineFragment(
          new NamedType("Enterprise") as any,
          new SelectionSet(select(Enterprise as any))
        );
      }

      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IIssueOrPullRequest = IIssue | IPullRequest;

interface IssueOrPullRequestSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "Issue" | "PullRequest">(
    type: F,
    select: (
      t: F extends "Issue"
        ? IssueSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const IssueOrPullRequest: IssueOrPullRequestSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IIssueTimelineItem =
  | IAssignedEvent
  | IClosedEvent
  | ICommit
  | ICrossReferencedEvent
  | IDemilestonedEvent
  | IIssueComment
  | ILabeledEvent
  | ILockedEvent
  | IMilestonedEvent
  | IReferencedEvent
  | IRenamedTitleEvent
  | IReopenedEvent
  | ISubscribedEvent
  | ITransferredEvent
  | IUnassignedEvent
  | IUnlabeledEvent
  | IUnlockedEvent
  | IUnsubscribedEvent
  | IUserBlockedEvent;

interface IssueTimelineItemSelector {
  __typename: () => Field<"__typename">;

  on: <
    T extends Array<Selection>,
    F extends
      | "AssignedEvent"
      | "ClosedEvent"
      | "Commit"
      | "CrossReferencedEvent"
      | "DemilestonedEvent"
      | "IssueComment"
      | "LabeledEvent"
      | "LockedEvent"
      | "MilestonedEvent"
      | "ReferencedEvent"
      | "RenamedTitleEvent"
      | "ReopenedEvent"
      | "SubscribedEvent"
      | "TransferredEvent"
      | "UnassignedEvent"
      | "UnlabeledEvent"
      | "UnlockedEvent"
      | "UnsubscribedEvent"
      | "UserBlockedEvent"
  >(
    type: F,
    select: (
      t: F extends "AssignedEvent"
        ? AssignedEventSelector
        : F extends "ClosedEvent"
        ? ClosedEventSelector
        : F extends "Commit"
        ? CommitSelector
        : F extends "CrossReferencedEvent"
        ? CrossReferencedEventSelector
        : F extends "DemilestonedEvent"
        ? DemilestonedEventSelector
        : F extends "IssueComment"
        ? IssueCommentSelector
        : F extends "LabeledEvent"
        ? LabeledEventSelector
        : F extends "LockedEvent"
        ? LockedEventSelector
        : F extends "MilestonedEvent"
        ? MilestonedEventSelector
        : F extends "ReferencedEvent"
        ? ReferencedEventSelector
        : F extends "RenamedTitleEvent"
        ? RenamedTitleEventSelector
        : F extends "ReopenedEvent"
        ? ReopenedEventSelector
        : F extends "SubscribedEvent"
        ? SubscribedEventSelector
        : F extends "TransferredEvent"
        ? TransferredEventSelector
        : F extends "UnassignedEvent"
        ? UnassignedEventSelector
        : F extends "UnlabeledEvent"
        ? UnlabeledEventSelector
        : F extends "UnlockedEvent"
        ? UnlockedEventSelector
        : F extends "UnsubscribedEvent"
        ? UnsubscribedEventSelector
        : F extends "UserBlockedEvent"
        ? UserBlockedEventSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const IssueTimelineItem: IssueTimelineItemSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "AssignedEvent": {
        return new InlineFragment(
          new NamedType("AssignedEvent") as any,
          new SelectionSet(select(AssignedEvent as any))
        );
      }

      case "ClosedEvent": {
        return new InlineFragment(
          new NamedType("ClosedEvent") as any,
          new SelectionSet(select(ClosedEvent as any))
        );
      }

      case "Commit": {
        return new InlineFragment(
          new NamedType("Commit") as any,
          new SelectionSet(select(Commit as any))
        );
      }

      case "CrossReferencedEvent": {
        return new InlineFragment(
          new NamedType("CrossReferencedEvent") as any,
          new SelectionSet(select(CrossReferencedEvent as any))
        );
      }

      case "DemilestonedEvent": {
        return new InlineFragment(
          new NamedType("DemilestonedEvent") as any,
          new SelectionSet(select(DemilestonedEvent as any))
        );
      }

      case "IssueComment": {
        return new InlineFragment(
          new NamedType("IssueComment") as any,
          new SelectionSet(select(IssueComment as any))
        );
      }

      case "LabeledEvent": {
        return new InlineFragment(
          new NamedType("LabeledEvent") as any,
          new SelectionSet(select(LabeledEvent as any))
        );
      }

      case "LockedEvent": {
        return new InlineFragment(
          new NamedType("LockedEvent") as any,
          new SelectionSet(select(LockedEvent as any))
        );
      }

      case "MilestonedEvent": {
        return new InlineFragment(
          new NamedType("MilestonedEvent") as any,
          new SelectionSet(select(MilestonedEvent as any))
        );
      }

      case "ReferencedEvent": {
        return new InlineFragment(
          new NamedType("ReferencedEvent") as any,
          new SelectionSet(select(ReferencedEvent as any))
        );
      }

      case "RenamedTitleEvent": {
        return new InlineFragment(
          new NamedType("RenamedTitleEvent") as any,
          new SelectionSet(select(RenamedTitleEvent as any))
        );
      }

      case "ReopenedEvent": {
        return new InlineFragment(
          new NamedType("ReopenedEvent") as any,
          new SelectionSet(select(ReopenedEvent as any))
        );
      }

      case "SubscribedEvent": {
        return new InlineFragment(
          new NamedType("SubscribedEvent") as any,
          new SelectionSet(select(SubscribedEvent as any))
        );
      }

      case "TransferredEvent": {
        return new InlineFragment(
          new NamedType("TransferredEvent") as any,
          new SelectionSet(select(TransferredEvent as any))
        );
      }

      case "UnassignedEvent": {
        return new InlineFragment(
          new NamedType("UnassignedEvent") as any,
          new SelectionSet(select(UnassignedEvent as any))
        );
      }

      case "UnlabeledEvent": {
        return new InlineFragment(
          new NamedType("UnlabeledEvent") as any,
          new SelectionSet(select(UnlabeledEvent as any))
        );
      }

      case "UnlockedEvent": {
        return new InlineFragment(
          new NamedType("UnlockedEvent") as any,
          new SelectionSet(select(UnlockedEvent as any))
        );
      }

      case "UnsubscribedEvent": {
        return new InlineFragment(
          new NamedType("UnsubscribedEvent") as any,
          new SelectionSet(select(UnsubscribedEvent as any))
        );
      }

      case "UserBlockedEvent": {
        return new InlineFragment(
          new NamedType("UserBlockedEvent") as any,
          new SelectionSet(select(UserBlockedEvent as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IIssueTimelineItems =
  | IAddedToProjectEvent
  | IAssignedEvent
  | IClosedEvent
  | ICommentDeletedEvent
  | IConnectedEvent
  | IConvertedNoteToIssueEvent
  | ICrossReferencedEvent
  | IDemilestonedEvent
  | IDisconnectedEvent
  | IIssueComment
  | ILabeledEvent
  | ILockedEvent
  | IMarkedAsDuplicateEvent
  | IMentionedEvent
  | IMilestonedEvent
  | IMovedColumnsInProjectEvent
  | IPinnedEvent
  | IReferencedEvent
  | IRemovedFromProjectEvent
  | IRenamedTitleEvent
  | IReopenedEvent
  | ISubscribedEvent
  | ITransferredEvent
  | IUnassignedEvent
  | IUnlabeledEvent
  | IUnlockedEvent
  | IUnmarkedAsDuplicateEvent
  | IUnpinnedEvent
  | IUnsubscribedEvent
  | IUserBlockedEvent;

interface IssueTimelineItemsSelector {
  __typename: () => Field<"__typename">;

  on: <
    T extends Array<Selection>,
    F extends
      | "AddedToProjectEvent"
      | "AssignedEvent"
      | "ClosedEvent"
      | "CommentDeletedEvent"
      | "ConnectedEvent"
      | "ConvertedNoteToIssueEvent"
      | "CrossReferencedEvent"
      | "DemilestonedEvent"
      | "DisconnectedEvent"
      | "IssueComment"
      | "LabeledEvent"
      | "LockedEvent"
      | "MarkedAsDuplicateEvent"
      | "MentionedEvent"
      | "MilestonedEvent"
      | "MovedColumnsInProjectEvent"
      | "PinnedEvent"
      | "ReferencedEvent"
      | "RemovedFromProjectEvent"
      | "RenamedTitleEvent"
      | "ReopenedEvent"
      | "SubscribedEvent"
      | "TransferredEvent"
      | "UnassignedEvent"
      | "UnlabeledEvent"
      | "UnlockedEvent"
      | "UnmarkedAsDuplicateEvent"
      | "UnpinnedEvent"
      | "UnsubscribedEvent"
      | "UserBlockedEvent"
  >(
    type: F,
    select: (
      t: F extends "AddedToProjectEvent"
        ? AddedToProjectEventSelector
        : F extends "AssignedEvent"
        ? AssignedEventSelector
        : F extends "ClosedEvent"
        ? ClosedEventSelector
        : F extends "CommentDeletedEvent"
        ? CommentDeletedEventSelector
        : F extends "ConnectedEvent"
        ? ConnectedEventSelector
        : F extends "ConvertedNoteToIssueEvent"
        ? ConvertedNoteToIssueEventSelector
        : F extends "CrossReferencedEvent"
        ? CrossReferencedEventSelector
        : F extends "DemilestonedEvent"
        ? DemilestonedEventSelector
        : F extends "DisconnectedEvent"
        ? DisconnectedEventSelector
        : F extends "IssueComment"
        ? IssueCommentSelector
        : F extends "LabeledEvent"
        ? LabeledEventSelector
        : F extends "LockedEvent"
        ? LockedEventSelector
        : F extends "MarkedAsDuplicateEvent"
        ? MarkedAsDuplicateEventSelector
        : F extends "MentionedEvent"
        ? MentionedEventSelector
        : F extends "MilestonedEvent"
        ? MilestonedEventSelector
        : F extends "MovedColumnsInProjectEvent"
        ? MovedColumnsInProjectEventSelector
        : F extends "PinnedEvent"
        ? PinnedEventSelector
        : F extends "ReferencedEvent"
        ? ReferencedEventSelector
        : F extends "RemovedFromProjectEvent"
        ? RemovedFromProjectEventSelector
        : F extends "RenamedTitleEvent"
        ? RenamedTitleEventSelector
        : F extends "ReopenedEvent"
        ? ReopenedEventSelector
        : F extends "SubscribedEvent"
        ? SubscribedEventSelector
        : F extends "TransferredEvent"
        ? TransferredEventSelector
        : F extends "UnassignedEvent"
        ? UnassignedEventSelector
        : F extends "UnlabeledEvent"
        ? UnlabeledEventSelector
        : F extends "UnlockedEvent"
        ? UnlockedEventSelector
        : F extends "UnmarkedAsDuplicateEvent"
        ? UnmarkedAsDuplicateEventSelector
        : F extends "UnpinnedEvent"
        ? UnpinnedEventSelector
        : F extends "UnsubscribedEvent"
        ? UnsubscribedEventSelector
        : F extends "UserBlockedEvent"
        ? UserBlockedEventSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const IssueTimelineItems: IssueTimelineItemsSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "AddedToProjectEvent": {
        return new InlineFragment(
          new NamedType("AddedToProjectEvent") as any,
          new SelectionSet(select(AddedToProjectEvent as any))
        );
      }

      case "AssignedEvent": {
        return new InlineFragment(
          new NamedType("AssignedEvent") as any,
          new SelectionSet(select(AssignedEvent as any))
        );
      }

      case "ClosedEvent": {
        return new InlineFragment(
          new NamedType("ClosedEvent") as any,
          new SelectionSet(select(ClosedEvent as any))
        );
      }

      case "CommentDeletedEvent": {
        return new InlineFragment(
          new NamedType("CommentDeletedEvent") as any,
          new SelectionSet(select(CommentDeletedEvent as any))
        );
      }

      case "ConnectedEvent": {
        return new InlineFragment(
          new NamedType("ConnectedEvent") as any,
          new SelectionSet(select(ConnectedEvent as any))
        );
      }

      case "ConvertedNoteToIssueEvent": {
        return new InlineFragment(
          new NamedType("ConvertedNoteToIssueEvent") as any,
          new SelectionSet(select(ConvertedNoteToIssueEvent as any))
        );
      }

      case "CrossReferencedEvent": {
        return new InlineFragment(
          new NamedType("CrossReferencedEvent") as any,
          new SelectionSet(select(CrossReferencedEvent as any))
        );
      }

      case "DemilestonedEvent": {
        return new InlineFragment(
          new NamedType("DemilestonedEvent") as any,
          new SelectionSet(select(DemilestonedEvent as any))
        );
      }

      case "DisconnectedEvent": {
        return new InlineFragment(
          new NamedType("DisconnectedEvent") as any,
          new SelectionSet(select(DisconnectedEvent as any))
        );
      }

      case "IssueComment": {
        return new InlineFragment(
          new NamedType("IssueComment") as any,
          new SelectionSet(select(IssueComment as any))
        );
      }

      case "LabeledEvent": {
        return new InlineFragment(
          new NamedType("LabeledEvent") as any,
          new SelectionSet(select(LabeledEvent as any))
        );
      }

      case "LockedEvent": {
        return new InlineFragment(
          new NamedType("LockedEvent") as any,
          new SelectionSet(select(LockedEvent as any))
        );
      }

      case "MarkedAsDuplicateEvent": {
        return new InlineFragment(
          new NamedType("MarkedAsDuplicateEvent") as any,
          new SelectionSet(select(MarkedAsDuplicateEvent as any))
        );
      }

      case "MentionedEvent": {
        return new InlineFragment(
          new NamedType("MentionedEvent") as any,
          new SelectionSet(select(MentionedEvent as any))
        );
      }

      case "MilestonedEvent": {
        return new InlineFragment(
          new NamedType("MilestonedEvent") as any,
          new SelectionSet(select(MilestonedEvent as any))
        );
      }

      case "MovedColumnsInProjectEvent": {
        return new InlineFragment(
          new NamedType("MovedColumnsInProjectEvent") as any,
          new SelectionSet(select(MovedColumnsInProjectEvent as any))
        );
      }

      case "PinnedEvent": {
        return new InlineFragment(
          new NamedType("PinnedEvent") as any,
          new SelectionSet(select(PinnedEvent as any))
        );
      }

      case "ReferencedEvent": {
        return new InlineFragment(
          new NamedType("ReferencedEvent") as any,
          new SelectionSet(select(ReferencedEvent as any))
        );
      }

      case "RemovedFromProjectEvent": {
        return new InlineFragment(
          new NamedType("RemovedFromProjectEvent") as any,
          new SelectionSet(select(RemovedFromProjectEvent as any))
        );
      }

      case "RenamedTitleEvent": {
        return new InlineFragment(
          new NamedType("RenamedTitleEvent") as any,
          new SelectionSet(select(RenamedTitleEvent as any))
        );
      }

      case "ReopenedEvent": {
        return new InlineFragment(
          new NamedType("ReopenedEvent") as any,
          new SelectionSet(select(ReopenedEvent as any))
        );
      }

      case "SubscribedEvent": {
        return new InlineFragment(
          new NamedType("SubscribedEvent") as any,
          new SelectionSet(select(SubscribedEvent as any))
        );
      }

      case "TransferredEvent": {
        return new InlineFragment(
          new NamedType("TransferredEvent") as any,
          new SelectionSet(select(TransferredEvent as any))
        );
      }

      case "UnassignedEvent": {
        return new InlineFragment(
          new NamedType("UnassignedEvent") as any,
          new SelectionSet(select(UnassignedEvent as any))
        );
      }

      case "UnlabeledEvent": {
        return new InlineFragment(
          new NamedType("UnlabeledEvent") as any,
          new SelectionSet(select(UnlabeledEvent as any))
        );
      }

      case "UnlockedEvent": {
        return new InlineFragment(
          new NamedType("UnlockedEvent") as any,
          new SelectionSet(select(UnlockedEvent as any))
        );
      }

      case "UnmarkedAsDuplicateEvent": {
        return new InlineFragment(
          new NamedType("UnmarkedAsDuplicateEvent") as any,
          new SelectionSet(select(UnmarkedAsDuplicateEvent as any))
        );
      }

      case "UnpinnedEvent": {
        return new InlineFragment(
          new NamedType("UnpinnedEvent") as any,
          new SelectionSet(select(UnpinnedEvent as any))
        );
      }

      case "UnsubscribedEvent": {
        return new InlineFragment(
          new NamedType("UnsubscribedEvent") as any,
          new SelectionSet(select(UnsubscribedEvent as any))
        );
      }

      case "UserBlockedEvent": {
        return new InlineFragment(
          new NamedType("UserBlockedEvent") as any,
          new SelectionSet(select(UserBlockedEvent as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IMilestoneItem = IIssue | IPullRequest;

interface MilestoneItemSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "Issue" | "PullRequest">(
    type: F,
    select: (
      t: F extends "Issue"
        ? IssueSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const MilestoneItem: MilestoneItemSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IOrgRestoreMemberAuditEntryMembership =
  | IOrgRestoreMemberMembershipOrganizationAuditEntryData
  | IOrgRestoreMemberMembershipRepositoryAuditEntryData
  | IOrgRestoreMemberMembershipTeamAuditEntryData;

interface OrgRestoreMemberAuditEntryMembershipSelector {
  __typename: () => Field<"__typename">;

  on: <
    T extends Array<Selection>,
    F extends
      | "OrgRestoreMemberMembershipOrganizationAuditEntryData"
      | "OrgRestoreMemberMembershipRepositoryAuditEntryData"
      | "OrgRestoreMemberMembershipTeamAuditEntryData"
  >(
    type: F,
    select: (
      t: F extends "OrgRestoreMemberMembershipOrganizationAuditEntryData"
        ? OrgRestoreMemberMembershipOrganizationAuditEntryDataSelector
        : F extends "OrgRestoreMemberMembershipRepositoryAuditEntryData"
        ? OrgRestoreMemberMembershipRepositoryAuditEntryDataSelector
        : F extends "OrgRestoreMemberMembershipTeamAuditEntryData"
        ? OrgRestoreMemberMembershipTeamAuditEntryDataSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const OrgRestoreMemberAuditEntryMembership: OrgRestoreMemberAuditEntryMembershipSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "OrgRestoreMemberMembershipOrganizationAuditEntryData": {
        return new InlineFragment(
          new NamedType(
            "OrgRestoreMemberMembershipOrganizationAuditEntryData"
          ) as any,
          new SelectionSet(
            select(OrgRestoreMemberMembershipOrganizationAuditEntryData as any)
          )
        );
      }

      case "OrgRestoreMemberMembershipRepositoryAuditEntryData": {
        return new InlineFragment(
          new NamedType(
            "OrgRestoreMemberMembershipRepositoryAuditEntryData"
          ) as any,
          new SelectionSet(
            select(OrgRestoreMemberMembershipRepositoryAuditEntryData as any)
          )
        );
      }

      case "OrgRestoreMemberMembershipTeamAuditEntryData": {
        return new InlineFragment(
          new NamedType("OrgRestoreMemberMembershipTeamAuditEntryData") as any,
          new SelectionSet(
            select(OrgRestoreMemberMembershipTeamAuditEntryData as any)
          )
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IOrganizationAuditEntry =
  | IMembersCanDeleteReposClearAuditEntry
  | IMembersCanDeleteReposDisableAuditEntry
  | IMembersCanDeleteReposEnableAuditEntry
  | IOauthApplicationCreateAuditEntry
  | IOrgAddBillingManagerAuditEntry
  | IOrgAddMemberAuditEntry
  | IOrgBlockUserAuditEntry
  | IOrgConfigDisableCollaboratorsOnlyAuditEntry
  | IOrgConfigEnableCollaboratorsOnlyAuditEntry
  | IOrgCreateAuditEntry
  | IOrgDisableOauthAppRestrictionsAuditEntry
  | IOrgDisableSamlAuditEntry
  | IOrgDisableTwoFactorRequirementAuditEntry
  | IOrgEnableOauthAppRestrictionsAuditEntry
  | IOrgEnableSamlAuditEntry
  | IOrgEnableTwoFactorRequirementAuditEntry
  | IOrgInviteMemberAuditEntry
  | IOrgInviteToBusinessAuditEntry
  | IOrgOauthAppAccessApprovedAuditEntry
  | IOrgOauthAppAccessDeniedAuditEntry
  | IOrgOauthAppAccessRequestedAuditEntry
  | IOrgRemoveBillingManagerAuditEntry
  | IOrgRemoveMemberAuditEntry
  | IOrgRemoveOutsideCollaboratorAuditEntry
  | IOrgRestoreMemberAuditEntry
  | IOrgUnblockUserAuditEntry
  | IOrgUpdateDefaultRepositoryPermissionAuditEntry
  | IOrgUpdateMemberAuditEntry
  | IOrgUpdateMemberRepositoryCreationPermissionAuditEntry
  | IOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  | IPrivateRepositoryForkingDisableAuditEntry
  | IPrivateRepositoryForkingEnableAuditEntry
  | IRepoAccessAuditEntry
  | IRepoAddMemberAuditEntry
  | IRepoAddTopicAuditEntry
  | IRepoArchivedAuditEntry
  | IRepoChangeMergeSettingAuditEntry
  | IRepoConfigDisableAnonymousGitAccessAuditEntry
  | IRepoConfigDisableCollaboratorsOnlyAuditEntry
  | IRepoConfigDisableContributorsOnlyAuditEntry
  | IRepoConfigDisableSockpuppetDisallowedAuditEntry
  | IRepoConfigEnableAnonymousGitAccessAuditEntry
  | IRepoConfigEnableCollaboratorsOnlyAuditEntry
  | IRepoConfigEnableContributorsOnlyAuditEntry
  | IRepoConfigEnableSockpuppetDisallowedAuditEntry
  | IRepoConfigLockAnonymousGitAccessAuditEntry
  | IRepoConfigUnlockAnonymousGitAccessAuditEntry
  | IRepoCreateAuditEntry
  | IRepoDestroyAuditEntry
  | IRepoRemoveMemberAuditEntry
  | IRepoRemoveTopicAuditEntry
  | IRepositoryVisibilityChangeDisableAuditEntry
  | IRepositoryVisibilityChangeEnableAuditEntry
  | ITeamAddMemberAuditEntry
  | ITeamAddRepositoryAuditEntry
  | ITeamChangeParentTeamAuditEntry
  | ITeamRemoveMemberAuditEntry
  | ITeamRemoveRepositoryAuditEntry;

interface OrganizationAuditEntrySelector {
  __typename: () => Field<"__typename">;

  on: <
    T extends Array<Selection>,
    F extends
      | "MembersCanDeleteReposClearAuditEntry"
      | "MembersCanDeleteReposDisableAuditEntry"
      | "MembersCanDeleteReposEnableAuditEntry"
      | "OauthApplicationCreateAuditEntry"
      | "OrgAddBillingManagerAuditEntry"
      | "OrgAddMemberAuditEntry"
      | "OrgBlockUserAuditEntry"
      | "OrgConfigDisableCollaboratorsOnlyAuditEntry"
      | "OrgConfigEnableCollaboratorsOnlyAuditEntry"
      | "OrgCreateAuditEntry"
      | "OrgDisableOauthAppRestrictionsAuditEntry"
      | "OrgDisableSamlAuditEntry"
      | "OrgDisableTwoFactorRequirementAuditEntry"
      | "OrgEnableOauthAppRestrictionsAuditEntry"
      | "OrgEnableSamlAuditEntry"
      | "OrgEnableTwoFactorRequirementAuditEntry"
      | "OrgInviteMemberAuditEntry"
      | "OrgInviteToBusinessAuditEntry"
      | "OrgOauthAppAccessApprovedAuditEntry"
      | "OrgOauthAppAccessDeniedAuditEntry"
      | "OrgOauthAppAccessRequestedAuditEntry"
      | "OrgRemoveBillingManagerAuditEntry"
      | "OrgRemoveMemberAuditEntry"
      | "OrgRemoveOutsideCollaboratorAuditEntry"
      | "OrgRestoreMemberAuditEntry"
      | "OrgUnblockUserAuditEntry"
      | "OrgUpdateDefaultRepositoryPermissionAuditEntry"
      | "OrgUpdateMemberAuditEntry"
      | "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
      | "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
      | "PrivateRepositoryForkingDisableAuditEntry"
      | "PrivateRepositoryForkingEnableAuditEntry"
      | "RepoAccessAuditEntry"
      | "RepoAddMemberAuditEntry"
      | "RepoAddTopicAuditEntry"
      | "RepoArchivedAuditEntry"
      | "RepoChangeMergeSettingAuditEntry"
      | "RepoConfigDisableAnonymousGitAccessAuditEntry"
      | "RepoConfigDisableCollaboratorsOnlyAuditEntry"
      | "RepoConfigDisableContributorsOnlyAuditEntry"
      | "RepoConfigDisableSockpuppetDisallowedAuditEntry"
      | "RepoConfigEnableAnonymousGitAccessAuditEntry"
      | "RepoConfigEnableCollaboratorsOnlyAuditEntry"
      | "RepoConfigEnableContributorsOnlyAuditEntry"
      | "RepoConfigEnableSockpuppetDisallowedAuditEntry"
      | "RepoConfigLockAnonymousGitAccessAuditEntry"
      | "RepoConfigUnlockAnonymousGitAccessAuditEntry"
      | "RepoCreateAuditEntry"
      | "RepoDestroyAuditEntry"
      | "RepoRemoveMemberAuditEntry"
      | "RepoRemoveTopicAuditEntry"
      | "RepositoryVisibilityChangeDisableAuditEntry"
      | "RepositoryVisibilityChangeEnableAuditEntry"
      | "TeamAddMemberAuditEntry"
      | "TeamAddRepositoryAuditEntry"
      | "TeamChangeParentTeamAuditEntry"
      | "TeamRemoveMemberAuditEntry"
      | "TeamRemoveRepositoryAuditEntry"
  >(
    type: F,
    select: (
      t: F extends "MembersCanDeleteReposClearAuditEntry"
        ? MembersCanDeleteReposClearAuditEntrySelector
        : F extends "MembersCanDeleteReposDisableAuditEntry"
        ? MembersCanDeleteReposDisableAuditEntrySelector
        : F extends "MembersCanDeleteReposEnableAuditEntry"
        ? MembersCanDeleteReposEnableAuditEntrySelector
        : F extends "OauthApplicationCreateAuditEntry"
        ? OauthApplicationCreateAuditEntrySelector
        : F extends "OrgAddBillingManagerAuditEntry"
        ? OrgAddBillingManagerAuditEntrySelector
        : F extends "OrgAddMemberAuditEntry"
        ? OrgAddMemberAuditEntrySelector
        : F extends "OrgBlockUserAuditEntry"
        ? OrgBlockUserAuditEntrySelector
        : F extends "OrgConfigDisableCollaboratorsOnlyAuditEntry"
        ? OrgConfigDisableCollaboratorsOnlyAuditEntrySelector
        : F extends "OrgConfigEnableCollaboratorsOnlyAuditEntry"
        ? OrgConfigEnableCollaboratorsOnlyAuditEntrySelector
        : F extends "OrgCreateAuditEntry"
        ? OrgCreateAuditEntrySelector
        : F extends "OrgDisableOauthAppRestrictionsAuditEntry"
        ? OrgDisableOauthAppRestrictionsAuditEntrySelector
        : F extends "OrgDisableSamlAuditEntry"
        ? OrgDisableSamlAuditEntrySelector
        : F extends "OrgDisableTwoFactorRequirementAuditEntry"
        ? OrgDisableTwoFactorRequirementAuditEntrySelector
        : F extends "OrgEnableOauthAppRestrictionsAuditEntry"
        ? OrgEnableOauthAppRestrictionsAuditEntrySelector
        : F extends "OrgEnableSamlAuditEntry"
        ? OrgEnableSamlAuditEntrySelector
        : F extends "OrgEnableTwoFactorRequirementAuditEntry"
        ? OrgEnableTwoFactorRequirementAuditEntrySelector
        : F extends "OrgInviteMemberAuditEntry"
        ? OrgInviteMemberAuditEntrySelector
        : F extends "OrgInviteToBusinessAuditEntry"
        ? OrgInviteToBusinessAuditEntrySelector
        : F extends "OrgOauthAppAccessApprovedAuditEntry"
        ? OrgOauthAppAccessApprovedAuditEntrySelector
        : F extends "OrgOauthAppAccessDeniedAuditEntry"
        ? OrgOauthAppAccessDeniedAuditEntrySelector
        : F extends "OrgOauthAppAccessRequestedAuditEntry"
        ? OrgOauthAppAccessRequestedAuditEntrySelector
        : F extends "OrgRemoveBillingManagerAuditEntry"
        ? OrgRemoveBillingManagerAuditEntrySelector
        : F extends "OrgRemoveMemberAuditEntry"
        ? OrgRemoveMemberAuditEntrySelector
        : F extends "OrgRemoveOutsideCollaboratorAuditEntry"
        ? OrgRemoveOutsideCollaboratorAuditEntrySelector
        : F extends "OrgRestoreMemberAuditEntry"
        ? OrgRestoreMemberAuditEntrySelector
        : F extends "OrgUnblockUserAuditEntry"
        ? OrgUnblockUserAuditEntrySelector
        : F extends "OrgUpdateDefaultRepositoryPermissionAuditEntry"
        ? OrgUpdateDefaultRepositoryPermissionAuditEntrySelector
        : F extends "OrgUpdateMemberAuditEntry"
        ? OrgUpdateMemberAuditEntrySelector
        : F extends "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
        ? OrgUpdateMemberRepositoryCreationPermissionAuditEntrySelector
        : F extends "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
        ? OrgUpdateMemberRepositoryInvitationPermissionAuditEntrySelector
        : F extends "PrivateRepositoryForkingDisableAuditEntry"
        ? PrivateRepositoryForkingDisableAuditEntrySelector
        : F extends "PrivateRepositoryForkingEnableAuditEntry"
        ? PrivateRepositoryForkingEnableAuditEntrySelector
        : F extends "RepoAccessAuditEntry"
        ? RepoAccessAuditEntrySelector
        : F extends "RepoAddMemberAuditEntry"
        ? RepoAddMemberAuditEntrySelector
        : F extends "RepoAddTopicAuditEntry"
        ? RepoAddTopicAuditEntrySelector
        : F extends "RepoArchivedAuditEntry"
        ? RepoArchivedAuditEntrySelector
        : F extends "RepoChangeMergeSettingAuditEntry"
        ? RepoChangeMergeSettingAuditEntrySelector
        : F extends "RepoConfigDisableAnonymousGitAccessAuditEntry"
        ? RepoConfigDisableAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigDisableCollaboratorsOnlyAuditEntry"
        ? RepoConfigDisableCollaboratorsOnlyAuditEntrySelector
        : F extends "RepoConfigDisableContributorsOnlyAuditEntry"
        ? RepoConfigDisableContributorsOnlyAuditEntrySelector
        : F extends "RepoConfigDisableSockpuppetDisallowedAuditEntry"
        ? RepoConfigDisableSockpuppetDisallowedAuditEntrySelector
        : F extends "RepoConfigEnableAnonymousGitAccessAuditEntry"
        ? RepoConfigEnableAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigEnableCollaboratorsOnlyAuditEntry"
        ? RepoConfigEnableCollaboratorsOnlyAuditEntrySelector
        : F extends "RepoConfigEnableContributorsOnlyAuditEntry"
        ? RepoConfigEnableContributorsOnlyAuditEntrySelector
        : F extends "RepoConfigEnableSockpuppetDisallowedAuditEntry"
        ? RepoConfigEnableSockpuppetDisallowedAuditEntrySelector
        : F extends "RepoConfigLockAnonymousGitAccessAuditEntry"
        ? RepoConfigLockAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigUnlockAnonymousGitAccessAuditEntry"
        ? RepoConfigUnlockAnonymousGitAccessAuditEntrySelector
        : F extends "RepoCreateAuditEntry"
        ? RepoCreateAuditEntrySelector
        : F extends "RepoDestroyAuditEntry"
        ? RepoDestroyAuditEntrySelector
        : F extends "RepoRemoveMemberAuditEntry"
        ? RepoRemoveMemberAuditEntrySelector
        : F extends "RepoRemoveTopicAuditEntry"
        ? RepoRemoveTopicAuditEntrySelector
        : F extends "RepositoryVisibilityChangeDisableAuditEntry"
        ? RepositoryVisibilityChangeDisableAuditEntrySelector
        : F extends "RepositoryVisibilityChangeEnableAuditEntry"
        ? RepositoryVisibilityChangeEnableAuditEntrySelector
        : F extends "TeamAddMemberAuditEntry"
        ? TeamAddMemberAuditEntrySelector
        : F extends "TeamAddRepositoryAuditEntry"
        ? TeamAddRepositoryAuditEntrySelector
        : F extends "TeamChangeParentTeamAuditEntry"
        ? TeamChangeParentTeamAuditEntrySelector
        : F extends "TeamRemoveMemberAuditEntry"
        ? TeamRemoveMemberAuditEntrySelector
        : F extends "TeamRemoveRepositoryAuditEntry"
        ? TeamRemoveRepositoryAuditEntrySelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const OrganizationAuditEntry: OrganizationAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "MembersCanDeleteReposClearAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposClearAuditEntry") as any,
          new SelectionSet(select(MembersCanDeleteReposClearAuditEntry as any))
        );
      }

      case "MembersCanDeleteReposDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposDisableAuditEntry") as any,
          new SelectionSet(
            select(MembersCanDeleteReposDisableAuditEntry as any)
          )
        );
      }

      case "MembersCanDeleteReposEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposEnableAuditEntry") as any,
          new SelectionSet(select(MembersCanDeleteReposEnableAuditEntry as any))
        );
      }

      case "OauthApplicationCreateAuditEntry": {
        return new InlineFragment(
          new NamedType("OauthApplicationCreateAuditEntry") as any,
          new SelectionSet(select(OauthApplicationCreateAuditEntry as any))
        );
      }

      case "OrgAddBillingManagerAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgAddBillingManagerAuditEntry") as any,
          new SelectionSet(select(OrgAddBillingManagerAuditEntry as any))
        );
      }

      case "OrgAddMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgAddMemberAuditEntry") as any,
          new SelectionSet(select(OrgAddMemberAuditEntry as any))
        );
      }

      case "OrgBlockUserAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgBlockUserAuditEntry") as any,
          new SelectionSet(select(OrgBlockUserAuditEntry as any))
        );
      }

      case "OrgConfigDisableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgConfigDisableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(OrgConfigDisableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "OrgConfigEnableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgConfigEnableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(OrgConfigEnableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "OrgCreateAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgCreateAuditEntry") as any,
          new SelectionSet(select(OrgCreateAuditEntry as any))
        );
      }

      case "OrgDisableOauthAppRestrictionsAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgDisableOauthAppRestrictionsAuditEntry") as any,
          new SelectionSet(
            select(OrgDisableOauthAppRestrictionsAuditEntry as any)
          )
        );
      }

      case "OrgDisableSamlAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgDisableSamlAuditEntry") as any,
          new SelectionSet(select(OrgDisableSamlAuditEntry as any))
        );
      }

      case "OrgDisableTwoFactorRequirementAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgDisableTwoFactorRequirementAuditEntry") as any,
          new SelectionSet(
            select(OrgDisableTwoFactorRequirementAuditEntry as any)
          )
        );
      }

      case "OrgEnableOauthAppRestrictionsAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgEnableOauthAppRestrictionsAuditEntry") as any,
          new SelectionSet(
            select(OrgEnableOauthAppRestrictionsAuditEntry as any)
          )
        );
      }

      case "OrgEnableSamlAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgEnableSamlAuditEntry") as any,
          new SelectionSet(select(OrgEnableSamlAuditEntry as any))
        );
      }

      case "OrgEnableTwoFactorRequirementAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgEnableTwoFactorRequirementAuditEntry") as any,
          new SelectionSet(
            select(OrgEnableTwoFactorRequirementAuditEntry as any)
          )
        );
      }

      case "OrgInviteMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgInviteMemberAuditEntry") as any,
          new SelectionSet(select(OrgInviteMemberAuditEntry as any))
        );
      }

      case "OrgInviteToBusinessAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgInviteToBusinessAuditEntry") as any,
          new SelectionSet(select(OrgInviteToBusinessAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessApprovedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessApprovedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessApprovedAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessDeniedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessDeniedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessDeniedAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessRequestedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessRequestedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessRequestedAuditEntry as any))
        );
      }

      case "OrgRemoveBillingManagerAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRemoveBillingManagerAuditEntry") as any,
          new SelectionSet(select(OrgRemoveBillingManagerAuditEntry as any))
        );
      }

      case "OrgRemoveMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRemoveMemberAuditEntry") as any,
          new SelectionSet(select(OrgRemoveMemberAuditEntry as any))
        );
      }

      case "OrgRemoveOutsideCollaboratorAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRemoveOutsideCollaboratorAuditEntry") as any,
          new SelectionSet(
            select(OrgRemoveOutsideCollaboratorAuditEntry as any)
          )
        );
      }

      case "OrgRestoreMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRestoreMemberAuditEntry") as any,
          new SelectionSet(select(OrgRestoreMemberAuditEntry as any))
        );
      }

      case "OrgUnblockUserAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgUnblockUserAuditEntry") as any,
          new SelectionSet(select(OrgUnblockUserAuditEntry as any))
        );
      }

      case "OrgUpdateDefaultRepositoryPermissionAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "OrgUpdateDefaultRepositoryPermissionAuditEntry"
          ) as any,
          new SelectionSet(
            select(OrgUpdateDefaultRepositoryPermissionAuditEntry as any)
          )
        );
      }

      case "OrgUpdateMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgUpdateMemberAuditEntry") as any,
          new SelectionSet(select(OrgUpdateMemberAuditEntry as any))
        );
      }

      case "OrgUpdateMemberRepositoryCreationPermissionAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
          ) as any,
          new SelectionSet(
            select(OrgUpdateMemberRepositoryCreationPermissionAuditEntry as any)
          )
        );
      }

      case "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
          ) as any,
          new SelectionSet(
            select(
              OrgUpdateMemberRepositoryInvitationPermissionAuditEntry as any
            )
          )
        );
      }

      case "PrivateRepositoryForkingDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("PrivateRepositoryForkingDisableAuditEntry") as any,
          new SelectionSet(
            select(PrivateRepositoryForkingDisableAuditEntry as any)
          )
        );
      }

      case "PrivateRepositoryForkingEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("PrivateRepositoryForkingEnableAuditEntry") as any,
          new SelectionSet(
            select(PrivateRepositoryForkingEnableAuditEntry as any)
          )
        );
      }

      case "RepoAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAccessAuditEntry") as any,
          new SelectionSet(select(RepoAccessAuditEntry as any))
        );
      }

      case "RepoAddMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAddMemberAuditEntry") as any,
          new SelectionSet(select(RepoAddMemberAuditEntry as any))
        );
      }

      case "RepoAddTopicAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAddTopicAuditEntry") as any,
          new SelectionSet(select(RepoAddTopicAuditEntry as any))
        );
      }

      case "RepoArchivedAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoArchivedAuditEntry") as any,
          new SelectionSet(select(RepoArchivedAuditEntry as any))
        );
      }

      case "RepoChangeMergeSettingAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoChangeMergeSettingAuditEntry") as any,
          new SelectionSet(select(RepoChangeMergeSettingAuditEntry as any))
        );
      }

      case "RepoConfigDisableAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableContributorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableContributorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableContributorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableSockpuppetDisallowedAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "RepoConfigDisableSockpuppetDisallowedAuditEntry"
          ) as any,
          new SelectionSet(
            select(RepoConfigDisableSockpuppetDisallowedAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableContributorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableContributorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableContributorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableSockpuppetDisallowedAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "RepoConfigEnableSockpuppetDisallowedAuditEntry"
          ) as any,
          new SelectionSet(
            select(RepoConfigEnableSockpuppetDisallowedAuditEntry as any)
          )
        );
      }

      case "RepoConfigLockAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigLockAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigLockAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigUnlockAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigUnlockAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigUnlockAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoCreateAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoCreateAuditEntry") as any,
          new SelectionSet(select(RepoCreateAuditEntry as any))
        );
      }

      case "RepoDestroyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoDestroyAuditEntry") as any,
          new SelectionSet(select(RepoDestroyAuditEntry as any))
        );
      }

      case "RepoRemoveMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoRemoveMemberAuditEntry") as any,
          new SelectionSet(select(RepoRemoveMemberAuditEntry as any))
        );
      }

      case "RepoRemoveTopicAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoRemoveTopicAuditEntry") as any,
          new SelectionSet(select(RepoRemoveTopicAuditEntry as any))
        );
      }

      case "RepositoryVisibilityChangeDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("RepositoryVisibilityChangeDisableAuditEntry") as any,
          new SelectionSet(
            select(RepositoryVisibilityChangeDisableAuditEntry as any)
          )
        );
      }

      case "RepositoryVisibilityChangeEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("RepositoryVisibilityChangeEnableAuditEntry") as any,
          new SelectionSet(
            select(RepositoryVisibilityChangeEnableAuditEntry as any)
          )
        );
      }

      case "TeamAddMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamAddMemberAuditEntry") as any,
          new SelectionSet(select(TeamAddMemberAuditEntry as any))
        );
      }

      case "TeamAddRepositoryAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamAddRepositoryAuditEntry") as any,
          new SelectionSet(select(TeamAddRepositoryAuditEntry as any))
        );
      }

      case "TeamChangeParentTeamAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamChangeParentTeamAuditEntry") as any,
          new SelectionSet(select(TeamChangeParentTeamAuditEntry as any))
        );
      }

      case "TeamRemoveMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamRemoveMemberAuditEntry") as any,
          new SelectionSet(select(TeamRemoveMemberAuditEntry as any))
        );
      }

      case "TeamRemoveRepositoryAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamRemoveRepositoryAuditEntry") as any,
          new SelectionSet(select(TeamRemoveRepositoryAuditEntry as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IPermissionGranter = IOrganization | IRepository | ITeam;

interface PermissionGranterSelector {
  __typename: () => Field<"__typename">;

  on: <
    T extends Array<Selection>,
    F extends "Organization" | "Repository" | "Team"
  >(
    type: F,
    select: (
      t: F extends "Organization"
        ? OrganizationSelector
        : F extends "Repository"
        ? RepositorySelector
        : F extends "Team"
        ? TeamSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const PermissionGranter: PermissionGranterSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      case "Repository": {
        return new InlineFragment(
          new NamedType("Repository") as any,
          new SelectionSet(select(Repository as any))
        );
      }

      case "Team": {
        return new InlineFragment(
          new NamedType("Team") as any,
          new SelectionSet(select(Team as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IPinnableItem = IGist | IRepository;

interface PinnableItemSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "Gist" | "Repository">(
    type: F,
    select: (
      t: F extends "Gist"
        ? GistSelector
        : F extends "Repository"
        ? RepositorySelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const PinnableItem: PinnableItemSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "Gist": {
        return new InlineFragment(
          new NamedType("Gist") as any,
          new SelectionSet(select(Gist as any))
        );
      }

      case "Repository": {
        return new InlineFragment(
          new NamedType("Repository") as any,
          new SelectionSet(select(Repository as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IProjectCardItem = IIssue | IPullRequest;

interface ProjectCardItemSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "Issue" | "PullRequest">(
    type: F,
    select: (
      t: F extends "Issue"
        ? IssueSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const ProjectCardItem: ProjectCardItemSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IPullRequestTimelineItem =
  | IAssignedEvent
  | IBaseRefDeletedEvent
  | IBaseRefForcePushedEvent
  | IClosedEvent
  | ICommit
  | ICommitCommentThread
  | ICrossReferencedEvent
  | IDemilestonedEvent
  | IDeployedEvent
  | IDeploymentEnvironmentChangedEvent
  | IHeadRefDeletedEvent
  | IHeadRefForcePushedEvent
  | IHeadRefRestoredEvent
  | IIssueComment
  | ILabeledEvent
  | ILockedEvent
  | IMergedEvent
  | IMilestonedEvent
  | IPullRequestReview
  | IPullRequestReviewComment
  | IPullRequestReviewThread
  | IReferencedEvent
  | IRenamedTitleEvent
  | IReopenedEvent
  | IReviewDismissedEvent
  | IReviewRequestRemovedEvent
  | IReviewRequestedEvent
  | ISubscribedEvent
  | IUnassignedEvent
  | IUnlabeledEvent
  | IUnlockedEvent
  | IUnsubscribedEvent
  | IUserBlockedEvent;

interface PullRequestTimelineItemSelector {
  __typename: () => Field<"__typename">;

  on: <
    T extends Array<Selection>,
    F extends
      | "AssignedEvent"
      | "BaseRefDeletedEvent"
      | "BaseRefForcePushedEvent"
      | "ClosedEvent"
      | "Commit"
      | "CommitCommentThread"
      | "CrossReferencedEvent"
      | "DemilestonedEvent"
      | "DeployedEvent"
      | "DeploymentEnvironmentChangedEvent"
      | "HeadRefDeletedEvent"
      | "HeadRefForcePushedEvent"
      | "HeadRefRestoredEvent"
      | "IssueComment"
      | "LabeledEvent"
      | "LockedEvent"
      | "MergedEvent"
      | "MilestonedEvent"
      | "PullRequestReview"
      | "PullRequestReviewComment"
      | "PullRequestReviewThread"
      | "ReferencedEvent"
      | "RenamedTitleEvent"
      | "ReopenedEvent"
      | "ReviewDismissedEvent"
      | "ReviewRequestRemovedEvent"
      | "ReviewRequestedEvent"
      | "SubscribedEvent"
      | "UnassignedEvent"
      | "UnlabeledEvent"
      | "UnlockedEvent"
      | "UnsubscribedEvent"
      | "UserBlockedEvent"
  >(
    type: F,
    select: (
      t: F extends "AssignedEvent"
        ? AssignedEventSelector
        : F extends "BaseRefDeletedEvent"
        ? BaseRefDeletedEventSelector
        : F extends "BaseRefForcePushedEvent"
        ? BaseRefForcePushedEventSelector
        : F extends "ClosedEvent"
        ? ClosedEventSelector
        : F extends "Commit"
        ? CommitSelector
        : F extends "CommitCommentThread"
        ? CommitCommentThreadSelector
        : F extends "CrossReferencedEvent"
        ? CrossReferencedEventSelector
        : F extends "DemilestonedEvent"
        ? DemilestonedEventSelector
        : F extends "DeployedEvent"
        ? DeployedEventSelector
        : F extends "DeploymentEnvironmentChangedEvent"
        ? DeploymentEnvironmentChangedEventSelector
        : F extends "HeadRefDeletedEvent"
        ? HeadRefDeletedEventSelector
        : F extends "HeadRefForcePushedEvent"
        ? HeadRefForcePushedEventSelector
        : F extends "HeadRefRestoredEvent"
        ? HeadRefRestoredEventSelector
        : F extends "IssueComment"
        ? IssueCommentSelector
        : F extends "LabeledEvent"
        ? LabeledEventSelector
        : F extends "LockedEvent"
        ? LockedEventSelector
        : F extends "MergedEvent"
        ? MergedEventSelector
        : F extends "MilestonedEvent"
        ? MilestonedEventSelector
        : F extends "PullRequestReview"
        ? PullRequestReviewSelector
        : F extends "PullRequestReviewComment"
        ? PullRequestReviewCommentSelector
        : F extends "PullRequestReviewThread"
        ? PullRequestReviewThreadSelector
        : F extends "ReferencedEvent"
        ? ReferencedEventSelector
        : F extends "RenamedTitleEvent"
        ? RenamedTitleEventSelector
        : F extends "ReopenedEvent"
        ? ReopenedEventSelector
        : F extends "ReviewDismissedEvent"
        ? ReviewDismissedEventSelector
        : F extends "ReviewRequestRemovedEvent"
        ? ReviewRequestRemovedEventSelector
        : F extends "ReviewRequestedEvent"
        ? ReviewRequestedEventSelector
        : F extends "SubscribedEvent"
        ? SubscribedEventSelector
        : F extends "UnassignedEvent"
        ? UnassignedEventSelector
        : F extends "UnlabeledEvent"
        ? UnlabeledEventSelector
        : F extends "UnlockedEvent"
        ? UnlockedEventSelector
        : F extends "UnsubscribedEvent"
        ? UnsubscribedEventSelector
        : F extends "UserBlockedEvent"
        ? UserBlockedEventSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const PullRequestTimelineItem: PullRequestTimelineItemSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "AssignedEvent": {
        return new InlineFragment(
          new NamedType("AssignedEvent") as any,
          new SelectionSet(select(AssignedEvent as any))
        );
      }

      case "BaseRefDeletedEvent": {
        return new InlineFragment(
          new NamedType("BaseRefDeletedEvent") as any,
          new SelectionSet(select(BaseRefDeletedEvent as any))
        );
      }

      case "BaseRefForcePushedEvent": {
        return new InlineFragment(
          new NamedType("BaseRefForcePushedEvent") as any,
          new SelectionSet(select(BaseRefForcePushedEvent as any))
        );
      }

      case "ClosedEvent": {
        return new InlineFragment(
          new NamedType("ClosedEvent") as any,
          new SelectionSet(select(ClosedEvent as any))
        );
      }

      case "Commit": {
        return new InlineFragment(
          new NamedType("Commit") as any,
          new SelectionSet(select(Commit as any))
        );
      }

      case "CommitCommentThread": {
        return new InlineFragment(
          new NamedType("CommitCommentThread") as any,
          new SelectionSet(select(CommitCommentThread as any))
        );
      }

      case "CrossReferencedEvent": {
        return new InlineFragment(
          new NamedType("CrossReferencedEvent") as any,
          new SelectionSet(select(CrossReferencedEvent as any))
        );
      }

      case "DemilestonedEvent": {
        return new InlineFragment(
          new NamedType("DemilestonedEvent") as any,
          new SelectionSet(select(DemilestonedEvent as any))
        );
      }

      case "DeployedEvent": {
        return new InlineFragment(
          new NamedType("DeployedEvent") as any,
          new SelectionSet(select(DeployedEvent as any))
        );
      }

      case "DeploymentEnvironmentChangedEvent": {
        return new InlineFragment(
          new NamedType("DeploymentEnvironmentChangedEvent") as any,
          new SelectionSet(select(DeploymentEnvironmentChangedEvent as any))
        );
      }

      case "HeadRefDeletedEvent": {
        return new InlineFragment(
          new NamedType("HeadRefDeletedEvent") as any,
          new SelectionSet(select(HeadRefDeletedEvent as any))
        );
      }

      case "HeadRefForcePushedEvent": {
        return new InlineFragment(
          new NamedType("HeadRefForcePushedEvent") as any,
          new SelectionSet(select(HeadRefForcePushedEvent as any))
        );
      }

      case "HeadRefRestoredEvent": {
        return new InlineFragment(
          new NamedType("HeadRefRestoredEvent") as any,
          new SelectionSet(select(HeadRefRestoredEvent as any))
        );
      }

      case "IssueComment": {
        return new InlineFragment(
          new NamedType("IssueComment") as any,
          new SelectionSet(select(IssueComment as any))
        );
      }

      case "LabeledEvent": {
        return new InlineFragment(
          new NamedType("LabeledEvent") as any,
          new SelectionSet(select(LabeledEvent as any))
        );
      }

      case "LockedEvent": {
        return new InlineFragment(
          new NamedType("LockedEvent") as any,
          new SelectionSet(select(LockedEvent as any))
        );
      }

      case "MergedEvent": {
        return new InlineFragment(
          new NamedType("MergedEvent") as any,
          new SelectionSet(select(MergedEvent as any))
        );
      }

      case "MilestonedEvent": {
        return new InlineFragment(
          new NamedType("MilestonedEvent") as any,
          new SelectionSet(select(MilestonedEvent as any))
        );
      }

      case "PullRequestReview": {
        return new InlineFragment(
          new NamedType("PullRequestReview") as any,
          new SelectionSet(select(PullRequestReview as any))
        );
      }

      case "PullRequestReviewComment": {
        return new InlineFragment(
          new NamedType("PullRequestReviewComment") as any,
          new SelectionSet(select(PullRequestReviewComment as any))
        );
      }

      case "PullRequestReviewThread": {
        return new InlineFragment(
          new NamedType("PullRequestReviewThread") as any,
          new SelectionSet(select(PullRequestReviewThread as any))
        );
      }

      case "ReferencedEvent": {
        return new InlineFragment(
          new NamedType("ReferencedEvent") as any,
          new SelectionSet(select(ReferencedEvent as any))
        );
      }

      case "RenamedTitleEvent": {
        return new InlineFragment(
          new NamedType("RenamedTitleEvent") as any,
          new SelectionSet(select(RenamedTitleEvent as any))
        );
      }

      case "ReopenedEvent": {
        return new InlineFragment(
          new NamedType("ReopenedEvent") as any,
          new SelectionSet(select(ReopenedEvent as any))
        );
      }

      case "ReviewDismissedEvent": {
        return new InlineFragment(
          new NamedType("ReviewDismissedEvent") as any,
          new SelectionSet(select(ReviewDismissedEvent as any))
        );
      }

      case "ReviewRequestRemovedEvent": {
        return new InlineFragment(
          new NamedType("ReviewRequestRemovedEvent") as any,
          new SelectionSet(select(ReviewRequestRemovedEvent as any))
        );
      }

      case "ReviewRequestedEvent": {
        return new InlineFragment(
          new NamedType("ReviewRequestedEvent") as any,
          new SelectionSet(select(ReviewRequestedEvent as any))
        );
      }

      case "SubscribedEvent": {
        return new InlineFragment(
          new NamedType("SubscribedEvent") as any,
          new SelectionSet(select(SubscribedEvent as any))
        );
      }

      case "UnassignedEvent": {
        return new InlineFragment(
          new NamedType("UnassignedEvent") as any,
          new SelectionSet(select(UnassignedEvent as any))
        );
      }

      case "UnlabeledEvent": {
        return new InlineFragment(
          new NamedType("UnlabeledEvent") as any,
          new SelectionSet(select(UnlabeledEvent as any))
        );
      }

      case "UnlockedEvent": {
        return new InlineFragment(
          new NamedType("UnlockedEvent") as any,
          new SelectionSet(select(UnlockedEvent as any))
        );
      }

      case "UnsubscribedEvent": {
        return new InlineFragment(
          new NamedType("UnsubscribedEvent") as any,
          new SelectionSet(select(UnsubscribedEvent as any))
        );
      }

      case "UserBlockedEvent": {
        return new InlineFragment(
          new NamedType("UserBlockedEvent") as any,
          new SelectionSet(select(UserBlockedEvent as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IPullRequestTimelineItems =
  | IAddedToProjectEvent
  | IAssignedEvent
  | IAutomaticBaseChangeFailedEvent
  | IAutomaticBaseChangeSucceededEvent
  | IBaseRefChangedEvent
  | IBaseRefDeletedEvent
  | IBaseRefForcePushedEvent
  | IClosedEvent
  | ICommentDeletedEvent
  | IConnectedEvent
  | IConvertToDraftEvent
  | IConvertedNoteToIssueEvent
  | ICrossReferencedEvent
  | IDemilestonedEvent
  | IDeployedEvent
  | IDeploymentEnvironmentChangedEvent
  | IDisconnectedEvent
  | IHeadRefDeletedEvent
  | IHeadRefForcePushedEvent
  | IHeadRefRestoredEvent
  | IIssueComment
  | ILabeledEvent
  | ILockedEvent
  | IMarkedAsDuplicateEvent
  | IMentionedEvent
  | IMergedEvent
  | IMilestonedEvent
  | IMovedColumnsInProjectEvent
  | IPinnedEvent
  | IPullRequestCommit
  | IPullRequestCommitCommentThread
  | IPullRequestReview
  | IPullRequestReviewThread
  | IPullRequestRevisionMarker
  | IReadyForReviewEvent
  | IReferencedEvent
  | IRemovedFromProjectEvent
  | IRenamedTitleEvent
  | IReopenedEvent
  | IReviewDismissedEvent
  | IReviewRequestRemovedEvent
  | IReviewRequestedEvent
  | ISubscribedEvent
  | ITransferredEvent
  | IUnassignedEvent
  | IUnlabeledEvent
  | IUnlockedEvent
  | IUnmarkedAsDuplicateEvent
  | IUnpinnedEvent
  | IUnsubscribedEvent
  | IUserBlockedEvent;

interface PullRequestTimelineItemsSelector {
  __typename: () => Field<"__typename">;

  on: <
    T extends Array<Selection>,
    F extends
      | "AddedToProjectEvent"
      | "AssignedEvent"
      | "AutomaticBaseChangeFailedEvent"
      | "AutomaticBaseChangeSucceededEvent"
      | "BaseRefChangedEvent"
      | "BaseRefDeletedEvent"
      | "BaseRefForcePushedEvent"
      | "ClosedEvent"
      | "CommentDeletedEvent"
      | "ConnectedEvent"
      | "ConvertToDraftEvent"
      | "ConvertedNoteToIssueEvent"
      | "CrossReferencedEvent"
      | "DemilestonedEvent"
      | "DeployedEvent"
      | "DeploymentEnvironmentChangedEvent"
      | "DisconnectedEvent"
      | "HeadRefDeletedEvent"
      | "HeadRefForcePushedEvent"
      | "HeadRefRestoredEvent"
      | "IssueComment"
      | "LabeledEvent"
      | "LockedEvent"
      | "MarkedAsDuplicateEvent"
      | "MentionedEvent"
      | "MergedEvent"
      | "MilestonedEvent"
      | "MovedColumnsInProjectEvent"
      | "PinnedEvent"
      | "PullRequestCommit"
      | "PullRequestCommitCommentThread"
      | "PullRequestReview"
      | "PullRequestReviewThread"
      | "PullRequestRevisionMarker"
      | "ReadyForReviewEvent"
      | "ReferencedEvent"
      | "RemovedFromProjectEvent"
      | "RenamedTitleEvent"
      | "ReopenedEvent"
      | "ReviewDismissedEvent"
      | "ReviewRequestRemovedEvent"
      | "ReviewRequestedEvent"
      | "SubscribedEvent"
      | "TransferredEvent"
      | "UnassignedEvent"
      | "UnlabeledEvent"
      | "UnlockedEvent"
      | "UnmarkedAsDuplicateEvent"
      | "UnpinnedEvent"
      | "UnsubscribedEvent"
      | "UserBlockedEvent"
  >(
    type: F,
    select: (
      t: F extends "AddedToProjectEvent"
        ? AddedToProjectEventSelector
        : F extends "AssignedEvent"
        ? AssignedEventSelector
        : F extends "AutomaticBaseChangeFailedEvent"
        ? AutomaticBaseChangeFailedEventSelector
        : F extends "AutomaticBaseChangeSucceededEvent"
        ? AutomaticBaseChangeSucceededEventSelector
        : F extends "BaseRefChangedEvent"
        ? BaseRefChangedEventSelector
        : F extends "BaseRefDeletedEvent"
        ? BaseRefDeletedEventSelector
        : F extends "BaseRefForcePushedEvent"
        ? BaseRefForcePushedEventSelector
        : F extends "ClosedEvent"
        ? ClosedEventSelector
        : F extends "CommentDeletedEvent"
        ? CommentDeletedEventSelector
        : F extends "ConnectedEvent"
        ? ConnectedEventSelector
        : F extends "ConvertToDraftEvent"
        ? ConvertToDraftEventSelector
        : F extends "ConvertedNoteToIssueEvent"
        ? ConvertedNoteToIssueEventSelector
        : F extends "CrossReferencedEvent"
        ? CrossReferencedEventSelector
        : F extends "DemilestonedEvent"
        ? DemilestonedEventSelector
        : F extends "DeployedEvent"
        ? DeployedEventSelector
        : F extends "DeploymentEnvironmentChangedEvent"
        ? DeploymentEnvironmentChangedEventSelector
        : F extends "DisconnectedEvent"
        ? DisconnectedEventSelector
        : F extends "HeadRefDeletedEvent"
        ? HeadRefDeletedEventSelector
        : F extends "HeadRefForcePushedEvent"
        ? HeadRefForcePushedEventSelector
        : F extends "HeadRefRestoredEvent"
        ? HeadRefRestoredEventSelector
        : F extends "IssueComment"
        ? IssueCommentSelector
        : F extends "LabeledEvent"
        ? LabeledEventSelector
        : F extends "LockedEvent"
        ? LockedEventSelector
        : F extends "MarkedAsDuplicateEvent"
        ? MarkedAsDuplicateEventSelector
        : F extends "MentionedEvent"
        ? MentionedEventSelector
        : F extends "MergedEvent"
        ? MergedEventSelector
        : F extends "MilestonedEvent"
        ? MilestonedEventSelector
        : F extends "MovedColumnsInProjectEvent"
        ? MovedColumnsInProjectEventSelector
        : F extends "PinnedEvent"
        ? PinnedEventSelector
        : F extends "PullRequestCommit"
        ? PullRequestCommitSelector
        : F extends "PullRequestCommitCommentThread"
        ? PullRequestCommitCommentThreadSelector
        : F extends "PullRequestReview"
        ? PullRequestReviewSelector
        : F extends "PullRequestReviewThread"
        ? PullRequestReviewThreadSelector
        : F extends "PullRequestRevisionMarker"
        ? PullRequestRevisionMarkerSelector
        : F extends "ReadyForReviewEvent"
        ? ReadyForReviewEventSelector
        : F extends "ReferencedEvent"
        ? ReferencedEventSelector
        : F extends "RemovedFromProjectEvent"
        ? RemovedFromProjectEventSelector
        : F extends "RenamedTitleEvent"
        ? RenamedTitleEventSelector
        : F extends "ReopenedEvent"
        ? ReopenedEventSelector
        : F extends "ReviewDismissedEvent"
        ? ReviewDismissedEventSelector
        : F extends "ReviewRequestRemovedEvent"
        ? ReviewRequestRemovedEventSelector
        : F extends "ReviewRequestedEvent"
        ? ReviewRequestedEventSelector
        : F extends "SubscribedEvent"
        ? SubscribedEventSelector
        : F extends "TransferredEvent"
        ? TransferredEventSelector
        : F extends "UnassignedEvent"
        ? UnassignedEventSelector
        : F extends "UnlabeledEvent"
        ? UnlabeledEventSelector
        : F extends "UnlockedEvent"
        ? UnlockedEventSelector
        : F extends "UnmarkedAsDuplicateEvent"
        ? UnmarkedAsDuplicateEventSelector
        : F extends "UnpinnedEvent"
        ? UnpinnedEventSelector
        : F extends "UnsubscribedEvent"
        ? UnsubscribedEventSelector
        : F extends "UserBlockedEvent"
        ? UserBlockedEventSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const PullRequestTimelineItems: PullRequestTimelineItemsSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "AddedToProjectEvent": {
        return new InlineFragment(
          new NamedType("AddedToProjectEvent") as any,
          new SelectionSet(select(AddedToProjectEvent as any))
        );
      }

      case "AssignedEvent": {
        return new InlineFragment(
          new NamedType("AssignedEvent") as any,
          new SelectionSet(select(AssignedEvent as any))
        );
      }

      case "AutomaticBaseChangeFailedEvent": {
        return new InlineFragment(
          new NamedType("AutomaticBaseChangeFailedEvent") as any,
          new SelectionSet(select(AutomaticBaseChangeFailedEvent as any))
        );
      }

      case "AutomaticBaseChangeSucceededEvent": {
        return new InlineFragment(
          new NamedType("AutomaticBaseChangeSucceededEvent") as any,
          new SelectionSet(select(AutomaticBaseChangeSucceededEvent as any))
        );
      }

      case "BaseRefChangedEvent": {
        return new InlineFragment(
          new NamedType("BaseRefChangedEvent") as any,
          new SelectionSet(select(BaseRefChangedEvent as any))
        );
      }

      case "BaseRefDeletedEvent": {
        return new InlineFragment(
          new NamedType("BaseRefDeletedEvent") as any,
          new SelectionSet(select(BaseRefDeletedEvent as any))
        );
      }

      case "BaseRefForcePushedEvent": {
        return new InlineFragment(
          new NamedType("BaseRefForcePushedEvent") as any,
          new SelectionSet(select(BaseRefForcePushedEvent as any))
        );
      }

      case "ClosedEvent": {
        return new InlineFragment(
          new NamedType("ClosedEvent") as any,
          new SelectionSet(select(ClosedEvent as any))
        );
      }

      case "CommentDeletedEvent": {
        return new InlineFragment(
          new NamedType("CommentDeletedEvent") as any,
          new SelectionSet(select(CommentDeletedEvent as any))
        );
      }

      case "ConnectedEvent": {
        return new InlineFragment(
          new NamedType("ConnectedEvent") as any,
          new SelectionSet(select(ConnectedEvent as any))
        );
      }

      case "ConvertToDraftEvent": {
        return new InlineFragment(
          new NamedType("ConvertToDraftEvent") as any,
          new SelectionSet(select(ConvertToDraftEvent as any))
        );
      }

      case "ConvertedNoteToIssueEvent": {
        return new InlineFragment(
          new NamedType("ConvertedNoteToIssueEvent") as any,
          new SelectionSet(select(ConvertedNoteToIssueEvent as any))
        );
      }

      case "CrossReferencedEvent": {
        return new InlineFragment(
          new NamedType("CrossReferencedEvent") as any,
          new SelectionSet(select(CrossReferencedEvent as any))
        );
      }

      case "DemilestonedEvent": {
        return new InlineFragment(
          new NamedType("DemilestonedEvent") as any,
          new SelectionSet(select(DemilestonedEvent as any))
        );
      }

      case "DeployedEvent": {
        return new InlineFragment(
          new NamedType("DeployedEvent") as any,
          new SelectionSet(select(DeployedEvent as any))
        );
      }

      case "DeploymentEnvironmentChangedEvent": {
        return new InlineFragment(
          new NamedType("DeploymentEnvironmentChangedEvent") as any,
          new SelectionSet(select(DeploymentEnvironmentChangedEvent as any))
        );
      }

      case "DisconnectedEvent": {
        return new InlineFragment(
          new NamedType("DisconnectedEvent") as any,
          new SelectionSet(select(DisconnectedEvent as any))
        );
      }

      case "HeadRefDeletedEvent": {
        return new InlineFragment(
          new NamedType("HeadRefDeletedEvent") as any,
          new SelectionSet(select(HeadRefDeletedEvent as any))
        );
      }

      case "HeadRefForcePushedEvent": {
        return new InlineFragment(
          new NamedType("HeadRefForcePushedEvent") as any,
          new SelectionSet(select(HeadRefForcePushedEvent as any))
        );
      }

      case "HeadRefRestoredEvent": {
        return new InlineFragment(
          new NamedType("HeadRefRestoredEvent") as any,
          new SelectionSet(select(HeadRefRestoredEvent as any))
        );
      }

      case "IssueComment": {
        return new InlineFragment(
          new NamedType("IssueComment") as any,
          new SelectionSet(select(IssueComment as any))
        );
      }

      case "LabeledEvent": {
        return new InlineFragment(
          new NamedType("LabeledEvent") as any,
          new SelectionSet(select(LabeledEvent as any))
        );
      }

      case "LockedEvent": {
        return new InlineFragment(
          new NamedType("LockedEvent") as any,
          new SelectionSet(select(LockedEvent as any))
        );
      }

      case "MarkedAsDuplicateEvent": {
        return new InlineFragment(
          new NamedType("MarkedAsDuplicateEvent") as any,
          new SelectionSet(select(MarkedAsDuplicateEvent as any))
        );
      }

      case "MentionedEvent": {
        return new InlineFragment(
          new NamedType("MentionedEvent") as any,
          new SelectionSet(select(MentionedEvent as any))
        );
      }

      case "MergedEvent": {
        return new InlineFragment(
          new NamedType("MergedEvent") as any,
          new SelectionSet(select(MergedEvent as any))
        );
      }

      case "MilestonedEvent": {
        return new InlineFragment(
          new NamedType("MilestonedEvent") as any,
          new SelectionSet(select(MilestonedEvent as any))
        );
      }

      case "MovedColumnsInProjectEvent": {
        return new InlineFragment(
          new NamedType("MovedColumnsInProjectEvent") as any,
          new SelectionSet(select(MovedColumnsInProjectEvent as any))
        );
      }

      case "PinnedEvent": {
        return new InlineFragment(
          new NamedType("PinnedEvent") as any,
          new SelectionSet(select(PinnedEvent as any))
        );
      }

      case "PullRequestCommit": {
        return new InlineFragment(
          new NamedType("PullRequestCommit") as any,
          new SelectionSet(select(PullRequestCommit as any))
        );
      }

      case "PullRequestCommitCommentThread": {
        return new InlineFragment(
          new NamedType("PullRequestCommitCommentThread") as any,
          new SelectionSet(select(PullRequestCommitCommentThread as any))
        );
      }

      case "PullRequestReview": {
        return new InlineFragment(
          new NamedType("PullRequestReview") as any,
          new SelectionSet(select(PullRequestReview as any))
        );
      }

      case "PullRequestReviewThread": {
        return new InlineFragment(
          new NamedType("PullRequestReviewThread") as any,
          new SelectionSet(select(PullRequestReviewThread as any))
        );
      }

      case "PullRequestRevisionMarker": {
        return new InlineFragment(
          new NamedType("PullRequestRevisionMarker") as any,
          new SelectionSet(select(PullRequestRevisionMarker as any))
        );
      }

      case "ReadyForReviewEvent": {
        return new InlineFragment(
          new NamedType("ReadyForReviewEvent") as any,
          new SelectionSet(select(ReadyForReviewEvent as any))
        );
      }

      case "ReferencedEvent": {
        return new InlineFragment(
          new NamedType("ReferencedEvent") as any,
          new SelectionSet(select(ReferencedEvent as any))
        );
      }

      case "RemovedFromProjectEvent": {
        return new InlineFragment(
          new NamedType("RemovedFromProjectEvent") as any,
          new SelectionSet(select(RemovedFromProjectEvent as any))
        );
      }

      case "RenamedTitleEvent": {
        return new InlineFragment(
          new NamedType("RenamedTitleEvent") as any,
          new SelectionSet(select(RenamedTitleEvent as any))
        );
      }

      case "ReopenedEvent": {
        return new InlineFragment(
          new NamedType("ReopenedEvent") as any,
          new SelectionSet(select(ReopenedEvent as any))
        );
      }

      case "ReviewDismissedEvent": {
        return new InlineFragment(
          new NamedType("ReviewDismissedEvent") as any,
          new SelectionSet(select(ReviewDismissedEvent as any))
        );
      }

      case "ReviewRequestRemovedEvent": {
        return new InlineFragment(
          new NamedType("ReviewRequestRemovedEvent") as any,
          new SelectionSet(select(ReviewRequestRemovedEvent as any))
        );
      }

      case "ReviewRequestedEvent": {
        return new InlineFragment(
          new NamedType("ReviewRequestedEvent") as any,
          new SelectionSet(select(ReviewRequestedEvent as any))
        );
      }

      case "SubscribedEvent": {
        return new InlineFragment(
          new NamedType("SubscribedEvent") as any,
          new SelectionSet(select(SubscribedEvent as any))
        );
      }

      case "TransferredEvent": {
        return new InlineFragment(
          new NamedType("TransferredEvent") as any,
          new SelectionSet(select(TransferredEvent as any))
        );
      }

      case "UnassignedEvent": {
        return new InlineFragment(
          new NamedType("UnassignedEvent") as any,
          new SelectionSet(select(UnassignedEvent as any))
        );
      }

      case "UnlabeledEvent": {
        return new InlineFragment(
          new NamedType("UnlabeledEvent") as any,
          new SelectionSet(select(UnlabeledEvent as any))
        );
      }

      case "UnlockedEvent": {
        return new InlineFragment(
          new NamedType("UnlockedEvent") as any,
          new SelectionSet(select(UnlockedEvent as any))
        );
      }

      case "UnmarkedAsDuplicateEvent": {
        return new InlineFragment(
          new NamedType("UnmarkedAsDuplicateEvent") as any,
          new SelectionSet(select(UnmarkedAsDuplicateEvent as any))
        );
      }

      case "UnpinnedEvent": {
        return new InlineFragment(
          new NamedType("UnpinnedEvent") as any,
          new SelectionSet(select(UnpinnedEvent as any))
        );
      }

      case "UnsubscribedEvent": {
        return new InlineFragment(
          new NamedType("UnsubscribedEvent") as any,
          new SelectionSet(select(UnsubscribedEvent as any))
        );
      }

      case "UserBlockedEvent": {
        return new InlineFragment(
          new NamedType("UserBlockedEvent") as any,
          new SelectionSet(select(UserBlockedEvent as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IPushAllowanceActor = IApp | ITeam | IUser;

interface PushAllowanceActorSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "App" | "Team" | "User">(
    type: F,
    select: (
      t: F extends "App"
        ? AppSelector
        : F extends "Team"
        ? TeamSelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const PushAllowanceActor: PushAllowanceActorSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "App": {
        return new InlineFragment(
          new NamedType("App") as any,
          new SelectionSet(select(App as any))
        );
      }

      case "Team": {
        return new InlineFragment(
          new NamedType("Team") as any,
          new SelectionSet(select(Team as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IReferencedSubject = IIssue | IPullRequest;

interface ReferencedSubjectSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "Issue" | "PullRequest">(
    type: F,
    select: (
      t: F extends "Issue"
        ? IssueSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const ReferencedSubject: ReferencedSubjectSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IRenamedTitleSubject = IIssue | IPullRequest;

interface RenamedTitleSubjectSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "Issue" | "PullRequest">(
    type: F,
    select: (
      t: F extends "Issue"
        ? IssueSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const RenamedTitleSubject: RenamedTitleSubjectSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IRequestedReviewer = IMannequin | ITeam | IUser;

interface RequestedReviewerSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "Mannequin" | "Team" | "User">(
    type: F,
    select: (
      t: F extends "Mannequin"
        ? MannequinSelector
        : F extends "Team"
        ? TeamSelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const RequestedReviewer: RequestedReviewerSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "Mannequin": {
        return new InlineFragment(
          new NamedType("Mannequin") as any,
          new SelectionSet(select(Mannequin as any))
        );
      }

      case "Team": {
        return new InlineFragment(
          new NamedType("Team") as any,
          new SelectionSet(select(Team as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IReviewDismissalAllowanceActor = ITeam | IUser;

interface ReviewDismissalAllowanceActorSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "Team" | "User">(
    type: F,
    select: (
      t: F extends "Team"
        ? TeamSelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const ReviewDismissalAllowanceActor: ReviewDismissalAllowanceActorSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "Team": {
        return new InlineFragment(
          new NamedType("Team") as any,
          new SelectionSet(select(Team as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type ISearchResultItem =
  | IApp
  | IIssue
  | IMarketplaceListing
  | IOrganization
  | IPullRequest
  | IRepository
  | IUser;

interface SearchResultItemSelector {
  __typename: () => Field<"__typename">;

  on: <
    T extends Array<Selection>,
    F extends
      | "App"
      | "Issue"
      | "MarketplaceListing"
      | "Organization"
      | "PullRequest"
      | "Repository"
      | "User"
  >(
    type: F,
    select: (
      t: F extends "App"
        ? AppSelector
        : F extends "Issue"
        ? IssueSelector
        : F extends "MarketplaceListing"
        ? MarketplaceListingSelector
        : F extends "Organization"
        ? OrganizationSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : F extends "Repository"
        ? RepositorySelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const SearchResultItem: SearchResultItemSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "App": {
        return new InlineFragment(
          new NamedType("App") as any,
          new SelectionSet(select(App as any))
        );
      }

      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "MarketplaceListing": {
        return new InlineFragment(
          new NamedType("MarketplaceListing") as any,
          new SelectionSet(select(MarketplaceListing as any))
        );
      }

      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      case "Repository": {
        return new InlineFragment(
          new NamedType("Repository") as any,
          new SelectionSet(select(Repository as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type ISponsor = IOrganization | IUser;

interface SponsorSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "Organization" | "User">(
    type: F,
    select: (
      t: F extends "Organization"
        ? OrganizationSelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Sponsor: SponsorSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

type IStatusCheckRollupContext = ICheckRun | IStatusContext;

interface StatusCheckRollupContextSelector {
  __typename: () => Field<"__typename">;

  on: <T extends Array<Selection>, F extends "CheckRun" | "StatusContext">(
    type: F,
    select: (
      t: F extends "CheckRun"
        ? CheckRunSelector
        : F extends "StatusContext"
        ? StatusContextSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const StatusCheckRollupContext: StatusCheckRollupContextSelector = {
  __typename: () => new Field("__typename"),

  on: (type, select) => {
    switch (type) {
      case "CheckRun": {
        return new InlineFragment(
          new NamedType("CheckRun") as any,
          new SelectionSet(select(CheckRun as any))
        );
      }

      case "StatusContext": {
        return new InlineFragment(
          new NamedType("StatusContext") as any,
          new SelectionSet(select(StatusContext as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IAcceptEnterpriseAdministratorInvitationPayload {
  clientMutationId: string;
  invitation: IEnterpriseAdministratorInvitation;
  message: string;
}

interface AcceptEnterpriseAdministratorInvitationPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  invitation: <T extends Array<Selection>>(
    select: (t: EnterpriseAdministratorInvitationSelector) => T
  ) => Field<"invitation", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const AcceptEnterpriseAdministratorInvitationPayload: AcceptEnterpriseAdministratorInvitationPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  invitation: (select) =>
    new Field(
      "invitation",
      undefined as never,
      new SelectionSet(select(EnterpriseAdministratorInvitation))
    ),

  message: () => new Field("message"),
};

export interface IAcceptTopicSuggestionPayload {
  clientMutationId: string;
  topic: ITopic;
}

interface AcceptTopicSuggestionPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  topic: <T extends Array<Selection>>(
    select: (t: TopicSelector) => T
  ) => Field<"topic", never, SelectionSet<T>>;
}

export const AcceptTopicSuggestionPayload: AcceptTopicSuggestionPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  topic: (select) =>
    new Field("topic", undefined as never, new SelectionSet(select(Topic))),
};

export interface IActor {
  __typename: string;
  avatarUrl: unknown;
  login: string;
  resourcePath: unknown;
  url: unknown;
}

interface ActorSelector {
  __typename: () => Field<"__typename">;

  avatarUrl: (variables: {
    size: unknown;
  }) => Field<"avatarUrl", [/* @todo */]>;

  login: () => Field<"login">;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;

  on: <
    T extends Array<Selection>,
    F extends
      | "Bot"
      | "EnterpriseUserAccount"
      | "Mannequin"
      | "Organization"
      | "User"
  >(
    type: F,
    select: (
      t: F extends "Bot"
        ? BotSelector
        : F extends "EnterpriseUserAccount"
        ? EnterpriseUserAccountSelector
        : F extends "Mannequin"
        ? MannequinSelector
        : F extends "Organization"
        ? OrganizationSelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Actor: ActorSelector = {
  __typename: () => new Field("__typename"),

  avatarUrl: (variables) => new Field("avatarUrl"),
  login: () => new Field("login"),
  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),

  on: (type, select) => {
    switch (type) {
      case "Bot": {
        return new InlineFragment(
          new NamedType("Bot") as any,
          new SelectionSet(select(Bot as any))
        );
      }

      case "EnterpriseUserAccount": {
        return new InlineFragment(
          new NamedType("EnterpriseUserAccount") as any,
          new SelectionSet(select(EnterpriseUserAccount as any))
        );
      }

      case "Mannequin": {
        return new InlineFragment(
          new NamedType("Mannequin") as any,
          new SelectionSet(select(Mannequin as any))
        );
      }

      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IActorLocation {
  city: string;
  country: string;
  countryCode: string;
  region: string;
  regionCode: string;
}

interface ActorLocationSelector {
  __typename: () => Field<"__typename">;

  city: () => Field<"city">;

  country: () => Field<"country">;

  countryCode: () => Field<"countryCode">;

  region: () => Field<"region">;

  regionCode: () => Field<"regionCode">;
}

export const ActorLocation: ActorLocationSelector = {
  __typename: () => new Field("__typename"),

  city: () => new Field("city"),
  country: () => new Field("country"),
  countryCode: () => new Field("countryCode"),
  region: () => new Field("region"),
  regionCode: () => new Field("regionCode"),
};

export interface IAddAssigneesToAssignablePayload {
  assignable: IAssignable;
  clientMutationId: string;
}

interface AddAssigneesToAssignablePayloadSelector {
  __typename: () => Field<"__typename">;

  assignable: <T extends Array<Selection>>(
    select: (t: AssignableSelector) => T
  ) => Field<"assignable", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;
}

export const AddAssigneesToAssignablePayload: AddAssigneesToAssignablePayloadSelector = {
  __typename: () => new Field("__typename"),

  assignable: (select) =>
    new Field(
      "assignable",
      undefined as never,
      new SelectionSet(select(Assignable))
    ),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface IAddCommentPayload {
  clientMutationId: string;
  commentEdge: IIssueCommentEdge;
  subject: INode;
  timelineEdge: IIssueTimelineItemEdge;
}

interface AddCommentPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  commentEdge: <T extends Array<Selection>>(
    select: (t: IssueCommentEdgeSelector) => T
  ) => Field<"commentEdge", never, SelectionSet<T>>;

  subject: <T extends Array<Selection>>(
    select: (t: NodeSelector) => T
  ) => Field<"subject", never, SelectionSet<T>>;

  timelineEdge: <T extends Array<Selection>>(
    select: (t: IssueTimelineItemEdgeSelector) => T
  ) => Field<"timelineEdge", never, SelectionSet<T>>;
}

export const AddCommentPayload: AddCommentPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  commentEdge: (select) =>
    new Field(
      "commentEdge",
      undefined as never,
      new SelectionSet(select(IssueCommentEdge))
    ),

  subject: (select) =>
    new Field("subject", undefined as never, new SelectionSet(select(Node))),

  timelineEdge: (select) =>
    new Field(
      "timelineEdge",
      undefined as never,
      new SelectionSet(select(IssueTimelineItemEdge))
    ),
};

export interface IAddLabelsToLabelablePayload {
  clientMutationId: string;
  labelable: ILabelable;
}

interface AddLabelsToLabelablePayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  labelable: <T extends Array<Selection>>(
    select: (t: LabelableSelector) => T
  ) => Field<"labelable", never, SelectionSet<T>>;
}

export const AddLabelsToLabelablePayload: AddLabelsToLabelablePayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  labelable: (select) =>
    new Field(
      "labelable",
      undefined as never,
      new SelectionSet(select(Labelable))
    ),
};

export interface IAddProjectCardPayload {
  cardEdge: IProjectCardEdge;
  clientMutationId: string;
  projectColumn: IProjectColumn;
}

interface AddProjectCardPayloadSelector {
  __typename: () => Field<"__typename">;

  cardEdge: <T extends Array<Selection>>(
    select: (t: ProjectCardEdgeSelector) => T
  ) => Field<"cardEdge", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;

  projectColumn: <T extends Array<Selection>>(
    select: (t: ProjectColumnSelector) => T
  ) => Field<"projectColumn", never, SelectionSet<T>>;
}

export const AddProjectCardPayload: AddProjectCardPayloadSelector = {
  __typename: () => new Field("__typename"),

  cardEdge: (select) =>
    new Field(
      "cardEdge",
      undefined as never,
      new SelectionSet(select(ProjectCardEdge))
    ),

  clientMutationId: () => new Field("clientMutationId"),

  projectColumn: (select) =>
    new Field(
      "projectColumn",
      undefined as never,
      new SelectionSet(select(ProjectColumn))
    ),
};

export interface IAddProjectColumnPayload {
  clientMutationId: string;
  columnEdge: IProjectColumnEdge;
  project: IProject;
}

interface AddProjectColumnPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  columnEdge: <T extends Array<Selection>>(
    select: (t: ProjectColumnEdgeSelector) => T
  ) => Field<"columnEdge", never, SelectionSet<T>>;

  project: <T extends Array<Selection>>(
    select: (t: ProjectSelector) => T
  ) => Field<"project", never, SelectionSet<T>>;
}

export const AddProjectColumnPayload: AddProjectColumnPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  columnEdge: (select) =>
    new Field(
      "columnEdge",
      undefined as never,
      new SelectionSet(select(ProjectColumnEdge))
    ),

  project: (select) =>
    new Field("project", undefined as never, new SelectionSet(select(Project))),
};

export interface IAddPullRequestReviewCommentPayload {
  clientMutationId: string;
  comment: IPullRequestReviewComment;
  commentEdge: IPullRequestReviewCommentEdge;
}

interface AddPullRequestReviewCommentPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  comment: <T extends Array<Selection>>(
    select: (t: PullRequestReviewCommentSelector) => T
  ) => Field<"comment", never, SelectionSet<T>>;

  commentEdge: <T extends Array<Selection>>(
    select: (t: PullRequestReviewCommentEdgeSelector) => T
  ) => Field<"commentEdge", never, SelectionSet<T>>;
}

export const AddPullRequestReviewCommentPayload: AddPullRequestReviewCommentPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  comment: (select) =>
    new Field(
      "comment",
      undefined as never,
      new SelectionSet(select(PullRequestReviewComment))
    ),

  commentEdge: (select) =>
    new Field(
      "commentEdge",
      undefined as never,
      new SelectionSet(select(PullRequestReviewCommentEdge))
    ),
};

export interface IAddPullRequestReviewPayload {
  clientMutationId: string;
  pullRequestReview: IPullRequestReview;
  reviewEdge: IPullRequestReviewEdge;
}

interface AddPullRequestReviewPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequestReview: <T extends Array<Selection>>(
    select: (t: PullRequestReviewSelector) => T
  ) => Field<"pullRequestReview", never, SelectionSet<T>>;

  reviewEdge: <T extends Array<Selection>>(
    select: (t: PullRequestReviewEdgeSelector) => T
  ) => Field<"reviewEdge", never, SelectionSet<T>>;
}

export const AddPullRequestReviewPayload: AddPullRequestReviewPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequestReview: (select) =>
    new Field(
      "pullRequestReview",
      undefined as never,
      new SelectionSet(select(PullRequestReview))
    ),

  reviewEdge: (select) =>
    new Field(
      "reviewEdge",
      undefined as never,
      new SelectionSet(select(PullRequestReviewEdge))
    ),
};

export interface IAddPullRequestReviewThreadPayload {
  clientMutationId: string;
  thread: IPullRequestReviewThread;
}

interface AddPullRequestReviewThreadPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  thread: <T extends Array<Selection>>(
    select: (t: PullRequestReviewThreadSelector) => T
  ) => Field<"thread", never, SelectionSet<T>>;
}

export const AddPullRequestReviewThreadPayload: AddPullRequestReviewThreadPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  thread: (select) =>
    new Field(
      "thread",
      undefined as never,
      new SelectionSet(select(PullRequestReviewThread))
    ),
};

export interface IAddReactionPayload {
  clientMutationId: string;
  reaction: IReaction;
  subject: IReactable;
}

interface AddReactionPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  reaction: <T extends Array<Selection>>(
    select: (t: ReactionSelector) => T
  ) => Field<"reaction", never, SelectionSet<T>>;

  subject: <T extends Array<Selection>>(
    select: (t: ReactableSelector) => T
  ) => Field<"subject", never, SelectionSet<T>>;
}

export const AddReactionPayload: AddReactionPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  reaction: (select) =>
    new Field(
      "reaction",
      undefined as never,
      new SelectionSet(select(Reaction))
    ),

  subject: (select) =>
    new Field(
      "subject",
      undefined as never,
      new SelectionSet(select(Reactable))
    ),
};

export interface IAddStarPayload {
  clientMutationId: string;
  starrable: IStarrable;
}

interface AddStarPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  starrable: <T extends Array<Selection>>(
    select: (t: StarrableSelector) => T
  ) => Field<"starrable", never, SelectionSet<T>>;
}

export const AddStarPayload: AddStarPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  starrable: (select) =>
    new Field(
      "starrable",
      undefined as never,
      new SelectionSet(select(Starrable))
    ),
};

export interface IAddedToProjectEvent extends INode {
  __typename: "AddedToProjectEvent";
  actor: IActor;
  createdAt: unknown;
  databaseId: number;
}

interface AddedToProjectEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;
}

export const isAddedToProjectEvent = (
  object: Record<string, any>
): object is Partial<IAddedToProjectEvent> => {
  return object.__typename === "AddedToProjectEvent";
};

export const AddedToProjectEvent: AddedToProjectEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),
};

export interface IApp extends INode {
  __typename: "App";
  createdAt: unknown;
  databaseId: number;
  description: string;
  logoBackgroundColor: string;
  logoUrl: unknown;
  name: string;
  slug: string;
  updatedAt: unknown;
  url: unknown;
}

interface AppSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  description: () => Field<"description">;

  id: () => Field<"id">;

  logoBackgroundColor: () => Field<"logoBackgroundColor">;

  logoUrl: (variables: { size: unknown }) => Field<"logoUrl", [/* @todo */]>;

  name: () => Field<"name">;

  slug: () => Field<"slug">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;
}

export const isApp = (object: Record<string, any>): object is Partial<IApp> => {
  return object.__typename === "App";
};

export const App: AppSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  description: () => new Field("description"),
  id: () => new Field("id"),
  logoBackgroundColor: () => new Field("logoBackgroundColor"),
  logoUrl: (variables) => new Field("logoUrl"),
  name: () => new Field("name"),
  slug: () => new Field("slug"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
};

export interface IArchiveRepositoryPayload {
  clientMutationId: string;
  repository: IRepository;
}

interface ArchiveRepositoryPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const ArchiveRepositoryPayload: ArchiveRepositoryPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface IAssignable {
  __typename: string;
  assignees: IUserConnection;
}

interface AssignableSelector {
  __typename: () => Field<"__typename">;

  assignees: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserConnectionSelector) => T
  ) => Field<
    "assignees",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  on: <T extends Array<Selection>, F extends "Issue" | "PullRequest">(
    type: F,
    select: (
      t: F extends "Issue"
        ? IssueSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Assignable: AssignableSelector = {
  __typename: () => new Field("__typename"),

  assignees: (variables, select) =>
    new Field(
      "assignees",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserConnection))
    ),

  on: (type, select) => {
    switch (type) {
      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IAssignedEvent extends INode {
  __typename: "AssignedEvent";
  actor: IActor;
  assignable: IAssignable;
  assignee: IAssignee;
  createdAt: unknown;
  user: IUser;
}

interface AssignedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  assignable: <T extends Array<Selection>>(
    select: (t: AssignableSelector) => T
  ) => Field<"assignable", never, SelectionSet<T>>;

  assignee: <T extends Array<Selection>>(
    select: (t: AssigneeSelector) => T
  ) => Field<"assignee", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  /**
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   */

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const isAssignedEvent = (
  object: Record<string, any>
): object is Partial<IAssignedEvent> => {
  return object.__typename === "AssignedEvent";
};

export const AssignedEvent: AssignedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  assignable: (select) =>
    new Field(
      "assignable",
      undefined as never,
      new SelectionSet(select(Assignable))
    ),

  assignee: (select) =>
    new Field(
      "assignee",
      undefined as never,
      new SelectionSet(select(Assignee))
    ),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  /**
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   */

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface IAuditEntry {
  __typename: string;
  action: string;
  actor: IAuditEntryActor;
  actorIp: string;
  actorLocation: IActorLocation;
  actorLogin: string;
  actorResourcePath: unknown;
  actorUrl: unknown;
  createdAt: unknown;
  operationType: OperationType;
  user: IUser;
  userLogin: string;
  userResourcePath: unknown;
  userUrl: unknown;
}

interface AuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  operationType: () => Field<"operationType">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;

  on: <
    T extends Array<Selection>,
    F extends
      | "MembersCanDeleteReposClearAuditEntry"
      | "MembersCanDeleteReposDisableAuditEntry"
      | "MembersCanDeleteReposEnableAuditEntry"
      | "OauthApplicationCreateAuditEntry"
      | "OrgAddBillingManagerAuditEntry"
      | "OrgAddMemberAuditEntry"
      | "OrgBlockUserAuditEntry"
      | "OrgConfigDisableCollaboratorsOnlyAuditEntry"
      | "OrgConfigEnableCollaboratorsOnlyAuditEntry"
      | "OrgCreateAuditEntry"
      | "OrgDisableOauthAppRestrictionsAuditEntry"
      | "OrgDisableSamlAuditEntry"
      | "OrgDisableTwoFactorRequirementAuditEntry"
      | "OrgEnableOauthAppRestrictionsAuditEntry"
      | "OrgEnableSamlAuditEntry"
      | "OrgEnableTwoFactorRequirementAuditEntry"
      | "OrgInviteMemberAuditEntry"
      | "OrgInviteToBusinessAuditEntry"
      | "OrgOauthAppAccessApprovedAuditEntry"
      | "OrgOauthAppAccessDeniedAuditEntry"
      | "OrgOauthAppAccessRequestedAuditEntry"
      | "OrgRemoveBillingManagerAuditEntry"
      | "OrgRemoveMemberAuditEntry"
      | "OrgRemoveOutsideCollaboratorAuditEntry"
      | "OrgRestoreMemberAuditEntry"
      | "OrgUnblockUserAuditEntry"
      | "OrgUpdateDefaultRepositoryPermissionAuditEntry"
      | "OrgUpdateMemberAuditEntry"
      | "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
      | "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
      | "PrivateRepositoryForkingDisableAuditEntry"
      | "PrivateRepositoryForkingEnableAuditEntry"
      | "RepoAccessAuditEntry"
      | "RepoAddMemberAuditEntry"
      | "RepoAddTopicAuditEntry"
      | "RepoArchivedAuditEntry"
      | "RepoChangeMergeSettingAuditEntry"
      | "RepoConfigDisableAnonymousGitAccessAuditEntry"
      | "RepoConfigDisableCollaboratorsOnlyAuditEntry"
      | "RepoConfigDisableContributorsOnlyAuditEntry"
      | "RepoConfigDisableSockpuppetDisallowedAuditEntry"
      | "RepoConfigEnableAnonymousGitAccessAuditEntry"
      | "RepoConfigEnableCollaboratorsOnlyAuditEntry"
      | "RepoConfigEnableContributorsOnlyAuditEntry"
      | "RepoConfigEnableSockpuppetDisallowedAuditEntry"
      | "RepoConfigLockAnonymousGitAccessAuditEntry"
      | "RepoConfigUnlockAnonymousGitAccessAuditEntry"
      | "RepoCreateAuditEntry"
      | "RepoDestroyAuditEntry"
      | "RepoRemoveMemberAuditEntry"
      | "RepoRemoveTopicAuditEntry"
      | "RepositoryVisibilityChangeDisableAuditEntry"
      | "RepositoryVisibilityChangeEnableAuditEntry"
      | "TeamAddMemberAuditEntry"
      | "TeamAddRepositoryAuditEntry"
      | "TeamChangeParentTeamAuditEntry"
      | "TeamRemoveMemberAuditEntry"
      | "TeamRemoveRepositoryAuditEntry"
  >(
    type: F,
    select: (
      t: F extends "MembersCanDeleteReposClearAuditEntry"
        ? MembersCanDeleteReposClearAuditEntrySelector
        : F extends "MembersCanDeleteReposDisableAuditEntry"
        ? MembersCanDeleteReposDisableAuditEntrySelector
        : F extends "MembersCanDeleteReposEnableAuditEntry"
        ? MembersCanDeleteReposEnableAuditEntrySelector
        : F extends "OauthApplicationCreateAuditEntry"
        ? OauthApplicationCreateAuditEntrySelector
        : F extends "OrgAddBillingManagerAuditEntry"
        ? OrgAddBillingManagerAuditEntrySelector
        : F extends "OrgAddMemberAuditEntry"
        ? OrgAddMemberAuditEntrySelector
        : F extends "OrgBlockUserAuditEntry"
        ? OrgBlockUserAuditEntrySelector
        : F extends "OrgConfigDisableCollaboratorsOnlyAuditEntry"
        ? OrgConfigDisableCollaboratorsOnlyAuditEntrySelector
        : F extends "OrgConfigEnableCollaboratorsOnlyAuditEntry"
        ? OrgConfigEnableCollaboratorsOnlyAuditEntrySelector
        : F extends "OrgCreateAuditEntry"
        ? OrgCreateAuditEntrySelector
        : F extends "OrgDisableOauthAppRestrictionsAuditEntry"
        ? OrgDisableOauthAppRestrictionsAuditEntrySelector
        : F extends "OrgDisableSamlAuditEntry"
        ? OrgDisableSamlAuditEntrySelector
        : F extends "OrgDisableTwoFactorRequirementAuditEntry"
        ? OrgDisableTwoFactorRequirementAuditEntrySelector
        : F extends "OrgEnableOauthAppRestrictionsAuditEntry"
        ? OrgEnableOauthAppRestrictionsAuditEntrySelector
        : F extends "OrgEnableSamlAuditEntry"
        ? OrgEnableSamlAuditEntrySelector
        : F extends "OrgEnableTwoFactorRequirementAuditEntry"
        ? OrgEnableTwoFactorRequirementAuditEntrySelector
        : F extends "OrgInviteMemberAuditEntry"
        ? OrgInviteMemberAuditEntrySelector
        : F extends "OrgInviteToBusinessAuditEntry"
        ? OrgInviteToBusinessAuditEntrySelector
        : F extends "OrgOauthAppAccessApprovedAuditEntry"
        ? OrgOauthAppAccessApprovedAuditEntrySelector
        : F extends "OrgOauthAppAccessDeniedAuditEntry"
        ? OrgOauthAppAccessDeniedAuditEntrySelector
        : F extends "OrgOauthAppAccessRequestedAuditEntry"
        ? OrgOauthAppAccessRequestedAuditEntrySelector
        : F extends "OrgRemoveBillingManagerAuditEntry"
        ? OrgRemoveBillingManagerAuditEntrySelector
        : F extends "OrgRemoveMemberAuditEntry"
        ? OrgRemoveMemberAuditEntrySelector
        : F extends "OrgRemoveOutsideCollaboratorAuditEntry"
        ? OrgRemoveOutsideCollaboratorAuditEntrySelector
        : F extends "OrgRestoreMemberAuditEntry"
        ? OrgRestoreMemberAuditEntrySelector
        : F extends "OrgUnblockUserAuditEntry"
        ? OrgUnblockUserAuditEntrySelector
        : F extends "OrgUpdateDefaultRepositoryPermissionAuditEntry"
        ? OrgUpdateDefaultRepositoryPermissionAuditEntrySelector
        : F extends "OrgUpdateMemberAuditEntry"
        ? OrgUpdateMemberAuditEntrySelector
        : F extends "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
        ? OrgUpdateMemberRepositoryCreationPermissionAuditEntrySelector
        : F extends "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
        ? OrgUpdateMemberRepositoryInvitationPermissionAuditEntrySelector
        : F extends "PrivateRepositoryForkingDisableAuditEntry"
        ? PrivateRepositoryForkingDisableAuditEntrySelector
        : F extends "PrivateRepositoryForkingEnableAuditEntry"
        ? PrivateRepositoryForkingEnableAuditEntrySelector
        : F extends "RepoAccessAuditEntry"
        ? RepoAccessAuditEntrySelector
        : F extends "RepoAddMemberAuditEntry"
        ? RepoAddMemberAuditEntrySelector
        : F extends "RepoAddTopicAuditEntry"
        ? RepoAddTopicAuditEntrySelector
        : F extends "RepoArchivedAuditEntry"
        ? RepoArchivedAuditEntrySelector
        : F extends "RepoChangeMergeSettingAuditEntry"
        ? RepoChangeMergeSettingAuditEntrySelector
        : F extends "RepoConfigDisableAnonymousGitAccessAuditEntry"
        ? RepoConfigDisableAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigDisableCollaboratorsOnlyAuditEntry"
        ? RepoConfigDisableCollaboratorsOnlyAuditEntrySelector
        : F extends "RepoConfigDisableContributorsOnlyAuditEntry"
        ? RepoConfigDisableContributorsOnlyAuditEntrySelector
        : F extends "RepoConfigDisableSockpuppetDisallowedAuditEntry"
        ? RepoConfigDisableSockpuppetDisallowedAuditEntrySelector
        : F extends "RepoConfigEnableAnonymousGitAccessAuditEntry"
        ? RepoConfigEnableAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigEnableCollaboratorsOnlyAuditEntry"
        ? RepoConfigEnableCollaboratorsOnlyAuditEntrySelector
        : F extends "RepoConfigEnableContributorsOnlyAuditEntry"
        ? RepoConfigEnableContributorsOnlyAuditEntrySelector
        : F extends "RepoConfigEnableSockpuppetDisallowedAuditEntry"
        ? RepoConfigEnableSockpuppetDisallowedAuditEntrySelector
        : F extends "RepoConfigLockAnonymousGitAccessAuditEntry"
        ? RepoConfigLockAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigUnlockAnonymousGitAccessAuditEntry"
        ? RepoConfigUnlockAnonymousGitAccessAuditEntrySelector
        : F extends "RepoCreateAuditEntry"
        ? RepoCreateAuditEntrySelector
        : F extends "RepoDestroyAuditEntry"
        ? RepoDestroyAuditEntrySelector
        : F extends "RepoRemoveMemberAuditEntry"
        ? RepoRemoveMemberAuditEntrySelector
        : F extends "RepoRemoveTopicAuditEntry"
        ? RepoRemoveTopicAuditEntrySelector
        : F extends "RepositoryVisibilityChangeDisableAuditEntry"
        ? RepositoryVisibilityChangeDisableAuditEntrySelector
        : F extends "RepositoryVisibilityChangeEnableAuditEntry"
        ? RepositoryVisibilityChangeEnableAuditEntrySelector
        : F extends "TeamAddMemberAuditEntry"
        ? TeamAddMemberAuditEntrySelector
        : F extends "TeamAddRepositoryAuditEntry"
        ? TeamAddRepositoryAuditEntrySelector
        : F extends "TeamChangeParentTeamAuditEntry"
        ? TeamChangeParentTeamAuditEntrySelector
        : F extends "TeamRemoveMemberAuditEntry"
        ? TeamRemoveMemberAuditEntrySelector
        : F extends "TeamRemoveRepositoryAuditEntry"
        ? TeamRemoveRepositoryAuditEntrySelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const AuditEntry: AuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  operationType: () => new Field("operationType"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),

  on: (type, select) => {
    switch (type) {
      case "MembersCanDeleteReposClearAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposClearAuditEntry") as any,
          new SelectionSet(select(MembersCanDeleteReposClearAuditEntry as any))
        );
      }

      case "MembersCanDeleteReposDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposDisableAuditEntry") as any,
          new SelectionSet(
            select(MembersCanDeleteReposDisableAuditEntry as any)
          )
        );
      }

      case "MembersCanDeleteReposEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposEnableAuditEntry") as any,
          new SelectionSet(select(MembersCanDeleteReposEnableAuditEntry as any))
        );
      }

      case "OauthApplicationCreateAuditEntry": {
        return new InlineFragment(
          new NamedType("OauthApplicationCreateAuditEntry") as any,
          new SelectionSet(select(OauthApplicationCreateAuditEntry as any))
        );
      }

      case "OrgAddBillingManagerAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgAddBillingManagerAuditEntry") as any,
          new SelectionSet(select(OrgAddBillingManagerAuditEntry as any))
        );
      }

      case "OrgAddMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgAddMemberAuditEntry") as any,
          new SelectionSet(select(OrgAddMemberAuditEntry as any))
        );
      }

      case "OrgBlockUserAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgBlockUserAuditEntry") as any,
          new SelectionSet(select(OrgBlockUserAuditEntry as any))
        );
      }

      case "OrgConfigDisableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgConfigDisableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(OrgConfigDisableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "OrgConfigEnableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgConfigEnableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(OrgConfigEnableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "OrgCreateAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgCreateAuditEntry") as any,
          new SelectionSet(select(OrgCreateAuditEntry as any))
        );
      }

      case "OrgDisableOauthAppRestrictionsAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgDisableOauthAppRestrictionsAuditEntry") as any,
          new SelectionSet(
            select(OrgDisableOauthAppRestrictionsAuditEntry as any)
          )
        );
      }

      case "OrgDisableSamlAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgDisableSamlAuditEntry") as any,
          new SelectionSet(select(OrgDisableSamlAuditEntry as any))
        );
      }

      case "OrgDisableTwoFactorRequirementAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgDisableTwoFactorRequirementAuditEntry") as any,
          new SelectionSet(
            select(OrgDisableTwoFactorRequirementAuditEntry as any)
          )
        );
      }

      case "OrgEnableOauthAppRestrictionsAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgEnableOauthAppRestrictionsAuditEntry") as any,
          new SelectionSet(
            select(OrgEnableOauthAppRestrictionsAuditEntry as any)
          )
        );
      }

      case "OrgEnableSamlAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgEnableSamlAuditEntry") as any,
          new SelectionSet(select(OrgEnableSamlAuditEntry as any))
        );
      }

      case "OrgEnableTwoFactorRequirementAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgEnableTwoFactorRequirementAuditEntry") as any,
          new SelectionSet(
            select(OrgEnableTwoFactorRequirementAuditEntry as any)
          )
        );
      }

      case "OrgInviteMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgInviteMemberAuditEntry") as any,
          new SelectionSet(select(OrgInviteMemberAuditEntry as any))
        );
      }

      case "OrgInviteToBusinessAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgInviteToBusinessAuditEntry") as any,
          new SelectionSet(select(OrgInviteToBusinessAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessApprovedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessApprovedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessApprovedAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessDeniedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessDeniedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessDeniedAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessRequestedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessRequestedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessRequestedAuditEntry as any))
        );
      }

      case "OrgRemoveBillingManagerAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRemoveBillingManagerAuditEntry") as any,
          new SelectionSet(select(OrgRemoveBillingManagerAuditEntry as any))
        );
      }

      case "OrgRemoveMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRemoveMemberAuditEntry") as any,
          new SelectionSet(select(OrgRemoveMemberAuditEntry as any))
        );
      }

      case "OrgRemoveOutsideCollaboratorAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRemoveOutsideCollaboratorAuditEntry") as any,
          new SelectionSet(
            select(OrgRemoveOutsideCollaboratorAuditEntry as any)
          )
        );
      }

      case "OrgRestoreMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRestoreMemberAuditEntry") as any,
          new SelectionSet(select(OrgRestoreMemberAuditEntry as any))
        );
      }

      case "OrgUnblockUserAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgUnblockUserAuditEntry") as any,
          new SelectionSet(select(OrgUnblockUserAuditEntry as any))
        );
      }

      case "OrgUpdateDefaultRepositoryPermissionAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "OrgUpdateDefaultRepositoryPermissionAuditEntry"
          ) as any,
          new SelectionSet(
            select(OrgUpdateDefaultRepositoryPermissionAuditEntry as any)
          )
        );
      }

      case "OrgUpdateMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgUpdateMemberAuditEntry") as any,
          new SelectionSet(select(OrgUpdateMemberAuditEntry as any))
        );
      }

      case "OrgUpdateMemberRepositoryCreationPermissionAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
          ) as any,
          new SelectionSet(
            select(OrgUpdateMemberRepositoryCreationPermissionAuditEntry as any)
          )
        );
      }

      case "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
          ) as any,
          new SelectionSet(
            select(
              OrgUpdateMemberRepositoryInvitationPermissionAuditEntry as any
            )
          )
        );
      }

      case "PrivateRepositoryForkingDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("PrivateRepositoryForkingDisableAuditEntry") as any,
          new SelectionSet(
            select(PrivateRepositoryForkingDisableAuditEntry as any)
          )
        );
      }

      case "PrivateRepositoryForkingEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("PrivateRepositoryForkingEnableAuditEntry") as any,
          new SelectionSet(
            select(PrivateRepositoryForkingEnableAuditEntry as any)
          )
        );
      }

      case "RepoAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAccessAuditEntry") as any,
          new SelectionSet(select(RepoAccessAuditEntry as any))
        );
      }

      case "RepoAddMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAddMemberAuditEntry") as any,
          new SelectionSet(select(RepoAddMemberAuditEntry as any))
        );
      }

      case "RepoAddTopicAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAddTopicAuditEntry") as any,
          new SelectionSet(select(RepoAddTopicAuditEntry as any))
        );
      }

      case "RepoArchivedAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoArchivedAuditEntry") as any,
          new SelectionSet(select(RepoArchivedAuditEntry as any))
        );
      }

      case "RepoChangeMergeSettingAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoChangeMergeSettingAuditEntry") as any,
          new SelectionSet(select(RepoChangeMergeSettingAuditEntry as any))
        );
      }

      case "RepoConfigDisableAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableContributorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableContributorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableContributorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableSockpuppetDisallowedAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "RepoConfigDisableSockpuppetDisallowedAuditEntry"
          ) as any,
          new SelectionSet(
            select(RepoConfigDisableSockpuppetDisallowedAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableContributorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableContributorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableContributorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableSockpuppetDisallowedAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "RepoConfigEnableSockpuppetDisallowedAuditEntry"
          ) as any,
          new SelectionSet(
            select(RepoConfigEnableSockpuppetDisallowedAuditEntry as any)
          )
        );
      }

      case "RepoConfigLockAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigLockAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigLockAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigUnlockAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigUnlockAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigUnlockAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoCreateAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoCreateAuditEntry") as any,
          new SelectionSet(select(RepoCreateAuditEntry as any))
        );
      }

      case "RepoDestroyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoDestroyAuditEntry") as any,
          new SelectionSet(select(RepoDestroyAuditEntry as any))
        );
      }

      case "RepoRemoveMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoRemoveMemberAuditEntry") as any,
          new SelectionSet(select(RepoRemoveMemberAuditEntry as any))
        );
      }

      case "RepoRemoveTopicAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoRemoveTopicAuditEntry") as any,
          new SelectionSet(select(RepoRemoveTopicAuditEntry as any))
        );
      }

      case "RepositoryVisibilityChangeDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("RepositoryVisibilityChangeDisableAuditEntry") as any,
          new SelectionSet(
            select(RepositoryVisibilityChangeDisableAuditEntry as any)
          )
        );
      }

      case "RepositoryVisibilityChangeEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("RepositoryVisibilityChangeEnableAuditEntry") as any,
          new SelectionSet(
            select(RepositoryVisibilityChangeEnableAuditEntry as any)
          )
        );
      }

      case "TeamAddMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamAddMemberAuditEntry") as any,
          new SelectionSet(select(TeamAddMemberAuditEntry as any))
        );
      }

      case "TeamAddRepositoryAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamAddRepositoryAuditEntry") as any,
          new SelectionSet(select(TeamAddRepositoryAuditEntry as any))
        );
      }

      case "TeamChangeParentTeamAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamChangeParentTeamAuditEntry") as any,
          new SelectionSet(select(TeamChangeParentTeamAuditEntry as any))
        );
      }

      case "TeamRemoveMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamRemoveMemberAuditEntry") as any,
          new SelectionSet(select(TeamRemoveMemberAuditEntry as any))
        );
      }

      case "TeamRemoveRepositoryAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamRemoveRepositoryAuditEntry") as any,
          new SelectionSet(select(TeamRemoveRepositoryAuditEntry as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IAutomaticBaseChangeFailedEvent extends INode {
  __typename: "AutomaticBaseChangeFailedEvent";
  actor: IActor;
  createdAt: unknown;
  newBase: string;
  oldBase: string;
  pullRequest: IPullRequest;
}

interface AutomaticBaseChangeFailedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  newBase: () => Field<"newBase">;

  oldBase: () => Field<"oldBase">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const isAutomaticBaseChangeFailedEvent = (
  object: Record<string, any>
): object is Partial<IAutomaticBaseChangeFailedEvent> => {
  return object.__typename === "AutomaticBaseChangeFailedEvent";
};

export const AutomaticBaseChangeFailedEvent: AutomaticBaseChangeFailedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  newBase: () => new Field("newBase"),
  oldBase: () => new Field("oldBase"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IAutomaticBaseChangeSucceededEvent extends INode {
  __typename: "AutomaticBaseChangeSucceededEvent";
  actor: IActor;
  createdAt: unknown;
  newBase: string;
  oldBase: string;
  pullRequest: IPullRequest;
}

interface AutomaticBaseChangeSucceededEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  newBase: () => Field<"newBase">;

  oldBase: () => Field<"oldBase">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const isAutomaticBaseChangeSucceededEvent = (
  object: Record<string, any>
): object is Partial<IAutomaticBaseChangeSucceededEvent> => {
  return object.__typename === "AutomaticBaseChangeSucceededEvent";
};

export const AutomaticBaseChangeSucceededEvent: AutomaticBaseChangeSucceededEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  newBase: () => new Field("newBase"),
  oldBase: () => new Field("oldBase"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IBaseRefChangedEvent extends INode {
  __typename: "BaseRefChangedEvent";
  actor: IActor;
  createdAt: unknown;
  currentRefName: string;
  databaseId: number;
  previousRefName: string;
  pullRequest: IPullRequest;
}

interface BaseRefChangedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  currentRefName: () => Field<"currentRefName">;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;

  previousRefName: () => Field<"previousRefName">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const isBaseRefChangedEvent = (
  object: Record<string, any>
): object is Partial<IBaseRefChangedEvent> => {
  return object.__typename === "BaseRefChangedEvent";
};

export const BaseRefChangedEvent: BaseRefChangedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  currentRefName: () => new Field("currentRefName"),
  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),
  previousRefName: () => new Field("previousRefName"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IBaseRefDeletedEvent extends INode {
  __typename: "BaseRefDeletedEvent";
  actor: IActor;
  baseRefName: string;
  createdAt: unknown;
  pullRequest: IPullRequest;
}

interface BaseRefDeletedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  baseRefName: () => Field<"baseRefName">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const isBaseRefDeletedEvent = (
  object: Record<string, any>
): object is Partial<IBaseRefDeletedEvent> => {
  return object.__typename === "BaseRefDeletedEvent";
};

export const BaseRefDeletedEvent: BaseRefDeletedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  baseRefName: () => new Field("baseRefName"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IBaseRefForcePushedEvent extends INode {
  __typename: "BaseRefForcePushedEvent";
  actor: IActor;
  afterCommit: ICommit;
  beforeCommit: ICommit;
  createdAt: unknown;
  pullRequest: IPullRequest;
  ref: IRef;
}

interface BaseRefForcePushedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  afterCommit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"afterCommit", never, SelectionSet<T>>;

  beforeCommit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"beforeCommit", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  ref: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"ref", never, SelectionSet<T>>;
}

export const isBaseRefForcePushedEvent = (
  object: Record<string, any>
): object is Partial<IBaseRefForcePushedEvent> => {
  return object.__typename === "BaseRefForcePushedEvent";
};

export const BaseRefForcePushedEvent: BaseRefForcePushedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  afterCommit: (select) =>
    new Field(
      "afterCommit",
      undefined as never,
      new SelectionSet(select(Commit))
    ),

  beforeCommit: (select) =>
    new Field(
      "beforeCommit",
      undefined as never,
      new SelectionSet(select(Commit))
    ),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  ref: (select) =>
    new Field("ref", undefined as never, new SelectionSet(select(Ref))),
};

export interface IBlame {
  ranges: IBlameRange[];
}

interface BlameSelector {
  __typename: () => Field<"__typename">;

  ranges: <T extends Array<Selection>>(
    select: (t: BlameRangeSelector) => T
  ) => Field<"ranges", never, SelectionSet<T>>;
}

export const Blame: BlameSelector = {
  __typename: () => new Field("__typename"),

  ranges: (select) =>
    new Field(
      "ranges",
      undefined as never,
      new SelectionSet(select(BlameRange))
    ),
};

export interface IBlameRange {
  age: number;
  commit: ICommit;
  endingLine: number;
  startingLine: number;
}

interface BlameRangeSelector {
  __typename: () => Field<"__typename">;

  age: () => Field<"age">;

  commit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"commit", never, SelectionSet<T>>;

  endingLine: () => Field<"endingLine">;

  startingLine: () => Field<"startingLine">;
}

export const BlameRange: BlameRangeSelector = {
  __typename: () => new Field("__typename"),

  age: () => new Field("age"),

  commit: (select) =>
    new Field("commit", undefined as never, new SelectionSet(select(Commit))),

  endingLine: () => new Field("endingLine"),
  startingLine: () => new Field("startingLine"),
};

export interface IBlob extends IGitObject, INode {
  __typename: "Blob";
  byteSize: number;
  isBinary: boolean;
  isTruncated: boolean;
  text: string;
}

interface BlobSelector {
  __typename: () => Field<"__typename">;

  abbreviatedOid: () => Field<"abbreviatedOid">;

  byteSize: () => Field<"byteSize">;

  commitResourcePath: () => Field<"commitResourcePath">;

  commitUrl: () => Field<"commitUrl">;

  id: () => Field<"id">;

  isBinary: () => Field<"isBinary">;

  isTruncated: () => Field<"isTruncated">;

  oid: () => Field<"oid">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  text: () => Field<"text">;
}

export const isBlob = (
  object: Record<string, any>
): object is Partial<IBlob> => {
  return object.__typename === "Blob";
};

export const Blob: BlobSelector = {
  __typename: () => new Field("__typename"),

  abbreviatedOid: () => new Field("abbreviatedOid"),
  byteSize: () => new Field("byteSize"),
  commitResourcePath: () => new Field("commitResourcePath"),
  commitUrl: () => new Field("commitUrl"),
  id: () => new Field("id"),
  isBinary: () => new Field("isBinary"),
  isTruncated: () => new Field("isTruncated"),
  oid: () => new Field("oid"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  text: () => new Field("text"),
};

export interface IBot extends IActor, INode, IUniformResourceLocatable {
  __typename: "Bot";
  createdAt: unknown;
  databaseId: number;
  updatedAt: unknown;
}

interface BotSelector {
  __typename: () => Field<"__typename">;

  avatarUrl: (variables: {
    size: unknown;
  }) => Field<"avatarUrl", [/* @todo */]>;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;

  login: () => Field<"login">;

  resourcePath: () => Field<"resourcePath">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;
}

export const isBot = (object: Record<string, any>): object is Partial<IBot> => {
  return object.__typename === "Bot";
};

export const Bot: BotSelector = {
  __typename: () => new Field("__typename"),

  avatarUrl: (variables) => new Field("avatarUrl"),
  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),
  login: () => new Field("login"),
  resourcePath: () => new Field("resourcePath"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
};

export interface IBranchProtectionRule extends INode {
  __typename: "BranchProtectionRule";
  allowsDeletions: boolean;
  allowsForcePushes: boolean;
  branchProtectionRuleConflicts: IBranchProtectionRuleConflictConnection;
  creator: IActor;
  databaseId: number;
  dismissesStaleReviews: boolean;
  isAdminEnforced: boolean;
  matchingRefs: IRefConnection;
  pattern: string;
  pushAllowances: IPushAllowanceConnection;
  repository: IRepository;
  requiredApprovingReviewCount: number;
  requiredStatusCheckContexts: string[];
  requiresApprovingReviews: boolean;
  requiresCodeOwnerReviews: boolean;
  requiresCommitSignatures: boolean;
  requiresLinearHistory: boolean;
  requiresStatusChecks: boolean;
  requiresStrictStatusChecks: boolean;
  restrictsPushes: boolean;
  restrictsReviewDismissals: boolean;
  reviewDismissalAllowances: IReviewDismissalAllowanceConnection;
}

interface BranchProtectionRuleSelector {
  __typename: () => Field<"__typename">;

  allowsDeletions: () => Field<"allowsDeletions">;

  allowsForcePushes: () => Field<"allowsForcePushes">;

  branchProtectionRuleConflicts: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: BranchProtectionRuleConflictConnectionSelector) => T
  ) => Field<
    "branchProtectionRuleConflicts",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  creator: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"creator", never, SelectionSet<T>>;

  databaseId: () => Field<"databaseId">;

  dismissesStaleReviews: () => Field<"dismissesStaleReviews">;

  id: () => Field<"id">;

  isAdminEnforced: () => Field<"isAdminEnforced">;

  matchingRefs: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      query?: Variable<"query"> | string;
    },
    select: (t: RefConnectionSelector) => T
  ) => Field<
    "matchingRefs",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"query", Variable<"query"> | string>
    ],
    SelectionSet<T>
  >;

  pattern: () => Field<"pattern">;

  pushAllowances: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: PushAllowanceConnectionSelector) => T
  ) => Field<
    "pushAllowances",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  requiredApprovingReviewCount: () => Field<"requiredApprovingReviewCount">;

  requiredStatusCheckContexts: () => Field<"requiredStatusCheckContexts">;

  requiresApprovingReviews: () => Field<"requiresApprovingReviews">;

  requiresCodeOwnerReviews: () => Field<"requiresCodeOwnerReviews">;

  requiresCommitSignatures: () => Field<"requiresCommitSignatures">;

  requiresLinearHistory: () => Field<"requiresLinearHistory">;

  requiresStatusChecks: () => Field<"requiresStatusChecks">;

  requiresStrictStatusChecks: () => Field<"requiresStrictStatusChecks">;

  restrictsPushes: () => Field<"restrictsPushes">;

  restrictsReviewDismissals: () => Field<"restrictsReviewDismissals">;

  reviewDismissalAllowances: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: ReviewDismissalAllowanceConnectionSelector) => T
  ) => Field<
    "reviewDismissalAllowances",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;
}

export const isBranchProtectionRule = (
  object: Record<string, any>
): object is Partial<IBranchProtectionRule> => {
  return object.__typename === "BranchProtectionRule";
};

export const BranchProtectionRule: BranchProtectionRuleSelector = {
  __typename: () => new Field("__typename"),

  allowsDeletions: () => new Field("allowsDeletions"),
  allowsForcePushes: () => new Field("allowsForcePushes"),

  branchProtectionRuleConflicts: (variables, select) =>
    new Field(
      "branchProtectionRuleConflicts",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(BranchProtectionRuleConflictConnection))
    ),

  creator: (select) =>
    new Field("creator", undefined as never, new SelectionSet(select(Actor))),

  databaseId: () => new Field("databaseId"),
  dismissesStaleReviews: () => new Field("dismissesStaleReviews"),
  id: () => new Field("id"),
  isAdminEnforced: () => new Field("isAdminEnforced"),

  matchingRefs: (variables, select) =>
    new Field(
      "matchingRefs",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("query", variables.query),
      ],
      new SelectionSet(select(RefConnection))
    ),

  pattern: () => new Field("pattern"),

  pushAllowances: (variables, select) =>
    new Field(
      "pushAllowances",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(PushAllowanceConnection))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  requiredApprovingReviewCount: () => new Field("requiredApprovingReviewCount"),
  requiredStatusCheckContexts: () => new Field("requiredStatusCheckContexts"),
  requiresApprovingReviews: () => new Field("requiresApprovingReviews"),
  requiresCodeOwnerReviews: () => new Field("requiresCodeOwnerReviews"),
  requiresCommitSignatures: () => new Field("requiresCommitSignatures"),
  requiresLinearHistory: () => new Field("requiresLinearHistory"),
  requiresStatusChecks: () => new Field("requiresStatusChecks"),
  requiresStrictStatusChecks: () => new Field("requiresStrictStatusChecks"),
  restrictsPushes: () => new Field("restrictsPushes"),
  restrictsReviewDismissals: () => new Field("restrictsReviewDismissals"),

  reviewDismissalAllowances: (variables, select) =>
    new Field(
      "reviewDismissalAllowances",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(ReviewDismissalAllowanceConnection))
    ),
};

export interface IBranchProtectionRuleConflict {
  branchProtectionRule: IBranchProtectionRule;
  conflictingBranchProtectionRule: IBranchProtectionRule;
  ref: IRef;
}

interface BranchProtectionRuleConflictSelector {
  __typename: () => Field<"__typename">;

  branchProtectionRule: <T extends Array<Selection>>(
    select: (t: BranchProtectionRuleSelector) => T
  ) => Field<"branchProtectionRule", never, SelectionSet<T>>;

  conflictingBranchProtectionRule: <T extends Array<Selection>>(
    select: (t: BranchProtectionRuleSelector) => T
  ) => Field<"conflictingBranchProtectionRule", never, SelectionSet<T>>;

  ref: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"ref", never, SelectionSet<T>>;
}

export const BranchProtectionRuleConflict: BranchProtectionRuleConflictSelector = {
  __typename: () => new Field("__typename"),

  branchProtectionRule: (select) =>
    new Field(
      "branchProtectionRule",
      undefined as never,
      new SelectionSet(select(BranchProtectionRule))
    ),

  conflictingBranchProtectionRule: (select) =>
    new Field(
      "conflictingBranchProtectionRule",
      undefined as never,
      new SelectionSet(select(BranchProtectionRule))
    ),

  ref: (select) =>
    new Field("ref", undefined as never, new SelectionSet(select(Ref))),
};

export interface IBranchProtectionRuleConflictConnection {
  edges: IBranchProtectionRuleConflictEdge[];
  nodes: IBranchProtectionRuleConflict[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface BranchProtectionRuleConflictConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: BranchProtectionRuleConflictEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: BranchProtectionRuleConflictSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const BranchProtectionRuleConflictConnection: BranchProtectionRuleConflictConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(BranchProtectionRuleConflictEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(BranchProtectionRuleConflict))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IBranchProtectionRuleConflictEdge {
  cursor: string;
  node: IBranchProtectionRuleConflict;
}

interface BranchProtectionRuleConflictEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: BranchProtectionRuleConflictSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const BranchProtectionRuleConflictEdge: BranchProtectionRuleConflictEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(BranchProtectionRuleConflict))
    ),
};

export interface IBranchProtectionRuleConnection {
  edges: IBranchProtectionRuleEdge[];
  nodes: IBranchProtectionRule[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface BranchProtectionRuleConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: BranchProtectionRuleEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: BranchProtectionRuleSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const BranchProtectionRuleConnection: BranchProtectionRuleConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(BranchProtectionRuleEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(BranchProtectionRule))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IBranchProtectionRuleEdge {
  cursor: string;
  node: IBranchProtectionRule;
}

interface BranchProtectionRuleEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: BranchProtectionRuleSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const BranchProtectionRuleEdge: BranchProtectionRuleEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(BranchProtectionRule))
    ),
};

export interface ICancelEnterpriseAdminInvitationPayload {
  clientMutationId: string;
  invitation: IEnterpriseAdministratorInvitation;
  message: string;
}

interface CancelEnterpriseAdminInvitationPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  invitation: <T extends Array<Selection>>(
    select: (t: EnterpriseAdministratorInvitationSelector) => T
  ) => Field<"invitation", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const CancelEnterpriseAdminInvitationPayload: CancelEnterpriseAdminInvitationPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  invitation: (select) =>
    new Field(
      "invitation",
      undefined as never,
      new SelectionSet(select(EnterpriseAdministratorInvitation))
    ),

  message: () => new Field("message"),
};

export interface IChangeUserStatusPayload {
  clientMutationId: string;
  status: IUserStatus;
}

interface ChangeUserStatusPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  status: <T extends Array<Selection>>(
    select: (t: UserStatusSelector) => T
  ) => Field<"status", never, SelectionSet<T>>;
}

export const ChangeUserStatusPayload: ChangeUserStatusPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  status: (select) =>
    new Field(
      "status",
      undefined as never,
      new SelectionSet(select(UserStatus))
    ),
};

export interface ICheckAnnotation {
  annotationLevel: CheckAnnotationLevel;
  blobUrl: unknown;
  databaseId: number;
  location: ICheckAnnotationSpan;
  message: string;
  path: string;
  rawDetails: string;
  title: string;
}

interface CheckAnnotationSelector {
  __typename: () => Field<"__typename">;

  annotationLevel: () => Field<"annotationLevel">;

  blobUrl: () => Field<"blobUrl">;

  databaseId: () => Field<"databaseId">;

  location: <T extends Array<Selection>>(
    select: (t: CheckAnnotationSpanSelector) => T
  ) => Field<"location", never, SelectionSet<T>>;

  message: () => Field<"message">;

  path: () => Field<"path">;

  rawDetails: () => Field<"rawDetails">;

  title: () => Field<"title">;
}

export const CheckAnnotation: CheckAnnotationSelector = {
  __typename: () => new Field("__typename"),

  annotationLevel: () => new Field("annotationLevel"),
  blobUrl: () => new Field("blobUrl"),
  databaseId: () => new Field("databaseId"),

  location: (select) =>
    new Field(
      "location",
      undefined as never,
      new SelectionSet(select(CheckAnnotationSpan))
    ),

  message: () => new Field("message"),
  path: () => new Field("path"),
  rawDetails: () => new Field("rawDetails"),
  title: () => new Field("title"),
};

export interface ICheckAnnotationConnection {
  edges: ICheckAnnotationEdge[];
  nodes: ICheckAnnotation[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface CheckAnnotationConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: CheckAnnotationEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: CheckAnnotationSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const CheckAnnotationConnection: CheckAnnotationConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(CheckAnnotationEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(CheckAnnotation))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ICheckAnnotationEdge {
  cursor: string;
  node: ICheckAnnotation;
}

interface CheckAnnotationEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: CheckAnnotationSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const CheckAnnotationEdge: CheckAnnotationEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(CheckAnnotation))
    ),
};

export interface ICheckAnnotationPosition {
  column: number;
  line: number;
}

interface CheckAnnotationPositionSelector {
  __typename: () => Field<"__typename">;

  column: () => Field<"column">;

  line: () => Field<"line">;
}

export const CheckAnnotationPosition: CheckAnnotationPositionSelector = {
  __typename: () => new Field("__typename"),

  column: () => new Field("column"),
  line: () => new Field("line"),
};

export interface ICheckAnnotationSpan {
  end: ICheckAnnotationPosition;
  start: ICheckAnnotationPosition;
}

interface CheckAnnotationSpanSelector {
  __typename: () => Field<"__typename">;

  end: <T extends Array<Selection>>(
    select: (t: CheckAnnotationPositionSelector) => T
  ) => Field<"end", never, SelectionSet<T>>;

  start: <T extends Array<Selection>>(
    select: (t: CheckAnnotationPositionSelector) => T
  ) => Field<"start", never, SelectionSet<T>>;
}

export const CheckAnnotationSpan: CheckAnnotationSpanSelector = {
  __typename: () => new Field("__typename"),

  end: (select) =>
    new Field(
      "end",
      undefined as never,
      new SelectionSet(select(CheckAnnotationPosition))
    ),

  start: (select) =>
    new Field(
      "start",
      undefined as never,
      new SelectionSet(select(CheckAnnotationPosition))
    ),
};

export interface ICheckRun extends INode, IUniformResourceLocatable {
  __typename: "CheckRun";
  annotations: ICheckAnnotationConnection;
  checkSuite: ICheckSuite;
  completedAt: unknown;
  conclusion: CheckConclusionState;
  databaseId: number;
  detailsUrl: unknown;
  externalId: string;
  name: string;
  permalink: unknown;
  repository: IRepository;
  startedAt: unknown;
  status: CheckStatusState;
  summary: string;
  text: string;
  title: string;
}

interface CheckRunSelector {
  __typename: () => Field<"__typename">;

  annotations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: CheckAnnotationConnectionSelector) => T
  ) => Field<
    "annotations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  checkSuite: <T extends Array<Selection>>(
    select: (t: CheckSuiteSelector) => T
  ) => Field<"checkSuite", never, SelectionSet<T>>;

  completedAt: () => Field<"completedAt">;

  conclusion: () => Field<"conclusion">;

  databaseId: () => Field<"databaseId">;

  detailsUrl: () => Field<"detailsUrl">;

  externalId: () => Field<"externalId">;

  id: () => Field<"id">;

  name: () => Field<"name">;

  permalink: () => Field<"permalink">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  startedAt: () => Field<"startedAt">;

  status: () => Field<"status">;

  summary: () => Field<"summary">;

  text: () => Field<"text">;

  title: () => Field<"title">;

  url: () => Field<"url">;
}

export const isCheckRun = (
  object: Record<string, any>
): object is Partial<ICheckRun> => {
  return object.__typename === "CheckRun";
};

export const CheckRun: CheckRunSelector = {
  __typename: () => new Field("__typename"),

  annotations: (variables, select) =>
    new Field(
      "annotations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(CheckAnnotationConnection))
    ),

  checkSuite: (select) =>
    new Field(
      "checkSuite",
      undefined as never,
      new SelectionSet(select(CheckSuite))
    ),

  completedAt: () => new Field("completedAt"),
  conclusion: () => new Field("conclusion"),
  databaseId: () => new Field("databaseId"),
  detailsUrl: () => new Field("detailsUrl"),
  externalId: () => new Field("externalId"),
  id: () => new Field("id"),
  name: () => new Field("name"),
  permalink: () => new Field("permalink"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  startedAt: () => new Field("startedAt"),
  status: () => new Field("status"),
  summary: () => new Field("summary"),
  text: () => new Field("text"),
  title: () => new Field("title"),
  url: () => new Field("url"),
};

export interface ICheckRunConnection {
  edges: ICheckRunEdge[];
  nodes: ICheckRun[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface CheckRunConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: CheckRunEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: CheckRunSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const CheckRunConnection: CheckRunConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(CheckRunEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(CheckRun))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ICheckRunEdge {
  cursor: string;
  node: ICheckRun;
}

interface CheckRunEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: CheckRunSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const CheckRunEdge: CheckRunEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(CheckRun))),
};

export interface ICheckSuite extends INode {
  __typename: "CheckSuite";
  app: IApp;
  branch: IRef;
  checkRuns: ICheckRunConnection;
  commit: ICommit;
  conclusion: CheckConclusionState;
  createdAt: unknown;
  databaseId: number;
  matchingPullRequests: IPullRequestConnection;
  push: IPush;
  repository: IRepository;
  resourcePath: unknown;
  status: CheckStatusState;
  updatedAt: unknown;
  url: unknown;
}

interface CheckSuiteSelector {
  __typename: () => Field<"__typename">;

  app: <T extends Array<Selection>>(
    select: (t: AppSelector) => T
  ) => Field<"app", never, SelectionSet<T>>;

  branch: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"branch", never, SelectionSet<T>>;

  checkRuns: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      filterBy?: Variable<"filterBy"> | CheckRunFilter;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: CheckRunConnectionSelector) => T
  ) => Field<
    "checkRuns",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"filterBy", Variable<"filterBy"> | CheckRunFilter>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  commit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"commit", never, SelectionSet<T>>;

  conclusion: () => Field<"conclusion">;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;

  matchingPullRequests: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      baseRefName?: Variable<"baseRefName"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      headRefName?: Variable<"headRefName"> | string;
      labels?: Variable<"labels"> | string;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IssueOrder;
      states?: Variable<"states"> | PullRequestState;
    },
    select: (t: PullRequestConnectionSelector) => T
  ) => Field<
    "matchingPullRequests",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"baseRefName", Variable<"baseRefName"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"headRefName", Variable<"headRefName"> | string>,
      Argument<"labels", Variable<"labels"> | string>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IssueOrder>,
      Argument<"states", Variable<"states"> | PullRequestState>
    ],
    SelectionSet<T>
  >;

  push: <T extends Array<Selection>>(
    select: (t: PushSelector) => T
  ) => Field<"push", never, SelectionSet<T>>;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  status: () => Field<"status">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;
}

export const isCheckSuite = (
  object: Record<string, any>
): object is Partial<ICheckSuite> => {
  return object.__typename === "CheckSuite";
};

export const CheckSuite: CheckSuiteSelector = {
  __typename: () => new Field("__typename"),

  app: (select) =>
    new Field("app", undefined as never, new SelectionSet(select(App))),

  branch: (select) =>
    new Field("branch", undefined as never, new SelectionSet(select(Ref))),

  checkRuns: (variables, select) =>
    new Field(
      "checkRuns",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("filterBy", variables.filterBy),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(CheckRunConnection))
    ),

  commit: (select) =>
    new Field("commit", undefined as never, new SelectionSet(select(Commit))),

  conclusion: () => new Field("conclusion"),
  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),

  matchingPullRequests: (variables, select) =>
    new Field(
      "matchingPullRequests",
      [
        new Argument("after", variables.after),
        new Argument("baseRefName", variables.baseRefName),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("headRefName", variables.headRefName),
        new Argument("labels", variables.labels),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("states", variables.states, PullRequestState),
      ],
      new SelectionSet(select(PullRequestConnection))
    ),

  push: (select) =>
    new Field("push", undefined as never, new SelectionSet(select(Push))),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  status: () => new Field("status"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
};

export interface ICheckSuiteConnection {
  edges: ICheckSuiteEdge[];
  nodes: ICheckSuite[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface CheckSuiteConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: CheckSuiteEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: CheckSuiteSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const CheckSuiteConnection: CheckSuiteConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(CheckSuiteEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(CheckSuite))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ICheckSuiteEdge {
  cursor: string;
  node: ICheckSuite;
}

interface CheckSuiteEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: CheckSuiteSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const CheckSuiteEdge: CheckSuiteEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(CheckSuite))),
};

export interface IClearLabelsFromLabelablePayload {
  clientMutationId: string;
  labelable: ILabelable;
}

interface ClearLabelsFromLabelablePayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  labelable: <T extends Array<Selection>>(
    select: (t: LabelableSelector) => T
  ) => Field<"labelable", never, SelectionSet<T>>;
}

export const ClearLabelsFromLabelablePayload: ClearLabelsFromLabelablePayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  labelable: (select) =>
    new Field(
      "labelable",
      undefined as never,
      new SelectionSet(select(Labelable))
    ),
};

export interface ICloneProjectPayload {
  clientMutationId: string;
  jobStatusId: string;
  project: IProject;
}

interface CloneProjectPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  jobStatusId: () => Field<"jobStatusId">;

  project: <T extends Array<Selection>>(
    select: (t: ProjectSelector) => T
  ) => Field<"project", never, SelectionSet<T>>;
}

export const CloneProjectPayload: CloneProjectPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),
  jobStatusId: () => new Field("jobStatusId"),

  project: (select) =>
    new Field("project", undefined as never, new SelectionSet(select(Project))),
};

export interface ICloneTemplateRepositoryPayload {
  clientMutationId: string;
  repository: IRepository;
}

interface CloneTemplateRepositoryPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const CloneTemplateRepositoryPayload: CloneTemplateRepositoryPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface IClosable {
  __typename: string;
  closed: boolean;
  closedAt: unknown;
}

interface ClosableSelector {
  __typename: () => Field<"__typename">;

  closed: () => Field<"closed">;

  closedAt: () => Field<"closedAt">;

  on: <
    T extends Array<Selection>,
    F extends "Issue" | "Milestone" | "Project" | "PullRequest"
  >(
    type: F,
    select: (
      t: F extends "Issue"
        ? IssueSelector
        : F extends "Milestone"
        ? MilestoneSelector
        : F extends "Project"
        ? ProjectSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Closable: ClosableSelector = {
  __typename: () => new Field("__typename"),

  closed: () => new Field("closed"),
  closedAt: () => new Field("closedAt"),

  on: (type, select) => {
    switch (type) {
      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "Milestone": {
        return new InlineFragment(
          new NamedType("Milestone") as any,
          new SelectionSet(select(Milestone as any))
        );
      }

      case "Project": {
        return new InlineFragment(
          new NamedType("Project") as any,
          new SelectionSet(select(Project as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface ICloseIssuePayload {
  clientMutationId: string;
  issue: IIssue;
}

interface CloseIssuePayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  issue: <T extends Array<Selection>>(
    select: (t: IssueSelector) => T
  ) => Field<"issue", never, SelectionSet<T>>;
}

export const CloseIssuePayload: CloseIssuePayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  issue: (select) =>
    new Field("issue", undefined as never, new SelectionSet(select(Issue))),
};

export interface IClosePullRequestPayload {
  clientMutationId: string;
  pullRequest: IPullRequest;
}

interface ClosePullRequestPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const ClosePullRequestPayload: ClosePullRequestPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IClosedEvent extends INode, IUniformResourceLocatable {
  __typename: "ClosedEvent";
  actor: IActor;
  closable: IClosable;
  closer: ICloser;
  createdAt: unknown;
}

interface ClosedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  closable: <T extends Array<Selection>>(
    select: (t: ClosableSelector) => T
  ) => Field<"closable", never, SelectionSet<T>>;

  closer: <T extends Array<Selection>>(
    select: (t: CloserSelector) => T
  ) => Field<"closer", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;
}

export const isClosedEvent = (
  object: Record<string, any>
): object is Partial<IClosedEvent> => {
  return object.__typename === "ClosedEvent";
};

export const ClosedEvent: ClosedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  closable: (select) =>
    new Field(
      "closable",
      undefined as never,
      new SelectionSet(select(Closable))
    ),

  closer: (select) =>
    new Field("closer", undefined as never, new SelectionSet(select(Closer))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),
};

export interface ICodeOfConduct extends INode {
  __typename: "CodeOfConduct";
  body: string;
  key: string;
  name: string;
  resourcePath: unknown;
  url: unknown;
}

interface CodeOfConductSelector {
  __typename: () => Field<"__typename">;

  body: () => Field<"body">;

  id: () => Field<"id">;

  key: () => Field<"key">;

  name: () => Field<"name">;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;
}

export const isCodeOfConduct = (
  object: Record<string, any>
): object is Partial<ICodeOfConduct> => {
  return object.__typename === "CodeOfConduct";
};

export const CodeOfConduct: CodeOfConductSelector = {
  __typename: () => new Field("__typename"),

  body: () => new Field("body"),
  id: () => new Field("id"),
  key: () => new Field("key"),
  name: () => new Field("name"),
  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),
};

export interface IComment {
  __typename: string;
  author: IActor;
  authorAssociation: CommentAuthorAssociation;
  body: string;
  bodyHTML: unknown;
  bodyText: string;
  createdAt: unknown;
  createdViaEmail: boolean;
  editor: IActor;
  id: string;
  includesCreatedEdit: boolean;
  lastEditedAt: unknown;
  publishedAt: unknown;
  updatedAt: unknown;
  userContentEdits: IUserContentEditConnection;
  viewerDidAuthor: boolean;
}

interface CommentSelector {
  __typename: () => Field<"__typename">;

  author: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"author", never, SelectionSet<T>>;

  authorAssociation: () => Field<"authorAssociation">;

  body: () => Field<"body">;

  bodyHTML: () => Field<"bodyHTML">;

  bodyText: () => Field<"bodyText">;

  createdAt: () => Field<"createdAt">;

  createdViaEmail: () => Field<"createdViaEmail">;

  editor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"editor", never, SelectionSet<T>>;

  id: () => Field<"id">;

  includesCreatedEdit: () => Field<"includesCreatedEdit">;

  lastEditedAt: () => Field<"lastEditedAt">;

  publishedAt: () => Field<"publishedAt">;

  updatedAt: () => Field<"updatedAt">;

  userContentEdits: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserContentEditConnectionSelector) => T
  ) => Field<
    "userContentEdits",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  viewerDidAuthor: () => Field<"viewerDidAuthor">;

  on: <
    T extends Array<Selection>,
    F extends
      | "CommitComment"
      | "GistComment"
      | "Issue"
      | "IssueComment"
      | "PullRequest"
      | "PullRequestReview"
      | "PullRequestReviewComment"
      | "TeamDiscussion"
      | "TeamDiscussionComment"
  >(
    type: F,
    select: (
      t: F extends "CommitComment"
        ? CommitCommentSelector
        : F extends "GistComment"
        ? GistCommentSelector
        : F extends "Issue"
        ? IssueSelector
        : F extends "IssueComment"
        ? IssueCommentSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : F extends "PullRequestReview"
        ? PullRequestReviewSelector
        : F extends "PullRequestReviewComment"
        ? PullRequestReviewCommentSelector
        : F extends "TeamDiscussion"
        ? TeamDiscussionSelector
        : F extends "TeamDiscussionComment"
        ? TeamDiscussionCommentSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Comment: CommentSelector = {
  __typename: () => new Field("__typename"),

  author: (select) =>
    new Field("author", undefined as never, new SelectionSet(select(Actor))),

  authorAssociation: () => new Field("authorAssociation"),
  body: () => new Field("body"),
  bodyHTML: () => new Field("bodyHTML"),
  bodyText: () => new Field("bodyText"),
  createdAt: () => new Field("createdAt"),
  createdViaEmail: () => new Field("createdViaEmail"),

  editor: (select) =>
    new Field("editor", undefined as never, new SelectionSet(select(Actor))),

  id: () => new Field("id"),
  includesCreatedEdit: () => new Field("includesCreatedEdit"),
  lastEditedAt: () => new Field("lastEditedAt"),
  publishedAt: () => new Field("publishedAt"),
  updatedAt: () => new Field("updatedAt"),

  userContentEdits: (variables, select) =>
    new Field(
      "userContentEdits",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserContentEditConnection))
    ),

  viewerDidAuthor: () => new Field("viewerDidAuthor"),

  on: (type, select) => {
    switch (type) {
      case "CommitComment": {
        return new InlineFragment(
          new NamedType("CommitComment") as any,
          new SelectionSet(select(CommitComment as any))
        );
      }

      case "GistComment": {
        return new InlineFragment(
          new NamedType("GistComment") as any,
          new SelectionSet(select(GistComment as any))
        );
      }

      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "IssueComment": {
        return new InlineFragment(
          new NamedType("IssueComment") as any,
          new SelectionSet(select(IssueComment as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      case "PullRequestReview": {
        return new InlineFragment(
          new NamedType("PullRequestReview") as any,
          new SelectionSet(select(PullRequestReview as any))
        );
      }

      case "PullRequestReviewComment": {
        return new InlineFragment(
          new NamedType("PullRequestReviewComment") as any,
          new SelectionSet(select(PullRequestReviewComment as any))
        );
      }

      case "TeamDiscussion": {
        return new InlineFragment(
          new NamedType("TeamDiscussion") as any,
          new SelectionSet(select(TeamDiscussion as any))
        );
      }

      case "TeamDiscussionComment": {
        return new InlineFragment(
          new NamedType("TeamDiscussionComment") as any,
          new SelectionSet(select(TeamDiscussionComment as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface ICommentDeletedEvent extends INode {
  __typename: "CommentDeletedEvent";
  actor: IActor;
  createdAt: unknown;
  databaseId: number;
  deletedCommentAuthor: IActor;
}

interface CommentDeletedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  deletedCommentAuthor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"deletedCommentAuthor", never, SelectionSet<T>>;

  id: () => Field<"id">;
}

export const isCommentDeletedEvent = (
  object: Record<string, any>
): object is Partial<ICommentDeletedEvent> => {
  return object.__typename === "CommentDeletedEvent";
};

export const CommentDeletedEvent: CommentDeletedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),

  deletedCommentAuthor: (select) =>
    new Field(
      "deletedCommentAuthor",
      undefined as never,
      new SelectionSet(select(Actor))
    ),

  id: () => new Field("id"),
};

export interface ICommit
  extends IGitObject,
    INode,
    ISubscribable,
    IUniformResourceLocatable {
  __typename: "Commit";
  additions: number;
  associatedPullRequests: IPullRequestConnection;
  author: IGitActor;
  authoredByCommitter: boolean;
  authoredDate: unknown;
  authors: IGitActorConnection;
  blame: IBlame;
  changedFiles: number;
  checkSuites: ICheckSuiteConnection;
  comments: ICommitCommentConnection;
  committedDate: unknown;
  committedViaWeb: boolean;
  committer: IGitActor;
  deletions: number;
  deployments: IDeploymentConnection;
  file: ITreeEntry;
  history: ICommitHistoryConnection;
  message: string;
  messageBody: string;
  messageBodyHTML: unknown;
  messageHeadline: string;
  messageHeadlineHTML: unknown;
  onBehalfOf: IOrganization;
  parents: ICommitConnection;
  pushedDate: unknown;
  signature: IGitSignature;
  status: IStatus;
  statusCheckRollup: IStatusCheckRollup;
  submodules: ISubmoduleConnection;
  tarballUrl: unknown;
  tree: ITree;
  treeResourcePath: unknown;
  treeUrl: unknown;
  zipballUrl: unknown;
}

interface CommitSelector {
  __typename: () => Field<"__typename">;

  abbreviatedOid: () => Field<"abbreviatedOid">;

  additions: () => Field<"additions">;

  associatedPullRequests: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | PullRequestOrder;
    },
    select: (t: PullRequestConnectionSelector) => T
  ) => Field<
    "associatedPullRequests",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | PullRequestOrder>
    ],
    SelectionSet<T>
  >;

  author: <T extends Array<Selection>>(
    select: (t: GitActorSelector) => T
  ) => Field<"author", never, SelectionSet<T>>;

  authoredByCommitter: () => Field<"authoredByCommitter">;

  authoredDate: () => Field<"authoredDate">;

  authors: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: GitActorConnectionSelector) => T
  ) => Field<
    "authors",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  blame: <T extends Array<Selection>>(
    variables: { path?: Variable<"path"> | string },
    select: (t: BlameSelector) => T
  ) => Field<
    "blame",
    [Argument<"path", Variable<"path"> | string>],
    SelectionSet<T>
  >;

  changedFiles: () => Field<"changedFiles">;

  checkSuites: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      filterBy?: Variable<"filterBy"> | CheckSuiteFilter;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: CheckSuiteConnectionSelector) => T
  ) => Field<
    "checkSuites",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"filterBy", Variable<"filterBy"> | CheckSuiteFilter>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  comments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: CommitCommentConnectionSelector) => T
  ) => Field<
    "comments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  commitResourcePath: () => Field<"commitResourcePath">;

  commitUrl: () => Field<"commitUrl">;

  committedDate: () => Field<"committedDate">;

  committedViaWeb: () => Field<"committedViaWeb">;

  committer: <T extends Array<Selection>>(
    select: (t: GitActorSelector) => T
  ) => Field<"committer", never, SelectionSet<T>>;

  deletions: () => Field<"deletions">;

  deployments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      environments?: Variable<"environments"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | DeploymentOrder;
    },
    select: (t: DeploymentConnectionSelector) => T
  ) => Field<
    "deployments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"environments", Variable<"environments"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | DeploymentOrder>
    ],
    SelectionSet<T>
  >;

  file: <T extends Array<Selection>>(
    variables: { path?: Variable<"path"> | string },
    select: (t: TreeEntrySelector) => T
  ) => Field<
    "file",
    [Argument<"path", Variable<"path"> | string>],
    SelectionSet<T>
  >;

  history: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      author?: Variable<"author"> | CommitAuthor;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      path?: Variable<"path"> | string;
      since?: Variable<"since"> | unknown;
      until?: Variable<"until"> | unknown;
    },
    select: (t: CommitHistoryConnectionSelector) => T
  ) => Field<
    "history",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"author", Variable<"author"> | CommitAuthor>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"path", Variable<"path"> | string>,
      Argument<"since", Variable<"since"> | unknown>,
      Argument<"until", Variable<"until"> | unknown>
    ],
    SelectionSet<T>
  >;

  id: () => Field<"id">;

  message: () => Field<"message">;

  messageBody: () => Field<"messageBody">;

  messageBodyHTML: () => Field<"messageBodyHTML">;

  messageHeadline: () => Field<"messageHeadline">;

  messageHeadlineHTML: () => Field<"messageHeadlineHTML">;

  oid: () => Field<"oid">;

  onBehalfOf: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"onBehalfOf", never, SelectionSet<T>>;

  parents: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: CommitConnectionSelector) => T
  ) => Field<
    "parents",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  pushedDate: () => Field<"pushedDate">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  signature: <T extends Array<Selection>>(
    select: (t: GitSignatureSelector) => T
  ) => Field<"signature", never, SelectionSet<T>>;

  status: <T extends Array<Selection>>(
    select: (t: StatusSelector) => T
  ) => Field<"status", never, SelectionSet<T>>;

  statusCheckRollup: <T extends Array<Selection>>(
    select: (t: StatusCheckRollupSelector) => T
  ) => Field<"statusCheckRollup", never, SelectionSet<T>>;

  submodules: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: SubmoduleConnectionSelector) => T
  ) => Field<
    "submodules",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  tarballUrl: () => Field<"tarballUrl">;

  tree: <T extends Array<Selection>>(
    select: (t: TreeSelector) => T
  ) => Field<"tree", never, SelectionSet<T>>;

  treeResourcePath: () => Field<"treeResourcePath">;

  treeUrl: () => Field<"treeUrl">;

  url: () => Field<"url">;

  viewerCanSubscribe: () => Field<"viewerCanSubscribe">;

  viewerSubscription: () => Field<"viewerSubscription">;

  zipballUrl: () => Field<"zipballUrl">;
}

export const isCommit = (
  object: Record<string, any>
): object is Partial<ICommit> => {
  return object.__typename === "Commit";
};

export const Commit: CommitSelector = {
  __typename: () => new Field("__typename"),

  abbreviatedOid: () => new Field("abbreviatedOid"),
  additions: () => new Field("additions"),

  associatedPullRequests: (variables, select) =>
    new Field(
      "associatedPullRequests",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(PullRequestConnection))
    ),

  author: (select) =>
    new Field("author", undefined as never, new SelectionSet(select(GitActor))),

  authoredByCommitter: () => new Field("authoredByCommitter"),
  authoredDate: () => new Field("authoredDate"),

  authors: (variables, select) =>
    new Field(
      "authors",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(GitActorConnection))
    ),

  blame: (variables, select) =>
    new Field(
      "blame",
      [new Argument("path", variables.path)],
      new SelectionSet(select(Blame))
    ),

  changedFiles: () => new Field("changedFiles"),

  checkSuites: (variables, select) =>
    new Field(
      "checkSuites",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("filterBy", variables.filterBy),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(CheckSuiteConnection))
    ),

  comments: (variables, select) =>
    new Field(
      "comments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(CommitCommentConnection))
    ),

  commitResourcePath: () => new Field("commitResourcePath"),
  commitUrl: () => new Field("commitUrl"),
  committedDate: () => new Field("committedDate"),
  committedViaWeb: () => new Field("committedViaWeb"),

  committer: (select) =>
    new Field(
      "committer",
      undefined as never,
      new SelectionSet(select(GitActor))
    ),

  deletions: () => new Field("deletions"),

  deployments: (variables, select) =>
    new Field(
      "deployments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("environments", variables.environments),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(DeploymentConnection))
    ),

  file: (variables, select) =>
    new Field(
      "file",
      [new Argument("path", variables.path)],
      new SelectionSet(select(TreeEntry))
    ),

  history: (variables, select) =>
    new Field(
      "history",
      [
        new Argument("after", variables.after),
        new Argument("author", variables.author),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("path", variables.path),
        new Argument("since", variables.since),
        new Argument("until", variables.until),
      ],
      new SelectionSet(select(CommitHistoryConnection))
    ),

  id: () => new Field("id"),
  message: () => new Field("message"),
  messageBody: () => new Field("messageBody"),
  messageBodyHTML: () => new Field("messageBodyHTML"),
  messageHeadline: () => new Field("messageHeadline"),
  messageHeadlineHTML: () => new Field("messageHeadlineHTML"),
  oid: () => new Field("oid"),

  onBehalfOf: (select) =>
    new Field(
      "onBehalfOf",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  parents: (variables, select) =>
    new Field(
      "parents",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(CommitConnection))
    ),

  pushedDate: () => new Field("pushedDate"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),

  signature: (select) =>
    new Field(
      "signature",
      undefined as never,
      new SelectionSet(select(GitSignature))
    ),

  status: (select) =>
    new Field("status", undefined as never, new SelectionSet(select(Status))),

  statusCheckRollup: (select) =>
    new Field(
      "statusCheckRollup",
      undefined as never,
      new SelectionSet(select(StatusCheckRollup))
    ),

  submodules: (variables, select) =>
    new Field(
      "submodules",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(SubmoduleConnection))
    ),

  tarballUrl: () => new Field("tarballUrl"),

  tree: (select) =>
    new Field("tree", undefined as never, new SelectionSet(select(Tree))),

  treeResourcePath: () => new Field("treeResourcePath"),
  treeUrl: () => new Field("treeUrl"),
  url: () => new Field("url"),
  viewerCanSubscribe: () => new Field("viewerCanSubscribe"),
  viewerSubscription: () => new Field("viewerSubscription"),
  zipballUrl: () => new Field("zipballUrl"),
};

export interface ICommitComment
  extends IComment,
    IDeletable,
    IMinimizable,
    INode,
    IReactable,
    IRepositoryNode,
    IUpdatable,
    IUpdatableComment {
  __typename: "CommitComment";
  commit: ICommit;
  path: string;
  position: number;
  resourcePath: unknown;
  url: unknown;
}

interface CommitCommentSelector {
  __typename: () => Field<"__typename">;

  author: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"author", never, SelectionSet<T>>;

  authorAssociation: () => Field<"authorAssociation">;

  body: () => Field<"body">;

  bodyHTML: () => Field<"bodyHTML">;

  bodyText: () => Field<"bodyText">;

  commit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"commit", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  createdViaEmail: () => Field<"createdViaEmail">;

  databaseId: () => Field<"databaseId">;

  editor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"editor", never, SelectionSet<T>>;

  id: () => Field<"id">;

  includesCreatedEdit: () => Field<"includesCreatedEdit">;

  isMinimized: () => Field<"isMinimized">;

  lastEditedAt: () => Field<"lastEditedAt">;

  minimizedReason: () => Field<"minimizedReason">;

  path: () => Field<"path">;

  position: () => Field<"position">;

  publishedAt: () => Field<"publishedAt">;

  reactionGroups: <T extends Array<Selection>>(
    select: (t: ReactionGroupSelector) => T
  ) => Field<"reactionGroups", never, SelectionSet<T>>;

  reactions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      content?: Variable<"content"> | ReactionContent;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ReactionOrder;
    },
    select: (t: ReactionConnectionSelector) => T
  ) => Field<
    "reactions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"content", Variable<"content"> | ReactionContent>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ReactionOrder>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  userContentEdits: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserContentEditConnectionSelector) => T
  ) => Field<
    "userContentEdits",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  viewerCanDelete: () => Field<"viewerCanDelete">;

  viewerCanMinimize: () => Field<"viewerCanMinimize">;

  viewerCanReact: () => Field<"viewerCanReact">;

  viewerCanUpdate: () => Field<"viewerCanUpdate">;

  viewerCannotUpdateReasons: () => Field<"viewerCannotUpdateReasons">;

  viewerDidAuthor: () => Field<"viewerDidAuthor">;
}

export const isCommitComment = (
  object: Record<string, any>
): object is Partial<ICommitComment> => {
  return object.__typename === "CommitComment";
};

export const CommitComment: CommitCommentSelector = {
  __typename: () => new Field("__typename"),

  author: (select) =>
    new Field("author", undefined as never, new SelectionSet(select(Actor))),

  authorAssociation: () => new Field("authorAssociation"),
  body: () => new Field("body"),
  bodyHTML: () => new Field("bodyHTML"),
  bodyText: () => new Field("bodyText"),

  commit: (select) =>
    new Field("commit", undefined as never, new SelectionSet(select(Commit))),

  createdAt: () => new Field("createdAt"),
  createdViaEmail: () => new Field("createdViaEmail"),
  databaseId: () => new Field("databaseId"),

  editor: (select) =>
    new Field("editor", undefined as never, new SelectionSet(select(Actor))),

  id: () => new Field("id"),
  includesCreatedEdit: () => new Field("includesCreatedEdit"),
  isMinimized: () => new Field("isMinimized"),
  lastEditedAt: () => new Field("lastEditedAt"),
  minimizedReason: () => new Field("minimizedReason"),
  path: () => new Field("path"),
  position: () => new Field("position"),
  publishedAt: () => new Field("publishedAt"),

  reactionGroups: (select) =>
    new Field(
      "reactionGroups",
      undefined as never,
      new SelectionSet(select(ReactionGroup))
    ),

  reactions: (variables, select) =>
    new Field(
      "reactions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("content", variables.content, ReactionContent),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(ReactionConnection))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),

  userContentEdits: (variables, select) =>
    new Field(
      "userContentEdits",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserContentEditConnection))
    ),

  viewerCanDelete: () => new Field("viewerCanDelete"),
  viewerCanMinimize: () => new Field("viewerCanMinimize"),
  viewerCanReact: () => new Field("viewerCanReact"),
  viewerCanUpdate: () => new Field("viewerCanUpdate"),
  viewerCannotUpdateReasons: () => new Field("viewerCannotUpdateReasons"),
  viewerDidAuthor: () => new Field("viewerDidAuthor"),
};

export interface ICommitCommentConnection {
  edges: ICommitCommentEdge[];
  nodes: ICommitComment[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface CommitCommentConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: CommitCommentEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: CommitCommentSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const CommitCommentConnection: CommitCommentConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(CommitCommentEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(CommitComment))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ICommitCommentEdge {
  cursor: string;
  node: ICommitComment;
}

interface CommitCommentEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: CommitCommentSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const CommitCommentEdge: CommitCommentEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(CommitComment))
    ),
};

export interface ICommitCommentThread extends INode, IRepositoryNode {
  __typename: "CommitCommentThread";
  comments: ICommitCommentConnection;
  commit: ICommit;
  path: string;
  position: number;
}

interface CommitCommentThreadSelector {
  __typename: () => Field<"__typename">;

  comments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: CommitCommentConnectionSelector) => T
  ) => Field<
    "comments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  commit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"commit", never, SelectionSet<T>>;

  id: () => Field<"id">;

  path: () => Field<"path">;

  position: () => Field<"position">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const isCommitCommentThread = (
  object: Record<string, any>
): object is Partial<ICommitCommentThread> => {
  return object.__typename === "CommitCommentThread";
};

export const CommitCommentThread: CommitCommentThreadSelector = {
  __typename: () => new Field("__typename"),

  comments: (variables, select) =>
    new Field(
      "comments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(CommitCommentConnection))
    ),

  commit: (select) =>
    new Field("commit", undefined as never, new SelectionSet(select(Commit))),

  id: () => new Field("id"),
  path: () => new Field("path"),
  position: () => new Field("position"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface ICommitConnection {
  edges: ICommitEdge[];
  nodes: ICommit[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface CommitConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: CommitEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const CommitConnection: CommitConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(CommitEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(Commit))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ICommitContributionsByRepository {
  contributions: ICreatedCommitContributionConnection;
  repository: IRepository;
  resourcePath: unknown;
  url: unknown;
}

interface CommitContributionsByRepositorySelector {
  __typename: () => Field<"__typename">;

  contributions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | CommitContributionOrder;
    },
    select: (t: CreatedCommitContributionConnectionSelector) => T
  ) => Field<
    "contributions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | CommitContributionOrder>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;
}

export const CommitContributionsByRepository: CommitContributionsByRepositorySelector = {
  __typename: () => new Field("__typename"),

  contributions: (variables, select) =>
    new Field(
      "contributions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(CreatedCommitContributionConnection))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),
};

export interface ICommitEdge {
  cursor: string;
  node: ICommit;
}

interface CommitEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const CommitEdge: CommitEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Commit))),
};

export interface ICommitHistoryConnection {
  edges: ICommitEdge[];
  nodes: ICommit[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface CommitHistoryConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: CommitEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const CommitHistoryConnection: CommitHistoryConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(CommitEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(Commit))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IConnectedEvent extends INode {
  __typename: "ConnectedEvent";
  actor: IActor;
  createdAt: unknown;
  isCrossRepository: boolean;
  source: IReferencedSubject;
  subject: IReferencedSubject;
}

interface ConnectedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  isCrossRepository: () => Field<"isCrossRepository">;

  source: <T extends Array<Selection>>(
    select: (t: ReferencedSubjectSelector) => T
  ) => Field<"source", never, SelectionSet<T>>;

  subject: <T extends Array<Selection>>(
    select: (t: ReferencedSubjectSelector) => T
  ) => Field<"subject", never, SelectionSet<T>>;
}

export const isConnectedEvent = (
  object: Record<string, any>
): object is Partial<IConnectedEvent> => {
  return object.__typename === "ConnectedEvent";
};

export const ConnectedEvent: ConnectedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  isCrossRepository: () => new Field("isCrossRepository"),

  source: (select) =>
    new Field(
      "source",
      undefined as never,
      new SelectionSet(select(ReferencedSubject))
    ),

  subject: (select) =>
    new Field(
      "subject",
      undefined as never,
      new SelectionSet(select(ReferencedSubject))
    ),
};

export interface IContribution {
  __typename: string;
  isRestricted: boolean;
  occurredAt: unknown;
  resourcePath: unknown;
  url: unknown;
  user: IUser;
}

interface ContributionSelector {
  __typename: () => Field<"__typename">;

  isRestricted: () => Field<"isRestricted">;

  occurredAt: () => Field<"occurredAt">;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  on: <
    T extends Array<Selection>,
    F extends
      | "CreatedCommitContribution"
      | "CreatedIssueContribution"
      | "CreatedPullRequestContribution"
      | "CreatedPullRequestReviewContribution"
      | "CreatedRepositoryContribution"
      | "JoinedGitHubContribution"
      | "RestrictedContribution"
  >(
    type: F,
    select: (
      t: F extends "CreatedCommitContribution"
        ? CreatedCommitContributionSelector
        : F extends "CreatedIssueContribution"
        ? CreatedIssueContributionSelector
        : F extends "CreatedPullRequestContribution"
        ? CreatedPullRequestContributionSelector
        : F extends "CreatedPullRequestReviewContribution"
        ? CreatedPullRequestReviewContributionSelector
        : F extends "CreatedRepositoryContribution"
        ? CreatedRepositoryContributionSelector
        : F extends "JoinedGitHubContribution"
        ? JoinedGitHubContributionSelector
        : F extends "RestrictedContribution"
        ? RestrictedContributionSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Contribution: ContributionSelector = {
  __typename: () => new Field("__typename"),

  isRestricted: () => new Field("isRestricted"),
  occurredAt: () => new Field("occurredAt"),
  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  on: (type, select) => {
    switch (type) {
      case "CreatedCommitContribution": {
        return new InlineFragment(
          new NamedType("CreatedCommitContribution") as any,
          new SelectionSet(select(CreatedCommitContribution as any))
        );
      }

      case "CreatedIssueContribution": {
        return new InlineFragment(
          new NamedType("CreatedIssueContribution") as any,
          new SelectionSet(select(CreatedIssueContribution as any))
        );
      }

      case "CreatedPullRequestContribution": {
        return new InlineFragment(
          new NamedType("CreatedPullRequestContribution") as any,
          new SelectionSet(select(CreatedPullRequestContribution as any))
        );
      }

      case "CreatedPullRequestReviewContribution": {
        return new InlineFragment(
          new NamedType("CreatedPullRequestReviewContribution") as any,
          new SelectionSet(select(CreatedPullRequestReviewContribution as any))
        );
      }

      case "CreatedRepositoryContribution": {
        return new InlineFragment(
          new NamedType("CreatedRepositoryContribution") as any,
          new SelectionSet(select(CreatedRepositoryContribution as any))
        );
      }

      case "JoinedGitHubContribution": {
        return new InlineFragment(
          new NamedType("JoinedGitHubContribution") as any,
          new SelectionSet(select(JoinedGitHubContribution as any))
        );
      }

      case "RestrictedContribution": {
        return new InlineFragment(
          new NamedType("RestrictedContribution") as any,
          new SelectionSet(select(RestrictedContribution as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IContributionCalendar {
  colors: string[];
  isHalloween: boolean;
  months: IContributionCalendarMonth[];
  totalContributions: number;
  weeks: IContributionCalendarWeek[];
}

interface ContributionCalendarSelector {
  __typename: () => Field<"__typename">;

  colors: () => Field<"colors">;

  isHalloween: () => Field<"isHalloween">;

  months: <T extends Array<Selection>>(
    select: (t: ContributionCalendarMonthSelector) => T
  ) => Field<"months", never, SelectionSet<T>>;

  totalContributions: () => Field<"totalContributions">;

  weeks: <T extends Array<Selection>>(
    select: (t: ContributionCalendarWeekSelector) => T
  ) => Field<"weeks", never, SelectionSet<T>>;
}

export const ContributionCalendar: ContributionCalendarSelector = {
  __typename: () => new Field("__typename"),

  colors: () => new Field("colors"),
  isHalloween: () => new Field("isHalloween"),

  months: (select) =>
    new Field(
      "months",
      undefined as never,
      new SelectionSet(select(ContributionCalendarMonth))
    ),

  totalContributions: () => new Field("totalContributions"),

  weeks: (select) =>
    new Field(
      "weeks",
      undefined as never,
      new SelectionSet(select(ContributionCalendarWeek))
    ),
};

export interface IContributionCalendarDay {
  color: string;
  contributionCount: number;
  date: unknown;
  weekday: number;
}

interface ContributionCalendarDaySelector {
  __typename: () => Field<"__typename">;

  color: () => Field<"color">;

  contributionCount: () => Field<"contributionCount">;

  date: () => Field<"date">;

  weekday: () => Field<"weekday">;
}

export const ContributionCalendarDay: ContributionCalendarDaySelector = {
  __typename: () => new Field("__typename"),

  color: () => new Field("color"),
  contributionCount: () => new Field("contributionCount"),
  date: () => new Field("date"),
  weekday: () => new Field("weekday"),
};

export interface IContributionCalendarMonth {
  firstDay: unknown;
  name: string;
  totalWeeks: number;
  year: number;
}

interface ContributionCalendarMonthSelector {
  __typename: () => Field<"__typename">;

  firstDay: () => Field<"firstDay">;

  name: () => Field<"name">;

  totalWeeks: () => Field<"totalWeeks">;

  year: () => Field<"year">;
}

export const ContributionCalendarMonth: ContributionCalendarMonthSelector = {
  __typename: () => new Field("__typename"),

  firstDay: () => new Field("firstDay"),
  name: () => new Field("name"),
  totalWeeks: () => new Field("totalWeeks"),
  year: () => new Field("year"),
};

export interface IContributionCalendarWeek {
  contributionDays: IContributionCalendarDay[];
  firstDay: unknown;
}

interface ContributionCalendarWeekSelector {
  __typename: () => Field<"__typename">;

  contributionDays: <T extends Array<Selection>>(
    select: (t: ContributionCalendarDaySelector) => T
  ) => Field<"contributionDays", never, SelectionSet<T>>;

  firstDay: () => Field<"firstDay">;
}

export const ContributionCalendarWeek: ContributionCalendarWeekSelector = {
  __typename: () => new Field("__typename"),

  contributionDays: (select) =>
    new Field(
      "contributionDays",
      undefined as never,
      new SelectionSet(select(ContributionCalendarDay))
    ),

  firstDay: () => new Field("firstDay"),
};

export interface IContributionsCollection {
  commitContributionsByRepository: ICommitContributionsByRepository[];
  contributionCalendar: IContributionCalendar;
  contributionYears: number[];
  doesEndInCurrentMonth: boolean;
  earliestRestrictedContributionDate: unknown;
  endedAt: unknown;
  firstIssueContribution: ICreatedIssueOrRestrictedContribution;
  firstPullRequestContribution: ICreatedPullRequestOrRestrictedContribution;
  firstRepositoryContribution: ICreatedRepositoryOrRestrictedContribution;
  hasActivityInThePast: boolean;
  hasAnyContributions: boolean;
  hasAnyRestrictedContributions: boolean;
  isSingleDay: boolean;
  issueContributions: ICreatedIssueContributionConnection;
  issueContributionsByRepository: IIssueContributionsByRepository[];
  joinedGitHubContribution: IJoinedGitHubContribution;
  latestRestrictedContributionDate: unknown;
  mostRecentCollectionWithActivity: IContributionsCollection;
  mostRecentCollectionWithoutActivity: IContributionsCollection;
  popularIssueContribution: ICreatedIssueContribution;
  popularPullRequestContribution: ICreatedPullRequestContribution;
  pullRequestContributions: ICreatedPullRequestContributionConnection;
  pullRequestContributionsByRepository: IPullRequestContributionsByRepository[];
  pullRequestReviewContributions: ICreatedPullRequestReviewContributionConnection;
  pullRequestReviewContributionsByRepository: IPullRequestReviewContributionsByRepository[];
  repositoryContributions: ICreatedRepositoryContributionConnection;
  restrictedContributionsCount: number;
  startedAt: unknown;
  totalCommitContributions: number;
  totalIssueContributions: number;
  totalPullRequestContributions: number;
  totalPullRequestReviewContributions: number;
  totalRepositoriesWithContributedCommits: number;
  totalRepositoriesWithContributedIssues: number;
  totalRepositoriesWithContributedPullRequestReviews: number;
  totalRepositoriesWithContributedPullRequests: number;
  totalRepositoryContributions: number;
  user: IUser;
}

interface ContributionsCollectionSelector {
  __typename: () => Field<"__typename">;

  commitContributionsByRepository: <T extends Array<Selection>>(
    variables: { maxRepositories?: Variable<"maxRepositories"> | number },
    select: (t: CommitContributionsByRepositorySelector) => T
  ) => Field<
    "commitContributionsByRepository",
    [Argument<"maxRepositories", Variable<"maxRepositories"> | number>],
    SelectionSet<T>
  >;

  contributionCalendar: <T extends Array<Selection>>(
    select: (t: ContributionCalendarSelector) => T
  ) => Field<"contributionCalendar", never, SelectionSet<T>>;

  contributionYears: () => Field<"contributionYears">;

  doesEndInCurrentMonth: () => Field<"doesEndInCurrentMonth">;

  earliestRestrictedContributionDate: () => Field<"earliestRestrictedContributionDate">;

  endedAt: () => Field<"endedAt">;

  firstIssueContribution: <T extends Array<Selection>>(
    select: (t: CreatedIssueOrRestrictedContributionSelector) => T
  ) => Field<"firstIssueContribution", never, SelectionSet<T>>;

  firstPullRequestContribution: <T extends Array<Selection>>(
    select: (t: CreatedPullRequestOrRestrictedContributionSelector) => T
  ) => Field<"firstPullRequestContribution", never, SelectionSet<T>>;

  firstRepositoryContribution: <T extends Array<Selection>>(
    select: (t: CreatedRepositoryOrRestrictedContributionSelector) => T
  ) => Field<"firstRepositoryContribution", never, SelectionSet<T>>;

  hasActivityInThePast: () => Field<"hasActivityInThePast">;

  hasAnyContributions: () => Field<"hasAnyContributions">;

  hasAnyRestrictedContributions: () => Field<"hasAnyRestrictedContributions">;

  isSingleDay: () => Field<"isSingleDay">;

  issueContributions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      excludeFirst?: Variable<"excludeFirst"> | boolean;
      excludePopular?: Variable<"excludePopular"> | boolean;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ContributionOrder;
    },
    select: (t: CreatedIssueContributionConnectionSelector) => T
  ) => Field<
    "issueContributions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"excludeFirst", Variable<"excludeFirst"> | boolean>,
      Argument<"excludePopular", Variable<"excludePopular"> | boolean>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ContributionOrder>
    ],
    SelectionSet<T>
  >;

  issueContributionsByRepository: <T extends Array<Selection>>(
    variables: {
      excludeFirst?: Variable<"excludeFirst"> | boolean;
      excludePopular?: Variable<"excludePopular"> | boolean;
      maxRepositories?: Variable<"maxRepositories"> | number;
    },
    select: (t: IssueContributionsByRepositorySelector) => T
  ) => Field<
    "issueContributionsByRepository",
    [
      Argument<"excludeFirst", Variable<"excludeFirst"> | boolean>,
      Argument<"excludePopular", Variable<"excludePopular"> | boolean>,
      Argument<"maxRepositories", Variable<"maxRepositories"> | number>
    ],
    SelectionSet<T>
  >;

  joinedGitHubContribution: <T extends Array<Selection>>(
    select: (t: JoinedGitHubContributionSelector) => T
  ) => Field<"joinedGitHubContribution", never, SelectionSet<T>>;

  latestRestrictedContributionDate: () => Field<"latestRestrictedContributionDate">;

  mostRecentCollectionWithActivity: <T extends Array<Selection>>(
    select: (t: ContributionsCollectionSelector) => T
  ) => Field<"mostRecentCollectionWithActivity", never, SelectionSet<T>>;

  mostRecentCollectionWithoutActivity: <T extends Array<Selection>>(
    select: (t: ContributionsCollectionSelector) => T
  ) => Field<"mostRecentCollectionWithoutActivity", never, SelectionSet<T>>;

  popularIssueContribution: <T extends Array<Selection>>(
    select: (t: CreatedIssueContributionSelector) => T
  ) => Field<"popularIssueContribution", never, SelectionSet<T>>;

  popularPullRequestContribution: <T extends Array<Selection>>(
    select: (t: CreatedPullRequestContributionSelector) => T
  ) => Field<"popularPullRequestContribution", never, SelectionSet<T>>;

  pullRequestContributions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      excludeFirst?: Variable<"excludeFirst"> | boolean;
      excludePopular?: Variable<"excludePopular"> | boolean;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ContributionOrder;
    },
    select: (t: CreatedPullRequestContributionConnectionSelector) => T
  ) => Field<
    "pullRequestContributions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"excludeFirst", Variable<"excludeFirst"> | boolean>,
      Argument<"excludePopular", Variable<"excludePopular"> | boolean>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ContributionOrder>
    ],
    SelectionSet<T>
  >;

  pullRequestContributionsByRepository: <T extends Array<Selection>>(
    variables: {
      excludeFirst?: Variable<"excludeFirst"> | boolean;
      excludePopular?: Variable<"excludePopular"> | boolean;
      maxRepositories?: Variable<"maxRepositories"> | number;
    },
    select: (t: PullRequestContributionsByRepositorySelector) => T
  ) => Field<
    "pullRequestContributionsByRepository",
    [
      Argument<"excludeFirst", Variable<"excludeFirst"> | boolean>,
      Argument<"excludePopular", Variable<"excludePopular"> | boolean>,
      Argument<"maxRepositories", Variable<"maxRepositories"> | number>
    ],
    SelectionSet<T>
  >;

  pullRequestReviewContributions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ContributionOrder;
    },
    select: (t: CreatedPullRequestReviewContributionConnectionSelector) => T
  ) => Field<
    "pullRequestReviewContributions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ContributionOrder>
    ],
    SelectionSet<T>
  >;

  pullRequestReviewContributionsByRepository: <T extends Array<Selection>>(
    variables: { maxRepositories?: Variable<"maxRepositories"> | number },
    select: (t: PullRequestReviewContributionsByRepositorySelector) => T
  ) => Field<
    "pullRequestReviewContributionsByRepository",
    [Argument<"maxRepositories", Variable<"maxRepositories"> | number>],
    SelectionSet<T>
  >;

  repositoryContributions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      excludeFirst?: Variable<"excludeFirst"> | boolean;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ContributionOrder;
    },
    select: (t: CreatedRepositoryContributionConnectionSelector) => T
  ) => Field<
    "repositoryContributions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"excludeFirst", Variable<"excludeFirst"> | boolean>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ContributionOrder>
    ],
    SelectionSet<T>
  >;

  restrictedContributionsCount: () => Field<"restrictedContributionsCount">;

  startedAt: () => Field<"startedAt">;

  totalCommitContributions: () => Field<"totalCommitContributions">;

  totalIssueContributions: (variables: {
    excludeFirst: unknown;
    excludePopular: unknown;
  }) => Field<"totalIssueContributions", [/* @todo */]>;

  totalPullRequestContributions: (variables: {
    excludeFirst: unknown;
    excludePopular: unknown;
  }) => Field<"totalPullRequestContributions", [/* @todo */]>;

  totalPullRequestReviewContributions: () => Field<"totalPullRequestReviewContributions">;

  totalRepositoriesWithContributedCommits: () => Field<"totalRepositoriesWithContributedCommits">;

  totalRepositoriesWithContributedIssues: (variables: {
    excludeFirst: unknown;
    excludePopular: unknown;
  }) => Field<"totalRepositoriesWithContributedIssues", [/* @todo */]>;

  totalRepositoriesWithContributedPullRequestReviews: () => Field<"totalRepositoriesWithContributedPullRequestReviews">;

  totalRepositoriesWithContributedPullRequests: (variables: {
    excludeFirst: unknown;
    excludePopular: unknown;
  }) => Field<"totalRepositoriesWithContributedPullRequests", [/* @todo */]>;

  totalRepositoryContributions: (variables: {
    excludeFirst: unknown;
  }) => Field<"totalRepositoryContributions", [/* @todo */]>;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const ContributionsCollection: ContributionsCollectionSelector = {
  __typename: () => new Field("__typename"),

  commitContributionsByRepository: (variables, select) =>
    new Field(
      "commitContributionsByRepository",
      [new Argument("maxRepositories", variables.maxRepositories)],
      new SelectionSet(select(CommitContributionsByRepository))
    ),

  contributionCalendar: (select) =>
    new Field(
      "contributionCalendar",
      undefined as never,
      new SelectionSet(select(ContributionCalendar))
    ),

  contributionYears: () => new Field("contributionYears"),
  doesEndInCurrentMonth: () => new Field("doesEndInCurrentMonth"),
  earliestRestrictedContributionDate: () =>
    new Field("earliestRestrictedContributionDate"),
  endedAt: () => new Field("endedAt"),

  firstIssueContribution: (select) =>
    new Field(
      "firstIssueContribution",
      undefined as never,
      new SelectionSet(select(CreatedIssueOrRestrictedContribution))
    ),

  firstPullRequestContribution: (select) =>
    new Field(
      "firstPullRequestContribution",
      undefined as never,
      new SelectionSet(select(CreatedPullRequestOrRestrictedContribution))
    ),

  firstRepositoryContribution: (select) =>
    new Field(
      "firstRepositoryContribution",
      undefined as never,
      new SelectionSet(select(CreatedRepositoryOrRestrictedContribution))
    ),

  hasActivityInThePast: () => new Field("hasActivityInThePast"),
  hasAnyContributions: () => new Field("hasAnyContributions"),
  hasAnyRestrictedContributions: () =>
    new Field("hasAnyRestrictedContributions"),
  isSingleDay: () => new Field("isSingleDay"),

  issueContributions: (variables, select) =>
    new Field(
      "issueContributions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("excludeFirst", variables.excludeFirst),
        new Argument("excludePopular", variables.excludePopular),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(CreatedIssueContributionConnection))
    ),

  issueContributionsByRepository: (variables, select) =>
    new Field(
      "issueContributionsByRepository",
      [
        new Argument("excludeFirst", variables.excludeFirst),
        new Argument("excludePopular", variables.excludePopular),
        new Argument("maxRepositories", variables.maxRepositories),
      ],
      new SelectionSet(select(IssueContributionsByRepository))
    ),

  joinedGitHubContribution: (select) =>
    new Field(
      "joinedGitHubContribution",
      undefined as never,
      new SelectionSet(select(JoinedGitHubContribution))
    ),

  latestRestrictedContributionDate: () =>
    new Field("latestRestrictedContributionDate"),

  mostRecentCollectionWithActivity: (select) =>
    new Field(
      "mostRecentCollectionWithActivity",
      undefined as never,
      new SelectionSet(select(ContributionsCollection))
    ),

  mostRecentCollectionWithoutActivity: (select) =>
    new Field(
      "mostRecentCollectionWithoutActivity",
      undefined as never,
      new SelectionSet(select(ContributionsCollection))
    ),

  popularIssueContribution: (select) =>
    new Field(
      "popularIssueContribution",
      undefined as never,
      new SelectionSet(select(CreatedIssueContribution))
    ),

  popularPullRequestContribution: (select) =>
    new Field(
      "popularPullRequestContribution",
      undefined as never,
      new SelectionSet(select(CreatedPullRequestContribution))
    ),

  pullRequestContributions: (variables, select) =>
    new Field(
      "pullRequestContributions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("excludeFirst", variables.excludeFirst),
        new Argument("excludePopular", variables.excludePopular),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(CreatedPullRequestContributionConnection))
    ),

  pullRequestContributionsByRepository: (variables, select) =>
    new Field(
      "pullRequestContributionsByRepository",
      [
        new Argument("excludeFirst", variables.excludeFirst),
        new Argument("excludePopular", variables.excludePopular),
        new Argument("maxRepositories", variables.maxRepositories),
      ],
      new SelectionSet(select(PullRequestContributionsByRepository))
    ),

  pullRequestReviewContributions: (variables, select) =>
    new Field(
      "pullRequestReviewContributions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(CreatedPullRequestReviewContributionConnection))
    ),

  pullRequestReviewContributionsByRepository: (variables, select) =>
    new Field(
      "pullRequestReviewContributionsByRepository",
      [new Argument("maxRepositories", variables.maxRepositories)],
      new SelectionSet(select(PullRequestReviewContributionsByRepository))
    ),

  repositoryContributions: (variables, select) =>
    new Field(
      "repositoryContributions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("excludeFirst", variables.excludeFirst),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(CreatedRepositoryContributionConnection))
    ),

  restrictedContributionsCount: () => new Field("restrictedContributionsCount"),
  startedAt: () => new Field("startedAt"),
  totalCommitContributions: () => new Field("totalCommitContributions"),
  totalIssueContributions: (variables) => new Field("totalIssueContributions"),
  totalPullRequestContributions: (variables) =>
    new Field("totalPullRequestContributions"),
  totalPullRequestReviewContributions: () =>
    new Field("totalPullRequestReviewContributions"),
  totalRepositoriesWithContributedCommits: () =>
    new Field("totalRepositoriesWithContributedCommits"),
  totalRepositoriesWithContributedIssues: (variables) =>
    new Field("totalRepositoriesWithContributedIssues"),
  totalRepositoriesWithContributedPullRequestReviews: () =>
    new Field("totalRepositoriesWithContributedPullRequestReviews"),
  totalRepositoriesWithContributedPullRequests: (variables) =>
    new Field("totalRepositoriesWithContributedPullRequests"),
  totalRepositoryContributions: (variables) =>
    new Field("totalRepositoryContributions"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface IConvertProjectCardNoteToIssuePayload {
  clientMutationId: string;
  projectCard: IProjectCard;
}

interface ConvertProjectCardNoteToIssuePayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  projectCard: <T extends Array<Selection>>(
    select: (t: ProjectCardSelector) => T
  ) => Field<"projectCard", never, SelectionSet<T>>;
}

export const ConvertProjectCardNoteToIssuePayload: ConvertProjectCardNoteToIssuePayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  projectCard: (select) =>
    new Field(
      "projectCard",
      undefined as never,
      new SelectionSet(select(ProjectCard))
    ),
};

export interface IConvertToDraftEvent extends INode, IUniformResourceLocatable {
  __typename: "ConvertToDraftEvent";
  actor: IActor;
  createdAt: unknown;
  pullRequest: IPullRequest;
}

interface ConvertToDraftEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;
}

export const isConvertToDraftEvent = (
  object: Record<string, any>
): object is Partial<IConvertToDraftEvent> => {
  return object.__typename === "ConvertToDraftEvent";
};

export const ConvertToDraftEvent: ConvertToDraftEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),
};

export interface IConvertedNoteToIssueEvent extends INode {
  __typename: "ConvertedNoteToIssueEvent";
  actor: IActor;
  createdAt: unknown;
  databaseId: number;
}

interface ConvertedNoteToIssueEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;
}

export const isConvertedNoteToIssueEvent = (
  object: Record<string, any>
): object is Partial<IConvertedNoteToIssueEvent> => {
  return object.__typename === "ConvertedNoteToIssueEvent";
};

export const ConvertedNoteToIssueEvent: ConvertedNoteToIssueEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),
};

export interface ICreateBranchProtectionRulePayload {
  branchProtectionRule: IBranchProtectionRule;
  clientMutationId: string;
}

interface CreateBranchProtectionRulePayloadSelector {
  __typename: () => Field<"__typename">;

  branchProtectionRule: <T extends Array<Selection>>(
    select: (t: BranchProtectionRuleSelector) => T
  ) => Field<"branchProtectionRule", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;
}

export const CreateBranchProtectionRulePayload: CreateBranchProtectionRulePayloadSelector = {
  __typename: () => new Field("__typename"),

  branchProtectionRule: (select) =>
    new Field(
      "branchProtectionRule",
      undefined as never,
      new SelectionSet(select(BranchProtectionRule))
    ),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface ICreateCheckRunPayload {
  checkRun: ICheckRun;
  clientMutationId: string;
}

interface CreateCheckRunPayloadSelector {
  __typename: () => Field<"__typename">;

  checkRun: <T extends Array<Selection>>(
    select: (t: CheckRunSelector) => T
  ) => Field<"checkRun", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;
}

export const CreateCheckRunPayload: CreateCheckRunPayloadSelector = {
  __typename: () => new Field("__typename"),

  checkRun: (select) =>
    new Field(
      "checkRun",
      undefined as never,
      new SelectionSet(select(CheckRun))
    ),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface ICreateCheckSuitePayload {
  checkSuite: ICheckSuite;
  clientMutationId: string;
}

interface CreateCheckSuitePayloadSelector {
  __typename: () => Field<"__typename">;

  checkSuite: <T extends Array<Selection>>(
    select: (t: CheckSuiteSelector) => T
  ) => Field<"checkSuite", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;
}

export const CreateCheckSuitePayload: CreateCheckSuitePayloadSelector = {
  __typename: () => new Field("__typename"),

  checkSuite: (select) =>
    new Field(
      "checkSuite",
      undefined as never,
      new SelectionSet(select(CheckSuite))
    ),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface ICreateEnterpriseOrganizationPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  organization: IOrganization;
}

interface CreateEnterpriseOrganizationPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;
}

export const CreateEnterpriseOrganizationPayload: CreateEnterpriseOrganizationPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),
};

export interface ICreateIpAllowListEntryPayload {
  clientMutationId: string;
  ipAllowListEntry: IIpAllowListEntry;
}

interface CreateIpAllowListEntryPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  ipAllowListEntry: <T extends Array<Selection>>(
    select: (t: IpAllowListEntrySelector) => T
  ) => Field<"ipAllowListEntry", never, SelectionSet<T>>;
}

export const CreateIpAllowListEntryPayload: CreateIpAllowListEntryPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  ipAllowListEntry: (select) =>
    new Field(
      "ipAllowListEntry",
      undefined as never,
      new SelectionSet(select(IpAllowListEntry))
    ),
};

export interface ICreateIssuePayload {
  clientMutationId: string;
  issue: IIssue;
}

interface CreateIssuePayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  issue: <T extends Array<Selection>>(
    select: (t: IssueSelector) => T
  ) => Field<"issue", never, SelectionSet<T>>;
}

export const CreateIssuePayload: CreateIssuePayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  issue: (select) =>
    new Field("issue", undefined as never, new SelectionSet(select(Issue))),
};

export interface ICreateProjectPayload {
  clientMutationId: string;
  project: IProject;
}

interface CreateProjectPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  project: <T extends Array<Selection>>(
    select: (t: ProjectSelector) => T
  ) => Field<"project", never, SelectionSet<T>>;
}

export const CreateProjectPayload: CreateProjectPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  project: (select) =>
    new Field("project", undefined as never, new SelectionSet(select(Project))),
};

export interface ICreatePullRequestPayload {
  clientMutationId: string;
  pullRequest: IPullRequest;
}

interface CreatePullRequestPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const CreatePullRequestPayload: CreatePullRequestPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface ICreateRefPayload {
  clientMutationId: string;
  ref: IRef;
}

interface CreateRefPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  ref: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"ref", never, SelectionSet<T>>;
}

export const CreateRefPayload: CreateRefPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  ref: (select) =>
    new Field("ref", undefined as never, new SelectionSet(select(Ref))),
};

export interface ICreateRepositoryPayload {
  clientMutationId: string;
  repository: IRepository;
}

interface CreateRepositoryPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const CreateRepositoryPayload: CreateRepositoryPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface ICreateTeamDiscussionCommentPayload {
  clientMutationId: string;
  teamDiscussionComment: ITeamDiscussionComment;
}

interface CreateTeamDiscussionCommentPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  teamDiscussionComment: <T extends Array<Selection>>(
    select: (t: TeamDiscussionCommentSelector) => T
  ) => Field<"teamDiscussionComment", never, SelectionSet<T>>;
}

export const CreateTeamDiscussionCommentPayload: CreateTeamDiscussionCommentPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  teamDiscussionComment: (select) =>
    new Field(
      "teamDiscussionComment",
      undefined as never,
      new SelectionSet(select(TeamDiscussionComment))
    ),
};

export interface ICreateTeamDiscussionPayload {
  clientMutationId: string;
  teamDiscussion: ITeamDiscussion;
}

interface CreateTeamDiscussionPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  teamDiscussion: <T extends Array<Selection>>(
    select: (t: TeamDiscussionSelector) => T
  ) => Field<"teamDiscussion", never, SelectionSet<T>>;
}

export const CreateTeamDiscussionPayload: CreateTeamDiscussionPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  teamDiscussion: (select) =>
    new Field(
      "teamDiscussion",
      undefined as never,
      new SelectionSet(select(TeamDiscussion))
    ),
};

export interface ICreatedCommitContribution extends IContribution {
  __typename: "CreatedCommitContribution";
  commitCount: number;
  repository: IRepository;
}

interface CreatedCommitContributionSelector {
  __typename: () => Field<"__typename">;

  commitCount: () => Field<"commitCount">;

  isRestricted: () => Field<"isRestricted">;

  occurredAt: () => Field<"occurredAt">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const isCreatedCommitContribution = (
  object: Record<string, any>
): object is Partial<ICreatedCommitContribution> => {
  return object.__typename === "CreatedCommitContribution";
};

export const CreatedCommitContribution: CreatedCommitContributionSelector = {
  __typename: () => new Field("__typename"),

  commitCount: () => new Field("commitCount"),
  isRestricted: () => new Field("isRestricted"),
  occurredAt: () => new Field("occurredAt"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface ICreatedCommitContributionConnection {
  edges: ICreatedCommitContributionEdge[];
  nodes: ICreatedCommitContribution[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface CreatedCommitContributionConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: CreatedCommitContributionEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: CreatedCommitContributionSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const CreatedCommitContributionConnection: CreatedCommitContributionConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(CreatedCommitContributionEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(CreatedCommitContribution))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ICreatedCommitContributionEdge {
  cursor: string;
  node: ICreatedCommitContribution;
}

interface CreatedCommitContributionEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: CreatedCommitContributionSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const CreatedCommitContributionEdge: CreatedCommitContributionEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(CreatedCommitContribution))
    ),
};

export interface ICreatedIssueContribution extends IContribution {
  __typename: "CreatedIssueContribution";
  issue: IIssue;
}

interface CreatedIssueContributionSelector {
  __typename: () => Field<"__typename">;

  isRestricted: () => Field<"isRestricted">;

  issue: <T extends Array<Selection>>(
    select: (t: IssueSelector) => T
  ) => Field<"issue", never, SelectionSet<T>>;

  occurredAt: () => Field<"occurredAt">;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const isCreatedIssueContribution = (
  object: Record<string, any>
): object is Partial<ICreatedIssueContribution> => {
  return object.__typename === "CreatedIssueContribution";
};

export const CreatedIssueContribution: CreatedIssueContributionSelector = {
  __typename: () => new Field("__typename"),

  isRestricted: () => new Field("isRestricted"),

  issue: (select) =>
    new Field("issue", undefined as never, new SelectionSet(select(Issue))),

  occurredAt: () => new Field("occurredAt"),
  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface ICreatedIssueContributionConnection {
  edges: ICreatedIssueContributionEdge[];
  nodes: ICreatedIssueContribution[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface CreatedIssueContributionConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: CreatedIssueContributionEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: CreatedIssueContributionSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const CreatedIssueContributionConnection: CreatedIssueContributionConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(CreatedIssueContributionEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(CreatedIssueContribution))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ICreatedIssueContributionEdge {
  cursor: string;
  node: ICreatedIssueContribution;
}

interface CreatedIssueContributionEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: CreatedIssueContributionSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const CreatedIssueContributionEdge: CreatedIssueContributionEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(CreatedIssueContribution))
    ),
};

export interface ICreatedPullRequestContribution extends IContribution {
  __typename: "CreatedPullRequestContribution";
  pullRequest: IPullRequest;
}

interface CreatedPullRequestContributionSelector {
  __typename: () => Field<"__typename">;

  isRestricted: () => Field<"isRestricted">;

  occurredAt: () => Field<"occurredAt">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const isCreatedPullRequestContribution = (
  object: Record<string, any>
): object is Partial<ICreatedPullRequestContribution> => {
  return object.__typename === "CreatedPullRequestContribution";
};

export const CreatedPullRequestContribution: CreatedPullRequestContributionSelector = {
  __typename: () => new Field("__typename"),

  isRestricted: () => new Field("isRestricted"),
  occurredAt: () => new Field("occurredAt"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface ICreatedPullRequestContributionConnection {
  edges: ICreatedPullRequestContributionEdge[];
  nodes: ICreatedPullRequestContribution[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface CreatedPullRequestContributionConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: CreatedPullRequestContributionEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: CreatedPullRequestContributionSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const CreatedPullRequestContributionConnection: CreatedPullRequestContributionConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(CreatedPullRequestContributionEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(CreatedPullRequestContribution))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ICreatedPullRequestContributionEdge {
  cursor: string;
  node: ICreatedPullRequestContribution;
}

interface CreatedPullRequestContributionEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: CreatedPullRequestContributionSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const CreatedPullRequestContributionEdge: CreatedPullRequestContributionEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(CreatedPullRequestContribution))
    ),
};

export interface ICreatedPullRequestReviewContribution extends IContribution {
  __typename: "CreatedPullRequestReviewContribution";
  pullRequest: IPullRequest;
  pullRequestReview: IPullRequestReview;
  repository: IRepository;
}

interface CreatedPullRequestReviewContributionSelector {
  __typename: () => Field<"__typename">;

  isRestricted: () => Field<"isRestricted">;

  occurredAt: () => Field<"occurredAt">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  pullRequestReview: <T extends Array<Selection>>(
    select: (t: PullRequestReviewSelector) => T
  ) => Field<"pullRequestReview", never, SelectionSet<T>>;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const isCreatedPullRequestReviewContribution = (
  object: Record<string, any>
): object is Partial<ICreatedPullRequestReviewContribution> => {
  return object.__typename === "CreatedPullRequestReviewContribution";
};

export const CreatedPullRequestReviewContribution: CreatedPullRequestReviewContributionSelector = {
  __typename: () => new Field("__typename"),

  isRestricted: () => new Field("isRestricted"),
  occurredAt: () => new Field("occurredAt"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  pullRequestReview: (select) =>
    new Field(
      "pullRequestReview",
      undefined as never,
      new SelectionSet(select(PullRequestReview))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface ICreatedPullRequestReviewContributionConnection {
  edges: ICreatedPullRequestReviewContributionEdge[];
  nodes: ICreatedPullRequestReviewContribution[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface CreatedPullRequestReviewContributionConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: CreatedPullRequestReviewContributionEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: CreatedPullRequestReviewContributionSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const CreatedPullRequestReviewContributionConnection: CreatedPullRequestReviewContributionConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(CreatedPullRequestReviewContributionEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(CreatedPullRequestReviewContribution))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ICreatedPullRequestReviewContributionEdge {
  cursor: string;
  node: ICreatedPullRequestReviewContribution;
}

interface CreatedPullRequestReviewContributionEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: CreatedPullRequestReviewContributionSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const CreatedPullRequestReviewContributionEdge: CreatedPullRequestReviewContributionEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(CreatedPullRequestReviewContribution))
    ),
};

export interface ICreatedRepositoryContribution extends IContribution {
  __typename: "CreatedRepositoryContribution";
  repository: IRepository;
}

interface CreatedRepositoryContributionSelector {
  __typename: () => Field<"__typename">;

  isRestricted: () => Field<"isRestricted">;

  occurredAt: () => Field<"occurredAt">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const isCreatedRepositoryContribution = (
  object: Record<string, any>
): object is Partial<ICreatedRepositoryContribution> => {
  return object.__typename === "CreatedRepositoryContribution";
};

export const CreatedRepositoryContribution: CreatedRepositoryContributionSelector = {
  __typename: () => new Field("__typename"),

  isRestricted: () => new Field("isRestricted"),
  occurredAt: () => new Field("occurredAt"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface ICreatedRepositoryContributionConnection {
  edges: ICreatedRepositoryContributionEdge[];
  nodes: ICreatedRepositoryContribution[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface CreatedRepositoryContributionConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: CreatedRepositoryContributionEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: CreatedRepositoryContributionSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const CreatedRepositoryContributionConnection: CreatedRepositoryContributionConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(CreatedRepositoryContributionEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(CreatedRepositoryContribution))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ICreatedRepositoryContributionEdge {
  cursor: string;
  node: ICreatedRepositoryContribution;
}

interface CreatedRepositoryContributionEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: CreatedRepositoryContributionSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const CreatedRepositoryContributionEdge: CreatedRepositoryContributionEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(CreatedRepositoryContribution))
    ),
};

export interface ICrossReferencedEvent
  extends INode,
    IUniformResourceLocatable {
  __typename: "CrossReferencedEvent";
  actor: IActor;
  createdAt: unknown;
  isCrossRepository: boolean;
  referencedAt: unknown;
  source: IReferencedSubject;
  target: IReferencedSubject;
  willCloseTarget: boolean;
}

interface CrossReferencedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  isCrossRepository: () => Field<"isCrossRepository">;

  referencedAt: () => Field<"referencedAt">;

  resourcePath: () => Field<"resourcePath">;

  source: <T extends Array<Selection>>(
    select: (t: ReferencedSubjectSelector) => T
  ) => Field<"source", never, SelectionSet<T>>;

  target: <T extends Array<Selection>>(
    select: (t: ReferencedSubjectSelector) => T
  ) => Field<"target", never, SelectionSet<T>>;

  url: () => Field<"url">;

  willCloseTarget: () => Field<"willCloseTarget">;
}

export const isCrossReferencedEvent = (
  object: Record<string, any>
): object is Partial<ICrossReferencedEvent> => {
  return object.__typename === "CrossReferencedEvent";
};

export const CrossReferencedEvent: CrossReferencedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  isCrossRepository: () => new Field("isCrossRepository"),
  referencedAt: () => new Field("referencedAt"),
  resourcePath: () => new Field("resourcePath"),

  source: (select) =>
    new Field(
      "source",
      undefined as never,
      new SelectionSet(select(ReferencedSubject))
    ),

  target: (select) =>
    new Field(
      "target",
      undefined as never,
      new SelectionSet(select(ReferencedSubject))
    ),

  url: () => new Field("url"),
  willCloseTarget: () => new Field("willCloseTarget"),
};

export interface IDeclineTopicSuggestionPayload {
  clientMutationId: string;
  topic: ITopic;
}

interface DeclineTopicSuggestionPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  topic: <T extends Array<Selection>>(
    select: (t: TopicSelector) => T
  ) => Field<"topic", never, SelectionSet<T>>;
}

export const DeclineTopicSuggestionPayload: DeclineTopicSuggestionPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  topic: (select) =>
    new Field("topic", undefined as never, new SelectionSet(select(Topic))),
};

export interface IDeletable {
  __typename: string;
  viewerCanDelete: boolean;
}

interface DeletableSelector {
  __typename: () => Field<"__typename">;

  viewerCanDelete: () => Field<"viewerCanDelete">;

  on: <
    T extends Array<Selection>,
    F extends
      | "CommitComment"
      | "GistComment"
      | "IssueComment"
      | "PullRequestReview"
      | "PullRequestReviewComment"
      | "TeamDiscussion"
      | "TeamDiscussionComment"
  >(
    type: F,
    select: (
      t: F extends "CommitComment"
        ? CommitCommentSelector
        : F extends "GistComment"
        ? GistCommentSelector
        : F extends "IssueComment"
        ? IssueCommentSelector
        : F extends "PullRequestReview"
        ? PullRequestReviewSelector
        : F extends "PullRequestReviewComment"
        ? PullRequestReviewCommentSelector
        : F extends "TeamDiscussion"
        ? TeamDiscussionSelector
        : F extends "TeamDiscussionComment"
        ? TeamDiscussionCommentSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Deletable: DeletableSelector = {
  __typename: () => new Field("__typename"),

  viewerCanDelete: () => new Field("viewerCanDelete"),

  on: (type, select) => {
    switch (type) {
      case "CommitComment": {
        return new InlineFragment(
          new NamedType("CommitComment") as any,
          new SelectionSet(select(CommitComment as any))
        );
      }

      case "GistComment": {
        return new InlineFragment(
          new NamedType("GistComment") as any,
          new SelectionSet(select(GistComment as any))
        );
      }

      case "IssueComment": {
        return new InlineFragment(
          new NamedType("IssueComment") as any,
          new SelectionSet(select(IssueComment as any))
        );
      }

      case "PullRequestReview": {
        return new InlineFragment(
          new NamedType("PullRequestReview") as any,
          new SelectionSet(select(PullRequestReview as any))
        );
      }

      case "PullRequestReviewComment": {
        return new InlineFragment(
          new NamedType("PullRequestReviewComment") as any,
          new SelectionSet(select(PullRequestReviewComment as any))
        );
      }

      case "TeamDiscussion": {
        return new InlineFragment(
          new NamedType("TeamDiscussion") as any,
          new SelectionSet(select(TeamDiscussion as any))
        );
      }

      case "TeamDiscussionComment": {
        return new InlineFragment(
          new NamedType("TeamDiscussionComment") as any,
          new SelectionSet(select(TeamDiscussionComment as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IDeleteBranchProtectionRulePayload {
  clientMutationId: string;
}

interface DeleteBranchProtectionRulePayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;
}

export const DeleteBranchProtectionRulePayload: DeleteBranchProtectionRulePayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface IDeleteDeploymentPayload {
  clientMutationId: string;
}

interface DeleteDeploymentPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;
}

export const DeleteDeploymentPayload: DeleteDeploymentPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface IDeleteIpAllowListEntryPayload {
  clientMutationId: string;
  ipAllowListEntry: IIpAllowListEntry;
}

interface DeleteIpAllowListEntryPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  ipAllowListEntry: <T extends Array<Selection>>(
    select: (t: IpAllowListEntrySelector) => T
  ) => Field<"ipAllowListEntry", never, SelectionSet<T>>;
}

export const DeleteIpAllowListEntryPayload: DeleteIpAllowListEntryPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  ipAllowListEntry: (select) =>
    new Field(
      "ipAllowListEntry",
      undefined as never,
      new SelectionSet(select(IpAllowListEntry))
    ),
};

export interface IDeleteIssueCommentPayload {
  clientMutationId: string;
}

interface DeleteIssueCommentPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;
}

export const DeleteIssueCommentPayload: DeleteIssueCommentPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface IDeleteIssuePayload {
  clientMutationId: string;
  repository: IRepository;
}

interface DeleteIssuePayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const DeleteIssuePayload: DeleteIssuePayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface IDeleteProjectCardPayload {
  clientMutationId: string;
  column: IProjectColumn;
  deletedCardId: string;
}

interface DeleteProjectCardPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  column: <T extends Array<Selection>>(
    select: (t: ProjectColumnSelector) => T
  ) => Field<"column", never, SelectionSet<T>>;

  deletedCardId: () => Field<"deletedCardId">;
}

export const DeleteProjectCardPayload: DeleteProjectCardPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  column: (select) =>
    new Field(
      "column",
      undefined as never,
      new SelectionSet(select(ProjectColumn))
    ),

  deletedCardId: () => new Field("deletedCardId"),
};

export interface IDeleteProjectColumnPayload {
  clientMutationId: string;
  deletedColumnId: string;
  project: IProject;
}

interface DeleteProjectColumnPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  deletedColumnId: () => Field<"deletedColumnId">;

  project: <T extends Array<Selection>>(
    select: (t: ProjectSelector) => T
  ) => Field<"project", never, SelectionSet<T>>;
}

export const DeleteProjectColumnPayload: DeleteProjectColumnPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),
  deletedColumnId: () => new Field("deletedColumnId"),

  project: (select) =>
    new Field("project", undefined as never, new SelectionSet(select(Project))),
};

export interface IDeleteProjectPayload {
  clientMutationId: string;
  owner: IProjectOwner;
}

interface DeleteProjectPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  owner: <T extends Array<Selection>>(
    select: (t: ProjectOwnerSelector) => T
  ) => Field<"owner", never, SelectionSet<T>>;
}

export const DeleteProjectPayload: DeleteProjectPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  owner: (select) =>
    new Field(
      "owner",
      undefined as never,
      new SelectionSet(select(ProjectOwner))
    ),
};

export interface IDeletePullRequestReviewCommentPayload {
  clientMutationId: string;
  pullRequestReview: IPullRequestReview;
}

interface DeletePullRequestReviewCommentPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequestReview: <T extends Array<Selection>>(
    select: (t: PullRequestReviewSelector) => T
  ) => Field<"pullRequestReview", never, SelectionSet<T>>;
}

export const DeletePullRequestReviewCommentPayload: DeletePullRequestReviewCommentPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequestReview: (select) =>
    new Field(
      "pullRequestReview",
      undefined as never,
      new SelectionSet(select(PullRequestReview))
    ),
};

export interface IDeletePullRequestReviewPayload {
  clientMutationId: string;
  pullRequestReview: IPullRequestReview;
}

interface DeletePullRequestReviewPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequestReview: <T extends Array<Selection>>(
    select: (t: PullRequestReviewSelector) => T
  ) => Field<"pullRequestReview", never, SelectionSet<T>>;
}

export const DeletePullRequestReviewPayload: DeletePullRequestReviewPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequestReview: (select) =>
    new Field(
      "pullRequestReview",
      undefined as never,
      new SelectionSet(select(PullRequestReview))
    ),
};

export interface IDeleteRefPayload {
  clientMutationId: string;
}

interface DeleteRefPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;
}

export const DeleteRefPayload: DeleteRefPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface IDeleteTeamDiscussionCommentPayload {
  clientMutationId: string;
}

interface DeleteTeamDiscussionCommentPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;
}

export const DeleteTeamDiscussionCommentPayload: DeleteTeamDiscussionCommentPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface IDeleteTeamDiscussionPayload {
  clientMutationId: string;
}

interface DeleteTeamDiscussionPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;
}

export const DeleteTeamDiscussionPayload: DeleteTeamDiscussionPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface IDemilestonedEvent extends INode {
  __typename: "DemilestonedEvent";
  actor: IActor;
  createdAt: unknown;
  milestoneTitle: string;
  subject: IMilestoneItem;
}

interface DemilestonedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  milestoneTitle: () => Field<"milestoneTitle">;

  subject: <T extends Array<Selection>>(
    select: (t: MilestoneItemSelector) => T
  ) => Field<"subject", never, SelectionSet<T>>;
}

export const isDemilestonedEvent = (
  object: Record<string, any>
): object is Partial<IDemilestonedEvent> => {
  return object.__typename === "DemilestonedEvent";
};

export const DemilestonedEvent: DemilestonedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  milestoneTitle: () => new Field("milestoneTitle"),

  subject: (select) =>
    new Field(
      "subject",
      undefined as never,
      new SelectionSet(select(MilestoneItem))
    ),
};

export interface IDeployKey extends INode {
  __typename: "DeployKey";
  createdAt: unknown;
  key: string;
  readOnly: boolean;
  title: string;
  verified: boolean;
}

interface DeployKeySelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  key: () => Field<"key">;

  readOnly: () => Field<"readOnly">;

  title: () => Field<"title">;

  verified: () => Field<"verified">;
}

export const isDeployKey = (
  object: Record<string, any>
): object is Partial<IDeployKey> => {
  return object.__typename === "DeployKey";
};

export const DeployKey: DeployKeySelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  key: () => new Field("key"),
  readOnly: () => new Field("readOnly"),
  title: () => new Field("title"),
  verified: () => new Field("verified"),
};

export interface IDeployKeyConnection {
  edges: IDeployKeyEdge[];
  nodes: IDeployKey[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface DeployKeyConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: DeployKeyEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: DeployKeySelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const DeployKeyConnection: DeployKeyConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(DeployKeyEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(DeployKey))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IDeployKeyEdge {
  cursor: string;
  node: IDeployKey;
}

interface DeployKeyEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: DeployKeySelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const DeployKeyEdge: DeployKeyEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(DeployKey))),
};

export interface IDeployedEvent extends INode {
  __typename: "DeployedEvent";
  actor: IActor;
  createdAt: unknown;
  databaseId: number;
  deployment: IDeployment;
  pullRequest: IPullRequest;
  ref: IRef;
}

interface DeployedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  deployment: <T extends Array<Selection>>(
    select: (t: DeploymentSelector) => T
  ) => Field<"deployment", never, SelectionSet<T>>;

  id: () => Field<"id">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  ref: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"ref", never, SelectionSet<T>>;
}

export const isDeployedEvent = (
  object: Record<string, any>
): object is Partial<IDeployedEvent> => {
  return object.__typename === "DeployedEvent";
};

export const DeployedEvent: DeployedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),

  deployment: (select) =>
    new Field(
      "deployment",
      undefined as never,
      new SelectionSet(select(Deployment))
    ),

  id: () => new Field("id"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  ref: (select) =>
    new Field("ref", undefined as never, new SelectionSet(select(Ref))),
};

export interface IDeployment extends INode {
  __typename: "Deployment";
  commit: ICommit;
  commitOid: string;
  createdAt: unknown;
  creator: IActor;
  databaseId: number;
  description: string;
  environment: string;
  latestEnvironment: string;
  latestStatus: IDeploymentStatus;
  originalEnvironment: string;
  payload: string;
  ref: IRef;
  repository: IRepository;
  state: DeploymentState;
  statuses: IDeploymentStatusConnection;
  task: string;
  updatedAt: unknown;
}

interface DeploymentSelector {
  __typename: () => Field<"__typename">;

  commit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"commit", never, SelectionSet<T>>;

  commitOid: () => Field<"commitOid">;

  createdAt: () => Field<"createdAt">;

  creator: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"creator", never, SelectionSet<T>>;

  databaseId: () => Field<"databaseId">;

  description: () => Field<"description">;

  environment: () => Field<"environment">;

  id: () => Field<"id">;

  latestEnvironment: () => Field<"latestEnvironment">;

  latestStatus: <T extends Array<Selection>>(
    select: (t: DeploymentStatusSelector) => T
  ) => Field<"latestStatus", never, SelectionSet<T>>;

  originalEnvironment: () => Field<"originalEnvironment">;

  payload: () => Field<"payload">;

  ref: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"ref", never, SelectionSet<T>>;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  state: () => Field<"state">;

  statuses: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: DeploymentStatusConnectionSelector) => T
  ) => Field<
    "statuses",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  task: () => Field<"task">;

  updatedAt: () => Field<"updatedAt">;
}

export const isDeployment = (
  object: Record<string, any>
): object is Partial<IDeployment> => {
  return object.__typename === "Deployment";
};

export const Deployment: DeploymentSelector = {
  __typename: () => new Field("__typename"),

  commit: (select) =>
    new Field("commit", undefined as never, new SelectionSet(select(Commit))),

  commitOid: () => new Field("commitOid"),
  createdAt: () => new Field("createdAt"),

  creator: (select) =>
    new Field("creator", undefined as never, new SelectionSet(select(Actor))),

  databaseId: () => new Field("databaseId"),
  description: () => new Field("description"),
  environment: () => new Field("environment"),
  id: () => new Field("id"),
  latestEnvironment: () => new Field("latestEnvironment"),

  latestStatus: (select) =>
    new Field(
      "latestStatus",
      undefined as never,
      new SelectionSet(select(DeploymentStatus))
    ),

  originalEnvironment: () => new Field("originalEnvironment"),
  payload: () => new Field("payload"),

  ref: (select) =>
    new Field("ref", undefined as never, new SelectionSet(select(Ref))),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  state: () => new Field("state"),

  statuses: (variables, select) =>
    new Field(
      "statuses",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(DeploymentStatusConnection))
    ),

  task: () => new Field("task"),
  updatedAt: () => new Field("updatedAt"),
};

export interface IDeploymentConnection {
  edges: IDeploymentEdge[];
  nodes: IDeployment[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface DeploymentConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: DeploymentEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: DeploymentSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const DeploymentConnection: DeploymentConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(DeploymentEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(Deployment))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IDeploymentEdge {
  cursor: string;
  node: IDeployment;
}

interface DeploymentEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: DeploymentSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const DeploymentEdge: DeploymentEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Deployment))),
};

export interface IDeploymentEnvironmentChangedEvent extends INode {
  __typename: "DeploymentEnvironmentChangedEvent";
  actor: IActor;
  createdAt: unknown;
  deploymentStatus: IDeploymentStatus;
  pullRequest: IPullRequest;
}

interface DeploymentEnvironmentChangedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  deploymentStatus: <T extends Array<Selection>>(
    select: (t: DeploymentStatusSelector) => T
  ) => Field<"deploymentStatus", never, SelectionSet<T>>;

  id: () => Field<"id">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const isDeploymentEnvironmentChangedEvent = (
  object: Record<string, any>
): object is Partial<IDeploymentEnvironmentChangedEvent> => {
  return object.__typename === "DeploymentEnvironmentChangedEvent";
};

export const DeploymentEnvironmentChangedEvent: DeploymentEnvironmentChangedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),

  deploymentStatus: (select) =>
    new Field(
      "deploymentStatus",
      undefined as never,
      new SelectionSet(select(DeploymentStatus))
    ),

  id: () => new Field("id"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IDeploymentStatus extends INode {
  __typename: "DeploymentStatus";
  createdAt: unknown;
  creator: IActor;
  deployment: IDeployment;
  description: string;
  environmentUrl: unknown;
  logUrl: unknown;
  state: DeploymentStatusState;
  updatedAt: unknown;
}

interface DeploymentStatusSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  creator: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"creator", never, SelectionSet<T>>;

  deployment: <T extends Array<Selection>>(
    select: (t: DeploymentSelector) => T
  ) => Field<"deployment", never, SelectionSet<T>>;

  description: () => Field<"description">;

  environmentUrl: () => Field<"environmentUrl">;

  id: () => Field<"id">;

  logUrl: () => Field<"logUrl">;

  state: () => Field<"state">;

  updatedAt: () => Field<"updatedAt">;
}

export const isDeploymentStatus = (
  object: Record<string, any>
): object is Partial<IDeploymentStatus> => {
  return object.__typename === "DeploymentStatus";
};

export const DeploymentStatus: DeploymentStatusSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),

  creator: (select) =>
    new Field("creator", undefined as never, new SelectionSet(select(Actor))),

  deployment: (select) =>
    new Field(
      "deployment",
      undefined as never,
      new SelectionSet(select(Deployment))
    ),

  description: () => new Field("description"),
  environmentUrl: () => new Field("environmentUrl"),
  id: () => new Field("id"),
  logUrl: () => new Field("logUrl"),
  state: () => new Field("state"),
  updatedAt: () => new Field("updatedAt"),
};

export interface IDeploymentStatusConnection {
  edges: IDeploymentStatusEdge[];
  nodes: IDeploymentStatus[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface DeploymentStatusConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: DeploymentStatusEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: DeploymentStatusSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const DeploymentStatusConnection: DeploymentStatusConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(DeploymentStatusEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(DeploymentStatus))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IDeploymentStatusEdge {
  cursor: string;
  node: IDeploymentStatus;
}

interface DeploymentStatusEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: DeploymentStatusSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const DeploymentStatusEdge: DeploymentStatusEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(DeploymentStatus))
    ),
};

export interface IDisconnectedEvent extends INode {
  __typename: "DisconnectedEvent";
  actor: IActor;
  createdAt: unknown;
  isCrossRepository: boolean;
  source: IReferencedSubject;
  subject: IReferencedSubject;
}

interface DisconnectedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  isCrossRepository: () => Field<"isCrossRepository">;

  source: <T extends Array<Selection>>(
    select: (t: ReferencedSubjectSelector) => T
  ) => Field<"source", never, SelectionSet<T>>;

  subject: <T extends Array<Selection>>(
    select: (t: ReferencedSubjectSelector) => T
  ) => Field<"subject", never, SelectionSet<T>>;
}

export const isDisconnectedEvent = (
  object: Record<string, any>
): object is Partial<IDisconnectedEvent> => {
  return object.__typename === "DisconnectedEvent";
};

export const DisconnectedEvent: DisconnectedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  isCrossRepository: () => new Field("isCrossRepository"),

  source: (select) =>
    new Field(
      "source",
      undefined as never,
      new SelectionSet(select(ReferencedSubject))
    ),

  subject: (select) =>
    new Field(
      "subject",
      undefined as never,
      new SelectionSet(select(ReferencedSubject))
    ),
};

export interface IDismissPullRequestReviewPayload {
  clientMutationId: string;
  pullRequestReview: IPullRequestReview;
}

interface DismissPullRequestReviewPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequestReview: <T extends Array<Selection>>(
    select: (t: PullRequestReviewSelector) => T
  ) => Field<"pullRequestReview", never, SelectionSet<T>>;
}

export const DismissPullRequestReviewPayload: DismissPullRequestReviewPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequestReview: (select) =>
    new Field(
      "pullRequestReview",
      undefined as never,
      new SelectionSet(select(PullRequestReview))
    ),
};

export interface IEnterprise extends INode {
  __typename: "Enterprise";
  avatarUrl: unknown;
  billingInfo: IEnterpriseBillingInfo;
  createdAt: unknown;
  databaseId: number;
  description: string;
  descriptionHTML: unknown;
  location: string;
  members: IEnterpriseMemberConnection;
  name: string;
  organizations: IOrganizationConnection;
  ownerInfo: IEnterpriseOwnerInfo;
  resourcePath: unknown;
  slug: string;
  url: unknown;
  userAccounts: IEnterpriseUserAccountConnection;
  viewerIsAdmin: boolean;
  websiteUrl: unknown;
}

interface EnterpriseSelector {
  __typename: () => Field<"__typename">;

  avatarUrl: (variables: {
    size: unknown;
  }) => Field<"avatarUrl", [/* @todo */]>;

  billingInfo: <T extends Array<Selection>>(
    select: (t: EnterpriseBillingInfoSelector) => T
  ) => Field<"billingInfo", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  description: () => Field<"description">;

  descriptionHTML: () => Field<"descriptionHTML">;

  id: () => Field<"id">;

  location: () => Field<"location">;

  members: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      deployment?: Variable<"deployment"> | EnterpriseUserDeployment;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | EnterpriseMemberOrder;
      organizationLogins?: Variable<"organizationLogins"> | string;
      query?: Variable<"query"> | string;
      role?: Variable<"role"> | EnterpriseUserAccountMembershipRole;
    },
    select: (t: EnterpriseMemberConnectionSelector) => T
  ) => Field<
    "members",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"deployment", Variable<"deployment"> | EnterpriseUserDeployment>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | EnterpriseMemberOrder>,
      Argument<"organizationLogins", Variable<"organizationLogins"> | string>,
      Argument<"query", Variable<"query"> | string>,
      Argument<"role", Variable<"role"> | EnterpriseUserAccountMembershipRole>
    ],
    SelectionSet<T>
  >;

  name: () => Field<"name">;

  organizations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      query?: Variable<"query"> | string;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "organizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"query", Variable<"query"> | string>
    ],
    SelectionSet<T>
  >;

  ownerInfo: <T extends Array<Selection>>(
    select: (t: EnterpriseOwnerInfoSelector) => T
  ) => Field<"ownerInfo", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  slug: () => Field<"slug">;

  url: () => Field<"url">;

  userAccounts: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: EnterpriseUserAccountConnectionSelector) => T
  ) => Field<
    "userAccounts",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  viewerIsAdmin: () => Field<"viewerIsAdmin">;

  websiteUrl: () => Field<"websiteUrl">;
}

export const isEnterprise = (
  object: Record<string, any>
): object is Partial<IEnterprise> => {
  return object.__typename === "Enterprise";
};

export const Enterprise: EnterpriseSelector = {
  __typename: () => new Field("__typename"),

  avatarUrl: (variables) => new Field("avatarUrl"),

  billingInfo: (select) =>
    new Field(
      "billingInfo",
      undefined as never,
      new SelectionSet(select(EnterpriseBillingInfo))
    ),

  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  description: () => new Field("description"),
  descriptionHTML: () => new Field("descriptionHTML"),
  id: () => new Field("id"),
  location: () => new Field("location"),

  members: (variables, select) =>
    new Field(
      "members",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument(
          "deployment",
          variables.deployment,
          EnterpriseUserDeployment
        ),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("organizationLogins", variables.organizationLogins),
        new Argument("query", variables.query),
        new Argument(
          "role",
          variables.role,
          EnterpriseUserAccountMembershipRole
        ),
      ],
      new SelectionSet(select(EnterpriseMemberConnection))
    ),

  name: () => new Field("name"),

  organizations: (variables, select) =>
    new Field(
      "organizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("query", variables.query),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  ownerInfo: (select) =>
    new Field(
      "ownerInfo",
      undefined as never,
      new SelectionSet(select(EnterpriseOwnerInfo))
    ),

  resourcePath: () => new Field("resourcePath"),
  slug: () => new Field("slug"),
  url: () => new Field("url"),

  userAccounts: (variables, select) =>
    new Field(
      "userAccounts",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(EnterpriseUserAccountConnection))
    ),

  viewerIsAdmin: () => new Field("viewerIsAdmin"),
  websiteUrl: () => new Field("websiteUrl"),
};

export interface IEnterpriseAdministratorConnection {
  edges: IEnterpriseAdministratorEdge[];
  nodes: IUser[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface EnterpriseAdministratorConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: EnterpriseAdministratorEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const EnterpriseAdministratorConnection: EnterpriseAdministratorConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(EnterpriseAdministratorEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(User))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IEnterpriseAdministratorEdge {
  cursor: string;
  node: IUser;
  role: EnterpriseAdministratorRole;
}

interface EnterpriseAdministratorEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;

  role: () => Field<"role">;
}

export const EnterpriseAdministratorEdge: EnterpriseAdministratorEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(User))),

  role: () => new Field("role"),
};

export interface IEnterpriseAdministratorInvitation extends INode {
  __typename: "EnterpriseAdministratorInvitation";
  createdAt: unknown;
  email: string;
  enterprise: IEnterprise;
  invitee: IUser;
  inviter: IUser;
  role: EnterpriseAdministratorRole;
}

interface EnterpriseAdministratorInvitationSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  email: () => Field<"email">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  id: () => Field<"id">;

  invitee: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"invitee", never, SelectionSet<T>>;

  inviter: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"inviter", never, SelectionSet<T>>;

  role: () => Field<"role">;
}

export const isEnterpriseAdministratorInvitation = (
  object: Record<string, any>
): object is Partial<IEnterpriseAdministratorInvitation> => {
  return object.__typename === "EnterpriseAdministratorInvitation";
};

export const EnterpriseAdministratorInvitation: EnterpriseAdministratorInvitationSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),
  email: () => new Field("email"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  id: () => new Field("id"),

  invitee: (select) =>
    new Field("invitee", undefined as never, new SelectionSet(select(User))),

  inviter: (select) =>
    new Field("inviter", undefined as never, new SelectionSet(select(User))),

  role: () => new Field("role"),
};

export interface IEnterpriseAdministratorInvitationConnection {
  edges: IEnterpriseAdministratorInvitationEdge[];
  nodes: IEnterpriseAdministratorInvitation[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface EnterpriseAdministratorInvitationConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: EnterpriseAdministratorInvitationEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: EnterpriseAdministratorInvitationSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const EnterpriseAdministratorInvitationConnection: EnterpriseAdministratorInvitationConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(EnterpriseAdministratorInvitationEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(EnterpriseAdministratorInvitation))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IEnterpriseAdministratorInvitationEdge {
  cursor: string;
  node: IEnterpriseAdministratorInvitation;
}

interface EnterpriseAdministratorInvitationEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: EnterpriseAdministratorInvitationSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const EnterpriseAdministratorInvitationEdge: EnterpriseAdministratorInvitationEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(EnterpriseAdministratorInvitation))
    ),
};

export interface IEnterpriseAuditEntryData {
  __typename: string;
  enterpriseResourcePath: unknown;
  enterpriseSlug: string;
  enterpriseUrl: unknown;
}

interface EnterpriseAuditEntryDataSelector {
  __typename: () => Field<"__typename">;

  enterpriseResourcePath: () => Field<"enterpriseResourcePath">;

  enterpriseSlug: () => Field<"enterpriseSlug">;

  enterpriseUrl: () => Field<"enterpriseUrl">;

  on: <
    T extends Array<Selection>,
    F extends
      | "MembersCanDeleteReposClearAuditEntry"
      | "MembersCanDeleteReposDisableAuditEntry"
      | "MembersCanDeleteReposEnableAuditEntry"
      | "OrgInviteToBusinessAuditEntry"
      | "PrivateRepositoryForkingDisableAuditEntry"
      | "PrivateRepositoryForkingEnableAuditEntry"
      | "RepositoryVisibilityChangeDisableAuditEntry"
      | "RepositoryVisibilityChangeEnableAuditEntry"
  >(
    type: F,
    select: (
      t: F extends "MembersCanDeleteReposClearAuditEntry"
        ? MembersCanDeleteReposClearAuditEntrySelector
        : F extends "MembersCanDeleteReposDisableAuditEntry"
        ? MembersCanDeleteReposDisableAuditEntrySelector
        : F extends "MembersCanDeleteReposEnableAuditEntry"
        ? MembersCanDeleteReposEnableAuditEntrySelector
        : F extends "OrgInviteToBusinessAuditEntry"
        ? OrgInviteToBusinessAuditEntrySelector
        : F extends "PrivateRepositoryForkingDisableAuditEntry"
        ? PrivateRepositoryForkingDisableAuditEntrySelector
        : F extends "PrivateRepositoryForkingEnableAuditEntry"
        ? PrivateRepositoryForkingEnableAuditEntrySelector
        : F extends "RepositoryVisibilityChangeDisableAuditEntry"
        ? RepositoryVisibilityChangeDisableAuditEntrySelector
        : F extends "RepositoryVisibilityChangeEnableAuditEntry"
        ? RepositoryVisibilityChangeEnableAuditEntrySelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const EnterpriseAuditEntryData: EnterpriseAuditEntryDataSelector = {
  __typename: () => new Field("__typename"),

  enterpriseResourcePath: () => new Field("enterpriseResourcePath"),
  enterpriseSlug: () => new Field("enterpriseSlug"),
  enterpriseUrl: () => new Field("enterpriseUrl"),

  on: (type, select) => {
    switch (type) {
      case "MembersCanDeleteReposClearAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposClearAuditEntry") as any,
          new SelectionSet(select(MembersCanDeleteReposClearAuditEntry as any))
        );
      }

      case "MembersCanDeleteReposDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposDisableAuditEntry") as any,
          new SelectionSet(
            select(MembersCanDeleteReposDisableAuditEntry as any)
          )
        );
      }

      case "MembersCanDeleteReposEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposEnableAuditEntry") as any,
          new SelectionSet(select(MembersCanDeleteReposEnableAuditEntry as any))
        );
      }

      case "OrgInviteToBusinessAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgInviteToBusinessAuditEntry") as any,
          new SelectionSet(select(OrgInviteToBusinessAuditEntry as any))
        );
      }

      case "PrivateRepositoryForkingDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("PrivateRepositoryForkingDisableAuditEntry") as any,
          new SelectionSet(
            select(PrivateRepositoryForkingDisableAuditEntry as any)
          )
        );
      }

      case "PrivateRepositoryForkingEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("PrivateRepositoryForkingEnableAuditEntry") as any,
          new SelectionSet(
            select(PrivateRepositoryForkingEnableAuditEntry as any)
          )
        );
      }

      case "RepositoryVisibilityChangeDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("RepositoryVisibilityChangeDisableAuditEntry") as any,
          new SelectionSet(
            select(RepositoryVisibilityChangeDisableAuditEntry as any)
          )
        );
      }

      case "RepositoryVisibilityChangeEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("RepositoryVisibilityChangeEnableAuditEntry") as any,
          new SelectionSet(
            select(RepositoryVisibilityChangeEnableAuditEntry as any)
          )
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IEnterpriseBillingInfo {
  allLicensableUsersCount: number;
  assetPacks: number;
  availableSeats: number;
  bandwidthQuota: number;
  bandwidthUsage: number;
  bandwidthUsagePercentage: number;
  seats: number;
  storageQuota: number;
  storageUsage: number;
  storageUsagePercentage: number;
  totalAvailableLicenses: number;
  totalLicenses: number;
}

interface EnterpriseBillingInfoSelector {
  __typename: () => Field<"__typename">;

  allLicensableUsersCount: () => Field<"allLicensableUsersCount">;

  assetPacks: () => Field<"assetPacks">;

  /**
   * @deprecated `availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.
   */

  availableSeats: () => Field<"availableSeats">;

  bandwidthQuota: () => Field<"bandwidthQuota">;

  bandwidthUsage: () => Field<"bandwidthUsage">;

  bandwidthUsagePercentage: () => Field<"bandwidthUsagePercentage">;

  /**
   * @deprecated `seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.
   */

  seats: () => Field<"seats">;

  storageQuota: () => Field<"storageQuota">;

  storageUsage: () => Field<"storageUsage">;

  storageUsagePercentage: () => Field<"storageUsagePercentage">;

  totalAvailableLicenses: () => Field<"totalAvailableLicenses">;

  totalLicenses: () => Field<"totalLicenses">;
}

export const EnterpriseBillingInfo: EnterpriseBillingInfoSelector = {
  __typename: () => new Field("__typename"),

  allLicensableUsersCount: () => new Field("allLicensableUsersCount"),
  assetPacks: () => new Field("assetPacks"),

  /**
   * @deprecated `availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.
   */
  availableSeats: () => new Field("availableSeats"),
  bandwidthQuota: () => new Field("bandwidthQuota"),
  bandwidthUsage: () => new Field("bandwidthUsage"),
  bandwidthUsagePercentage: () => new Field("bandwidthUsagePercentage"),

  /**
   * @deprecated `seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.
   */
  seats: () => new Field("seats"),
  storageQuota: () => new Field("storageQuota"),
  storageUsage: () => new Field("storageUsage"),
  storageUsagePercentage: () => new Field("storageUsagePercentage"),
  totalAvailableLicenses: () => new Field("totalAvailableLicenses"),
  totalLicenses: () => new Field("totalLicenses"),
};

export interface IEnterpriseIdentityProvider extends INode {
  __typename: "EnterpriseIdentityProvider";
  digestMethod: SamlDigestAlgorithm;
  enterprise: IEnterprise;
  externalIdentities: IExternalIdentityConnection;
  idpCertificate: unknown;
  issuer: string;
  recoveryCodes: string[];
  signatureMethod: SamlSignatureAlgorithm;
  ssoUrl: unknown;
}

interface EnterpriseIdentityProviderSelector {
  __typename: () => Field<"__typename">;

  digestMethod: () => Field<"digestMethod">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  externalIdentities: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: ExternalIdentityConnectionSelector) => T
  ) => Field<
    "externalIdentities",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  id: () => Field<"id">;

  idpCertificate: () => Field<"idpCertificate">;

  issuer: () => Field<"issuer">;

  recoveryCodes: () => Field<"recoveryCodes">;

  signatureMethod: () => Field<"signatureMethod">;

  ssoUrl: () => Field<"ssoUrl">;
}

export const isEnterpriseIdentityProvider = (
  object: Record<string, any>
): object is Partial<IEnterpriseIdentityProvider> => {
  return object.__typename === "EnterpriseIdentityProvider";
};

export const EnterpriseIdentityProvider: EnterpriseIdentityProviderSelector = {
  __typename: () => new Field("__typename"),

  digestMethod: () => new Field("digestMethod"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  externalIdentities: (variables, select) =>
    new Field(
      "externalIdentities",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(ExternalIdentityConnection))
    ),

  id: () => new Field("id"),
  idpCertificate: () => new Field("idpCertificate"),
  issuer: () => new Field("issuer"),
  recoveryCodes: () => new Field("recoveryCodes"),
  signatureMethod: () => new Field("signatureMethod"),
  ssoUrl: () => new Field("ssoUrl"),
};

export interface IEnterpriseMemberConnection {
  edges: IEnterpriseMemberEdge[];
  nodes: IEnterpriseMember[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface EnterpriseMemberConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: EnterpriseMemberEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: EnterpriseMemberSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const EnterpriseMemberConnection: EnterpriseMemberConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(EnterpriseMemberEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(EnterpriseMember))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IEnterpriseMemberEdge {
  cursor: string;
  isUnlicensed: boolean;
  node: IEnterpriseMember;
}

interface EnterpriseMemberEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  /**
   * @deprecated All members consume a license Removal on 2021-01-01 UTC.
   */

  isUnlicensed: () => Field<"isUnlicensed">;

  node: <T extends Array<Selection>>(
    select: (t: EnterpriseMemberSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const EnterpriseMemberEdge: EnterpriseMemberEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  /**
   * @deprecated All members consume a license Removal on 2021-01-01 UTC.
   */
  isUnlicensed: () => new Field("isUnlicensed"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(EnterpriseMember))
    ),
};

export interface IEnterpriseOrganizationMembershipConnection {
  edges: IEnterpriseOrganizationMembershipEdge[];
  nodes: IOrganization[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface EnterpriseOrganizationMembershipConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: EnterpriseOrganizationMembershipEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const EnterpriseOrganizationMembershipConnection: EnterpriseOrganizationMembershipConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(EnterpriseOrganizationMembershipEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IEnterpriseOrganizationMembershipEdge {
  cursor: string;
  node: IOrganization;
  role: EnterpriseUserAccountMembershipRole;
}

interface EnterpriseOrganizationMembershipEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;

  role: () => Field<"role">;
}

export const EnterpriseOrganizationMembershipEdge: EnterpriseOrganizationMembershipEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  role: () => new Field("role"),
};

export interface IEnterpriseOutsideCollaboratorConnection {
  edges: IEnterpriseOutsideCollaboratorEdge[];
  nodes: IUser[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface EnterpriseOutsideCollaboratorConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: EnterpriseOutsideCollaboratorEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const EnterpriseOutsideCollaboratorConnection: EnterpriseOutsideCollaboratorConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(EnterpriseOutsideCollaboratorEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(User))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IEnterpriseOutsideCollaboratorEdge {
  cursor: string;
  isUnlicensed: boolean;
  node: IUser;
  repositories: IEnterpriseRepositoryInfoConnection;
}

interface EnterpriseOutsideCollaboratorEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  /**
   * @deprecated All outside collaborators consume a license Removal on 2021-01-01 UTC.
   */

  isUnlicensed: () => Field<"isUnlicensed">;

  node: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;

  repositories: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | RepositoryOrder;
    },
    select: (t: EnterpriseRepositoryInfoConnectionSelector) => T
  ) => Field<
    "repositories",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | RepositoryOrder>
    ],
    SelectionSet<T>
  >;
}

export const EnterpriseOutsideCollaboratorEdge: EnterpriseOutsideCollaboratorEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  /**
   * @deprecated All outside collaborators consume a license Removal on 2021-01-01 UTC.
   */
  isUnlicensed: () => new Field("isUnlicensed"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(User))),

  repositories: (variables, select) =>
    new Field(
      "repositories",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(EnterpriseRepositoryInfoConnection))
    ),
};

export interface IEnterpriseOwnerInfo {
  admins: IEnterpriseAdministratorConnection;
  affiliatedUsersWithTwoFactorDisabled: IUserConnection;
  affiliatedUsersWithTwoFactorDisabledExist: boolean;
  allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue;
  allowPrivateRepositoryForkingSettingOrganizations: IOrganizationConnection;
  defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue;
  defaultRepositoryPermissionSettingOrganizations: IOrganizationConnection;
  enterpriseServerInstallations: IEnterpriseServerInstallationConnection;
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue;
  ipAllowListEntries: IIpAllowListEntryConnection;
  isUpdatingDefaultRepositoryPermission: boolean;
  isUpdatingTwoFactorRequirement: boolean;
  membersCanChangeRepositoryVisibilitySetting: EnterpriseEnabledDisabledSettingValue;
  membersCanChangeRepositoryVisibilitySettingOrganizations: IOrganizationConnection;
  membersCanCreateInternalRepositoriesSetting: boolean;
  membersCanCreatePrivateRepositoriesSetting: boolean;
  membersCanCreatePublicRepositoriesSetting: boolean;
  membersCanCreateRepositoriesSetting: EnterpriseMembersCanCreateRepositoriesSettingValue;
  membersCanCreateRepositoriesSettingOrganizations: IOrganizationConnection;
  membersCanDeleteIssuesSetting: EnterpriseEnabledDisabledSettingValue;
  membersCanDeleteIssuesSettingOrganizations: IOrganizationConnection;
  membersCanDeleteRepositoriesSetting: EnterpriseEnabledDisabledSettingValue;
  membersCanDeleteRepositoriesSettingOrganizations: IOrganizationConnection;
  membersCanInviteCollaboratorsSetting: EnterpriseEnabledDisabledSettingValue;
  membersCanInviteCollaboratorsSettingOrganizations: IOrganizationConnection;
  membersCanMakePurchasesSetting: EnterpriseMembersCanMakePurchasesSettingValue;
  membersCanUpdateProtectedBranchesSetting: EnterpriseEnabledDisabledSettingValue;
  membersCanUpdateProtectedBranchesSettingOrganizations: IOrganizationConnection;
  membersCanViewDependencyInsightsSetting: EnterpriseEnabledDisabledSettingValue;
  membersCanViewDependencyInsightsSettingOrganizations: IOrganizationConnection;
  organizationProjectsSetting: EnterpriseEnabledDisabledSettingValue;
  organizationProjectsSettingOrganizations: IOrganizationConnection;
  outsideCollaborators: IEnterpriseOutsideCollaboratorConnection;
  pendingAdminInvitations: IEnterpriseAdministratorInvitationConnection;
  pendingCollaboratorInvitations: IRepositoryInvitationConnection;
  pendingCollaborators: IEnterprisePendingCollaboratorConnection;
  pendingMemberInvitations: IEnterprisePendingMemberInvitationConnection;
  repositoryProjectsSetting: EnterpriseEnabledDisabledSettingValue;
  repositoryProjectsSettingOrganizations: IOrganizationConnection;
  samlIdentityProvider: IEnterpriseIdentityProvider;
  samlIdentityProviderSettingOrganizations: IOrganizationConnection;
  teamDiscussionsSetting: EnterpriseEnabledDisabledSettingValue;
  teamDiscussionsSettingOrganizations: IOrganizationConnection;
  twoFactorRequiredSetting: EnterpriseEnabledSettingValue;
  twoFactorRequiredSettingOrganizations: IOrganizationConnection;
}

interface EnterpriseOwnerInfoSelector {
  __typename: () => Field<"__typename">;

  admins: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | EnterpriseMemberOrder;
      query?: Variable<"query"> | string;
      role?: Variable<"role"> | EnterpriseAdministratorRole;
    },
    select: (t: EnterpriseAdministratorConnectionSelector) => T
  ) => Field<
    "admins",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | EnterpriseMemberOrder>,
      Argument<"query", Variable<"query"> | string>,
      Argument<"role", Variable<"role"> | EnterpriseAdministratorRole>
    ],
    SelectionSet<T>
  >;

  affiliatedUsersWithTwoFactorDisabled: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserConnectionSelector) => T
  ) => Field<
    "affiliatedUsersWithTwoFactorDisabled",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  affiliatedUsersWithTwoFactorDisabledExist: () => Field<"affiliatedUsersWithTwoFactorDisabledExist">;

  allowPrivateRepositoryForkingSetting: () => Field<"allowPrivateRepositoryForkingSetting">;

  allowPrivateRepositoryForkingSettingOrganizations: <
    T extends Array<Selection>
  >(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      value?: Variable<"value"> | boolean;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "allowPrivateRepositoryForkingSettingOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"value", Variable<"value"> | boolean>
    ],
    SelectionSet<T>
  >;

  defaultRepositoryPermissionSetting: () => Field<"defaultRepositoryPermissionSetting">;

  defaultRepositoryPermissionSettingOrganizations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      value?: Variable<"value"> | DefaultRepositoryPermissionField;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "defaultRepositoryPermissionSettingOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"value", Variable<"value"> | DefaultRepositoryPermissionField>
    ],
    SelectionSet<T>
  >;

  enterpriseServerInstallations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      connectedOnly?: Variable<"connectedOnly"> | boolean;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | EnterpriseServerInstallationOrder;
    },
    select: (t: EnterpriseServerInstallationConnectionSelector) => T
  ) => Field<
    "enterpriseServerInstallations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"connectedOnly", Variable<"connectedOnly"> | boolean>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<
        "orderBy",
        Variable<"orderBy"> | EnterpriseServerInstallationOrder
      >
    ],
    SelectionSet<T>
  >;

  ipAllowListEnabledSetting: () => Field<"ipAllowListEnabledSetting">;

  ipAllowListEntries: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IpAllowListEntryOrder;
    },
    select: (t: IpAllowListEntryConnectionSelector) => T
  ) => Field<
    "ipAllowListEntries",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IpAllowListEntryOrder>
    ],
    SelectionSet<T>
  >;

  isUpdatingDefaultRepositoryPermission: () => Field<"isUpdatingDefaultRepositoryPermission">;

  isUpdatingTwoFactorRequirement: () => Field<"isUpdatingTwoFactorRequirement">;

  membersCanChangeRepositoryVisibilitySetting: () => Field<"membersCanChangeRepositoryVisibilitySetting">;

  membersCanChangeRepositoryVisibilitySettingOrganizations: <
    T extends Array<Selection>
  >(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      value?: Variable<"value"> | boolean;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "membersCanChangeRepositoryVisibilitySettingOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"value", Variable<"value"> | boolean>
    ],
    SelectionSet<T>
  >;

  membersCanCreateInternalRepositoriesSetting: () => Field<"membersCanCreateInternalRepositoriesSetting">;

  membersCanCreatePrivateRepositoriesSetting: () => Field<"membersCanCreatePrivateRepositoriesSetting">;

  membersCanCreatePublicRepositoriesSetting: () => Field<"membersCanCreatePublicRepositoriesSetting">;

  membersCanCreateRepositoriesSetting: () => Field<"membersCanCreateRepositoriesSetting">;

  membersCanCreateRepositoriesSettingOrganizations: <
    T extends Array<Selection>
  >(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      value?:
        | Variable<"value">
        | OrganizationMembersCanCreateRepositoriesSettingValue;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "membersCanCreateRepositoriesSettingOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<
        "value",
        Variable<"value"> | OrganizationMembersCanCreateRepositoriesSettingValue
      >
    ],
    SelectionSet<T>
  >;

  membersCanDeleteIssuesSetting: () => Field<"membersCanDeleteIssuesSetting">;

  membersCanDeleteIssuesSettingOrganizations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      value?: Variable<"value"> | boolean;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "membersCanDeleteIssuesSettingOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"value", Variable<"value"> | boolean>
    ],
    SelectionSet<T>
  >;

  membersCanDeleteRepositoriesSetting: () => Field<"membersCanDeleteRepositoriesSetting">;

  membersCanDeleteRepositoriesSettingOrganizations: <
    T extends Array<Selection>
  >(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      value?: Variable<"value"> | boolean;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "membersCanDeleteRepositoriesSettingOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"value", Variable<"value"> | boolean>
    ],
    SelectionSet<T>
  >;

  membersCanInviteCollaboratorsSetting: () => Field<"membersCanInviteCollaboratorsSetting">;

  membersCanInviteCollaboratorsSettingOrganizations: <
    T extends Array<Selection>
  >(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      value?: Variable<"value"> | boolean;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "membersCanInviteCollaboratorsSettingOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"value", Variable<"value"> | boolean>
    ],
    SelectionSet<T>
  >;

  membersCanMakePurchasesSetting: () => Field<"membersCanMakePurchasesSetting">;

  membersCanUpdateProtectedBranchesSetting: () => Field<"membersCanUpdateProtectedBranchesSetting">;

  membersCanUpdateProtectedBranchesSettingOrganizations: <
    T extends Array<Selection>
  >(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      value?: Variable<"value"> | boolean;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "membersCanUpdateProtectedBranchesSettingOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"value", Variable<"value"> | boolean>
    ],
    SelectionSet<T>
  >;

  membersCanViewDependencyInsightsSetting: () => Field<"membersCanViewDependencyInsightsSetting">;

  membersCanViewDependencyInsightsSettingOrganizations: <
    T extends Array<Selection>
  >(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      value?: Variable<"value"> | boolean;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "membersCanViewDependencyInsightsSettingOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"value", Variable<"value"> | boolean>
    ],
    SelectionSet<T>
  >;

  organizationProjectsSetting: () => Field<"organizationProjectsSetting">;

  organizationProjectsSettingOrganizations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      value?: Variable<"value"> | boolean;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "organizationProjectsSettingOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"value", Variable<"value"> | boolean>
    ],
    SelectionSet<T>
  >;

  outsideCollaborators: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      login?: Variable<"login"> | string;
      orderBy?: Variable<"orderBy"> | EnterpriseMemberOrder;
      query?: Variable<"query"> | string;
      visibility?: Variable<"visibility"> | RepositoryVisibility;
    },
    select: (t: EnterpriseOutsideCollaboratorConnectionSelector) => T
  ) => Field<
    "outsideCollaborators",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"login", Variable<"login"> | string>,
      Argument<"orderBy", Variable<"orderBy"> | EnterpriseMemberOrder>,
      Argument<"query", Variable<"query"> | string>,
      Argument<"visibility", Variable<"visibility"> | RepositoryVisibility>
    ],
    SelectionSet<T>
  >;

  pendingAdminInvitations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | EnterpriseAdministratorInvitationOrder;
      query?: Variable<"query"> | string;
      role?: Variable<"role"> | EnterpriseAdministratorRole;
    },
    select: (t: EnterpriseAdministratorInvitationConnectionSelector) => T
  ) => Field<
    "pendingAdminInvitations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<
        "orderBy",
        Variable<"orderBy"> | EnterpriseAdministratorInvitationOrder
      >,
      Argument<"query", Variable<"query"> | string>,
      Argument<"role", Variable<"role"> | EnterpriseAdministratorRole>
    ],
    SelectionSet<T>
  >;

  pendingCollaboratorInvitations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | RepositoryInvitationOrder;
      query?: Variable<"query"> | string;
    },
    select: (t: RepositoryInvitationConnectionSelector) => T
  ) => Field<
    "pendingCollaboratorInvitations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | RepositoryInvitationOrder>,
      Argument<"query", Variable<"query"> | string>
    ],
    SelectionSet<T>
  >;

  /**
   * @deprecated Repository invitations can now be associated with an email, not only an invitee. Use the `pendingCollaboratorInvitations` field instead. Removal on 2020-10-01 UTC.
   */

  pendingCollaborators: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | RepositoryInvitationOrder;
      query?: Variable<"query"> | string;
    },
    select: (t: EnterprisePendingCollaboratorConnectionSelector) => T
  ) => Field<
    "pendingCollaborators",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | RepositoryInvitationOrder>,
      Argument<"query", Variable<"query"> | string>
    ],
    SelectionSet<T>
  >;

  pendingMemberInvitations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      query?: Variable<"query"> | string;
    },
    select: (t: EnterprisePendingMemberInvitationConnectionSelector) => T
  ) => Field<
    "pendingMemberInvitations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"query", Variable<"query"> | string>
    ],
    SelectionSet<T>
  >;

  repositoryProjectsSetting: () => Field<"repositoryProjectsSetting">;

  repositoryProjectsSettingOrganizations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      value?: Variable<"value"> | boolean;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "repositoryProjectsSettingOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"value", Variable<"value"> | boolean>
    ],
    SelectionSet<T>
  >;

  samlIdentityProvider: <T extends Array<Selection>>(
    select: (t: EnterpriseIdentityProviderSelector) => T
  ) => Field<"samlIdentityProvider", never, SelectionSet<T>>;

  samlIdentityProviderSettingOrganizations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      value?: Variable<"value"> | IdentityProviderConfigurationState;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "samlIdentityProviderSettingOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"value", Variable<"value"> | IdentityProviderConfigurationState>
    ],
    SelectionSet<T>
  >;

  teamDiscussionsSetting: () => Field<"teamDiscussionsSetting">;

  teamDiscussionsSettingOrganizations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      value?: Variable<"value"> | boolean;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "teamDiscussionsSettingOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"value", Variable<"value"> | boolean>
    ],
    SelectionSet<T>
  >;

  twoFactorRequiredSetting: () => Field<"twoFactorRequiredSetting">;

  twoFactorRequiredSettingOrganizations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      value?: Variable<"value"> | boolean;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "twoFactorRequiredSettingOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"value", Variable<"value"> | boolean>
    ],
    SelectionSet<T>
  >;
}

export const EnterpriseOwnerInfo: EnterpriseOwnerInfoSelector = {
  __typename: () => new Field("__typename"),

  admins: (variables, select) =>
    new Field(
      "admins",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("query", variables.query),
        new Argument("role", variables.role, EnterpriseAdministratorRole),
      ],
      new SelectionSet(select(EnterpriseAdministratorConnection))
    ),

  affiliatedUsersWithTwoFactorDisabled: (variables, select) =>
    new Field(
      "affiliatedUsersWithTwoFactorDisabled",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserConnection))
    ),

  affiliatedUsersWithTwoFactorDisabledExist: () =>
    new Field("affiliatedUsersWithTwoFactorDisabledExist"),
  allowPrivateRepositoryForkingSetting: () =>
    new Field("allowPrivateRepositoryForkingSetting"),

  allowPrivateRepositoryForkingSettingOrganizations: (variables, select) =>
    new Field(
      "allowPrivateRepositoryForkingSettingOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("value", variables.value),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  defaultRepositoryPermissionSetting: () =>
    new Field("defaultRepositoryPermissionSetting"),

  defaultRepositoryPermissionSettingOrganizations: (variables, select) =>
    new Field(
      "defaultRepositoryPermissionSettingOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument(
          "value",
          variables.value,
          DefaultRepositoryPermissionField
        ),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  enterpriseServerInstallations: (variables, select) =>
    new Field(
      "enterpriseServerInstallations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("connectedOnly", variables.connectedOnly),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(EnterpriseServerInstallationConnection))
    ),

  ipAllowListEnabledSetting: () => new Field("ipAllowListEnabledSetting"),

  ipAllowListEntries: (variables, select) =>
    new Field(
      "ipAllowListEntries",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(IpAllowListEntryConnection))
    ),

  isUpdatingDefaultRepositoryPermission: () =>
    new Field("isUpdatingDefaultRepositoryPermission"),
  isUpdatingTwoFactorRequirement: () =>
    new Field("isUpdatingTwoFactorRequirement"),
  membersCanChangeRepositoryVisibilitySetting: () =>
    new Field("membersCanChangeRepositoryVisibilitySetting"),

  membersCanChangeRepositoryVisibilitySettingOrganizations: (
    variables,
    select
  ) =>
    new Field(
      "membersCanChangeRepositoryVisibilitySettingOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("value", variables.value),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  membersCanCreateInternalRepositoriesSetting: () =>
    new Field("membersCanCreateInternalRepositoriesSetting"),
  membersCanCreatePrivateRepositoriesSetting: () =>
    new Field("membersCanCreatePrivateRepositoriesSetting"),
  membersCanCreatePublicRepositoriesSetting: () =>
    new Field("membersCanCreatePublicRepositoriesSetting"),
  membersCanCreateRepositoriesSetting: () =>
    new Field("membersCanCreateRepositoriesSetting"),

  membersCanCreateRepositoriesSettingOrganizations: (variables, select) =>
    new Field(
      "membersCanCreateRepositoriesSettingOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument(
          "value",
          variables.value,
          OrganizationMembersCanCreateRepositoriesSettingValue
        ),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  membersCanDeleteIssuesSetting: () =>
    new Field("membersCanDeleteIssuesSetting"),

  membersCanDeleteIssuesSettingOrganizations: (variables, select) =>
    new Field(
      "membersCanDeleteIssuesSettingOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("value", variables.value),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  membersCanDeleteRepositoriesSetting: () =>
    new Field("membersCanDeleteRepositoriesSetting"),

  membersCanDeleteRepositoriesSettingOrganizations: (variables, select) =>
    new Field(
      "membersCanDeleteRepositoriesSettingOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("value", variables.value),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  membersCanInviteCollaboratorsSetting: () =>
    new Field("membersCanInviteCollaboratorsSetting"),

  membersCanInviteCollaboratorsSettingOrganizations: (variables, select) =>
    new Field(
      "membersCanInviteCollaboratorsSettingOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("value", variables.value),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  membersCanMakePurchasesSetting: () =>
    new Field("membersCanMakePurchasesSetting"),
  membersCanUpdateProtectedBranchesSetting: () =>
    new Field("membersCanUpdateProtectedBranchesSetting"),

  membersCanUpdateProtectedBranchesSettingOrganizations: (variables, select) =>
    new Field(
      "membersCanUpdateProtectedBranchesSettingOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("value", variables.value),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  membersCanViewDependencyInsightsSetting: () =>
    new Field("membersCanViewDependencyInsightsSetting"),

  membersCanViewDependencyInsightsSettingOrganizations: (variables, select) =>
    new Field(
      "membersCanViewDependencyInsightsSettingOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("value", variables.value),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  organizationProjectsSetting: () => new Field("organizationProjectsSetting"),

  organizationProjectsSettingOrganizations: (variables, select) =>
    new Field(
      "organizationProjectsSettingOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("value", variables.value),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  outsideCollaborators: (variables, select) =>
    new Field(
      "outsideCollaborators",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("login", variables.login),
        new Argument("orderBy", variables.orderBy),
        new Argument("query", variables.query),
        new Argument("visibility", variables.visibility, RepositoryVisibility),
      ],
      new SelectionSet(select(EnterpriseOutsideCollaboratorConnection))
    ),

  pendingAdminInvitations: (variables, select) =>
    new Field(
      "pendingAdminInvitations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("query", variables.query),
        new Argument("role", variables.role, EnterpriseAdministratorRole),
      ],
      new SelectionSet(select(EnterpriseAdministratorInvitationConnection))
    ),

  pendingCollaboratorInvitations: (variables, select) =>
    new Field(
      "pendingCollaboratorInvitations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("query", variables.query),
      ],
      new SelectionSet(select(RepositoryInvitationConnection))
    ),

  /**
   * @deprecated Repository invitations can now be associated with an email, not only an invitee. Use the `pendingCollaboratorInvitations` field instead. Removal on 2020-10-01 UTC.
   */

  pendingCollaborators: (variables, select) =>
    new Field(
      "pendingCollaborators",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("query", variables.query),
      ],
      new SelectionSet(select(EnterprisePendingCollaboratorConnection))
    ),

  pendingMemberInvitations: (variables, select) =>
    new Field(
      "pendingMemberInvitations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("query", variables.query),
      ],
      new SelectionSet(select(EnterprisePendingMemberInvitationConnection))
    ),

  repositoryProjectsSetting: () => new Field("repositoryProjectsSetting"),

  repositoryProjectsSettingOrganizations: (variables, select) =>
    new Field(
      "repositoryProjectsSettingOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("value", variables.value),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  samlIdentityProvider: (select) =>
    new Field(
      "samlIdentityProvider",
      undefined as never,
      new SelectionSet(select(EnterpriseIdentityProvider))
    ),

  samlIdentityProviderSettingOrganizations: (variables, select) =>
    new Field(
      "samlIdentityProviderSettingOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument(
          "value",
          variables.value,
          IdentityProviderConfigurationState
        ),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  teamDiscussionsSetting: () => new Field("teamDiscussionsSetting"),

  teamDiscussionsSettingOrganizations: (variables, select) =>
    new Field(
      "teamDiscussionsSettingOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("value", variables.value),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  twoFactorRequiredSetting: () => new Field("twoFactorRequiredSetting"),

  twoFactorRequiredSettingOrganizations: (variables, select) =>
    new Field(
      "twoFactorRequiredSettingOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("value", variables.value),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),
};

export interface IEnterprisePendingCollaboratorConnection {
  edges: IEnterprisePendingCollaboratorEdge[];
  nodes: IUser[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface EnterprisePendingCollaboratorConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: EnterprisePendingCollaboratorEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const EnterprisePendingCollaboratorConnection: EnterprisePendingCollaboratorConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(EnterprisePendingCollaboratorEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(User))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IEnterprisePendingCollaboratorEdge {
  cursor: string;
  isUnlicensed: boolean;
  node: IUser;
  repositories: IEnterpriseRepositoryInfoConnection;
}

interface EnterprisePendingCollaboratorEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  /**
   * @deprecated All pending collaborators consume a license Removal on 2021-01-01 UTC.
   */

  isUnlicensed: () => Field<"isUnlicensed">;

  node: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;

  repositories: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | RepositoryOrder;
    },
    select: (t: EnterpriseRepositoryInfoConnectionSelector) => T
  ) => Field<
    "repositories",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | RepositoryOrder>
    ],
    SelectionSet<T>
  >;
}

export const EnterprisePendingCollaboratorEdge: EnterprisePendingCollaboratorEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  /**
   * @deprecated All pending collaborators consume a license Removal on 2021-01-01 UTC.
   */
  isUnlicensed: () => new Field("isUnlicensed"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(User))),

  repositories: (variables, select) =>
    new Field(
      "repositories",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(EnterpriseRepositoryInfoConnection))
    ),
};

export interface IEnterprisePendingMemberInvitationConnection {
  edges: IEnterprisePendingMemberInvitationEdge[];
  nodes: IOrganizationInvitation[];
  pageInfo: IPageInfo;
  totalCount: number;
  totalUniqueUserCount: number;
}

interface EnterprisePendingMemberInvitationConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: EnterprisePendingMemberInvitationEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: OrganizationInvitationSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;

  totalUniqueUserCount: () => Field<"totalUniqueUserCount">;
}

export const EnterprisePendingMemberInvitationConnection: EnterprisePendingMemberInvitationConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(EnterprisePendingMemberInvitationEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(OrganizationInvitation))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
  totalUniqueUserCount: () => new Field("totalUniqueUserCount"),
};

export interface IEnterprisePendingMemberInvitationEdge {
  cursor: string;
  isUnlicensed: boolean;
  node: IOrganizationInvitation;
}

interface EnterprisePendingMemberInvitationEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  /**
   * @deprecated All pending members consume a license Removal on 2020-07-01 UTC.
   */

  isUnlicensed: () => Field<"isUnlicensed">;

  node: <T extends Array<Selection>>(
    select: (t: OrganizationInvitationSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const EnterprisePendingMemberInvitationEdge: EnterprisePendingMemberInvitationEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  /**
   * @deprecated All pending members consume a license Removal on 2020-07-01 UTC.
   */
  isUnlicensed: () => new Field("isUnlicensed"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(OrganizationInvitation))
    ),
};

export interface IEnterpriseRepositoryInfo extends INode {
  __typename: "EnterpriseRepositoryInfo";
  isPrivate: boolean;
  name: string;
  nameWithOwner: string;
}

interface EnterpriseRepositoryInfoSelector {
  __typename: () => Field<"__typename">;

  id: () => Field<"id">;

  isPrivate: () => Field<"isPrivate">;

  name: () => Field<"name">;

  nameWithOwner: () => Field<"nameWithOwner">;
}

export const isEnterpriseRepositoryInfo = (
  object: Record<string, any>
): object is Partial<IEnterpriseRepositoryInfo> => {
  return object.__typename === "EnterpriseRepositoryInfo";
};

export const EnterpriseRepositoryInfo: EnterpriseRepositoryInfoSelector = {
  __typename: () => new Field("__typename"),

  id: () => new Field("id"),
  isPrivate: () => new Field("isPrivate"),
  name: () => new Field("name"),
  nameWithOwner: () => new Field("nameWithOwner"),
};

export interface IEnterpriseRepositoryInfoConnection {
  edges: IEnterpriseRepositoryInfoEdge[];
  nodes: IEnterpriseRepositoryInfo[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface EnterpriseRepositoryInfoConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: EnterpriseRepositoryInfoEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: EnterpriseRepositoryInfoSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const EnterpriseRepositoryInfoConnection: EnterpriseRepositoryInfoConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(EnterpriseRepositoryInfoEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(EnterpriseRepositoryInfo))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IEnterpriseRepositoryInfoEdge {
  cursor: string;
  node: IEnterpriseRepositoryInfo;
}

interface EnterpriseRepositoryInfoEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: EnterpriseRepositoryInfoSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const EnterpriseRepositoryInfoEdge: EnterpriseRepositoryInfoEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(EnterpriseRepositoryInfo))
    ),
};

export interface IEnterpriseServerInstallation extends INode {
  __typename: "EnterpriseServerInstallation";
  createdAt: unknown;
  customerName: string;
  hostName: string;
  isConnected: boolean;
  updatedAt: unknown;
  userAccounts: IEnterpriseServerUserAccountConnection;
  userAccountsUploads: IEnterpriseServerUserAccountsUploadConnection;
}

interface EnterpriseServerInstallationSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  customerName: () => Field<"customerName">;

  hostName: () => Field<"hostName">;

  id: () => Field<"id">;

  isConnected: () => Field<"isConnected">;

  updatedAt: () => Field<"updatedAt">;

  userAccounts: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | EnterpriseServerUserAccountOrder;
    },
    select: (t: EnterpriseServerUserAccountConnectionSelector) => T
  ) => Field<
    "userAccounts",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<
        "orderBy",
        Variable<"orderBy"> | EnterpriseServerUserAccountOrder
      >
    ],
    SelectionSet<T>
  >;

  userAccountsUploads: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | EnterpriseServerUserAccountsUploadOrder;
    },
    select: (t: EnterpriseServerUserAccountsUploadConnectionSelector) => T
  ) => Field<
    "userAccountsUploads",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<
        "orderBy",
        Variable<"orderBy"> | EnterpriseServerUserAccountsUploadOrder
      >
    ],
    SelectionSet<T>
  >;
}

export const isEnterpriseServerInstallation = (
  object: Record<string, any>
): object is Partial<IEnterpriseServerInstallation> => {
  return object.__typename === "EnterpriseServerInstallation";
};

export const EnterpriseServerInstallation: EnterpriseServerInstallationSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),
  customerName: () => new Field("customerName"),
  hostName: () => new Field("hostName"),
  id: () => new Field("id"),
  isConnected: () => new Field("isConnected"),
  updatedAt: () => new Field("updatedAt"),

  userAccounts: (variables, select) =>
    new Field(
      "userAccounts",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(EnterpriseServerUserAccountConnection))
    ),

  userAccountsUploads: (variables, select) =>
    new Field(
      "userAccountsUploads",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(EnterpriseServerUserAccountsUploadConnection))
    ),
};

export interface IEnterpriseServerInstallationConnection {
  edges: IEnterpriseServerInstallationEdge[];
  nodes: IEnterpriseServerInstallation[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface EnterpriseServerInstallationConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: EnterpriseServerInstallationEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: EnterpriseServerInstallationSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const EnterpriseServerInstallationConnection: EnterpriseServerInstallationConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(EnterpriseServerInstallationEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(EnterpriseServerInstallation))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IEnterpriseServerInstallationEdge {
  cursor: string;
  node: IEnterpriseServerInstallation;
}

interface EnterpriseServerInstallationEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: EnterpriseServerInstallationSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const EnterpriseServerInstallationEdge: EnterpriseServerInstallationEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(EnterpriseServerInstallation))
    ),
};

export interface IEnterpriseServerUserAccount extends INode {
  __typename: "EnterpriseServerUserAccount";
  createdAt: unknown;
  emails: IEnterpriseServerUserAccountEmailConnection;
  enterpriseServerInstallation: IEnterpriseServerInstallation;
  isSiteAdmin: boolean;
  login: string;
  profileName: string;
  remoteCreatedAt: unknown;
  remoteUserId: number;
  updatedAt: unknown;
}

interface EnterpriseServerUserAccountSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  emails: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | EnterpriseServerUserAccountEmailOrder;
    },
    select: (t: EnterpriseServerUserAccountEmailConnectionSelector) => T
  ) => Field<
    "emails",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<
        "orderBy",
        Variable<"orderBy"> | EnterpriseServerUserAccountEmailOrder
      >
    ],
    SelectionSet<T>
  >;

  enterpriseServerInstallation: <T extends Array<Selection>>(
    select: (t: EnterpriseServerInstallationSelector) => T
  ) => Field<"enterpriseServerInstallation", never, SelectionSet<T>>;

  id: () => Field<"id">;

  isSiteAdmin: () => Field<"isSiteAdmin">;

  login: () => Field<"login">;

  profileName: () => Field<"profileName">;

  remoteCreatedAt: () => Field<"remoteCreatedAt">;

  remoteUserId: () => Field<"remoteUserId">;

  updatedAt: () => Field<"updatedAt">;
}

export const isEnterpriseServerUserAccount = (
  object: Record<string, any>
): object is Partial<IEnterpriseServerUserAccount> => {
  return object.__typename === "EnterpriseServerUserAccount";
};

export const EnterpriseServerUserAccount: EnterpriseServerUserAccountSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),

  emails: (variables, select) =>
    new Field(
      "emails",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(EnterpriseServerUserAccountEmailConnection))
    ),

  enterpriseServerInstallation: (select) =>
    new Field(
      "enterpriseServerInstallation",
      undefined as never,
      new SelectionSet(select(EnterpriseServerInstallation))
    ),

  id: () => new Field("id"),
  isSiteAdmin: () => new Field("isSiteAdmin"),
  login: () => new Field("login"),
  profileName: () => new Field("profileName"),
  remoteCreatedAt: () => new Field("remoteCreatedAt"),
  remoteUserId: () => new Field("remoteUserId"),
  updatedAt: () => new Field("updatedAt"),
};

export interface IEnterpriseServerUserAccountConnection {
  edges: IEnterpriseServerUserAccountEdge[];
  nodes: IEnterpriseServerUserAccount[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface EnterpriseServerUserAccountConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: EnterpriseServerUserAccountEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: EnterpriseServerUserAccountSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const EnterpriseServerUserAccountConnection: EnterpriseServerUserAccountConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(EnterpriseServerUserAccountEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(EnterpriseServerUserAccount))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IEnterpriseServerUserAccountEdge {
  cursor: string;
  node: IEnterpriseServerUserAccount;
}

interface EnterpriseServerUserAccountEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: EnterpriseServerUserAccountSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const EnterpriseServerUserAccountEdge: EnterpriseServerUserAccountEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(EnterpriseServerUserAccount))
    ),
};

export interface IEnterpriseServerUserAccountEmail extends INode {
  __typename: "EnterpriseServerUserAccountEmail";
  createdAt: unknown;
  email: string;
  isPrimary: boolean;
  updatedAt: unknown;
  userAccount: IEnterpriseServerUserAccount;
}

interface EnterpriseServerUserAccountEmailSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  email: () => Field<"email">;

  id: () => Field<"id">;

  isPrimary: () => Field<"isPrimary">;

  updatedAt: () => Field<"updatedAt">;

  userAccount: <T extends Array<Selection>>(
    select: (t: EnterpriseServerUserAccountSelector) => T
  ) => Field<"userAccount", never, SelectionSet<T>>;
}

export const isEnterpriseServerUserAccountEmail = (
  object: Record<string, any>
): object is Partial<IEnterpriseServerUserAccountEmail> => {
  return object.__typename === "EnterpriseServerUserAccountEmail";
};

export const EnterpriseServerUserAccountEmail: EnterpriseServerUserAccountEmailSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),
  email: () => new Field("email"),
  id: () => new Field("id"),
  isPrimary: () => new Field("isPrimary"),
  updatedAt: () => new Field("updatedAt"),

  userAccount: (select) =>
    new Field(
      "userAccount",
      undefined as never,
      new SelectionSet(select(EnterpriseServerUserAccount))
    ),
};

export interface IEnterpriseServerUserAccountEmailConnection {
  edges: IEnterpriseServerUserAccountEmailEdge[];
  nodes: IEnterpriseServerUserAccountEmail[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface EnterpriseServerUserAccountEmailConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: EnterpriseServerUserAccountEmailEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: EnterpriseServerUserAccountEmailSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const EnterpriseServerUserAccountEmailConnection: EnterpriseServerUserAccountEmailConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(EnterpriseServerUserAccountEmailEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(EnterpriseServerUserAccountEmail))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IEnterpriseServerUserAccountEmailEdge {
  cursor: string;
  node: IEnterpriseServerUserAccountEmail;
}

interface EnterpriseServerUserAccountEmailEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: EnterpriseServerUserAccountEmailSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const EnterpriseServerUserAccountEmailEdge: EnterpriseServerUserAccountEmailEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(EnterpriseServerUserAccountEmail))
    ),
};

export interface IEnterpriseServerUserAccountsUpload extends INode {
  __typename: "EnterpriseServerUserAccountsUpload";
  createdAt: unknown;
  enterprise: IEnterprise;
  enterpriseServerInstallation: IEnterpriseServerInstallation;
  name: string;
  syncState: EnterpriseServerUserAccountsUploadSyncState;
  updatedAt: unknown;
}

interface EnterpriseServerUserAccountsUploadSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  enterpriseServerInstallation: <T extends Array<Selection>>(
    select: (t: EnterpriseServerInstallationSelector) => T
  ) => Field<"enterpriseServerInstallation", never, SelectionSet<T>>;

  id: () => Field<"id">;

  name: () => Field<"name">;

  syncState: () => Field<"syncState">;

  updatedAt: () => Field<"updatedAt">;
}

export const isEnterpriseServerUserAccountsUpload = (
  object: Record<string, any>
): object is Partial<IEnterpriseServerUserAccountsUpload> => {
  return object.__typename === "EnterpriseServerUserAccountsUpload";
};

export const EnterpriseServerUserAccountsUpload: EnterpriseServerUserAccountsUploadSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  enterpriseServerInstallation: (select) =>
    new Field(
      "enterpriseServerInstallation",
      undefined as never,
      new SelectionSet(select(EnterpriseServerInstallation))
    ),

  id: () => new Field("id"),
  name: () => new Field("name"),
  syncState: () => new Field("syncState"),
  updatedAt: () => new Field("updatedAt"),
};

export interface IEnterpriseServerUserAccountsUploadConnection {
  edges: IEnterpriseServerUserAccountsUploadEdge[];
  nodes: IEnterpriseServerUserAccountsUpload[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface EnterpriseServerUserAccountsUploadConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: EnterpriseServerUserAccountsUploadEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: EnterpriseServerUserAccountsUploadSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const EnterpriseServerUserAccountsUploadConnection: EnterpriseServerUserAccountsUploadConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(EnterpriseServerUserAccountsUploadEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(EnterpriseServerUserAccountsUpload))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IEnterpriseServerUserAccountsUploadEdge {
  cursor: string;
  node: IEnterpriseServerUserAccountsUpload;
}

interface EnterpriseServerUserAccountsUploadEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: EnterpriseServerUserAccountsUploadSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const EnterpriseServerUserAccountsUploadEdge: EnterpriseServerUserAccountsUploadEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(EnterpriseServerUserAccountsUpload))
    ),
};

export interface IEnterpriseUserAccount extends IActor, INode {
  __typename: "EnterpriseUserAccount";
  createdAt: unknown;
  enterprise: IEnterprise;
  name: string;
  organizations: IEnterpriseOrganizationMembershipConnection;
  updatedAt: unknown;
  user: IUser;
}

interface EnterpriseUserAccountSelector {
  __typename: () => Field<"__typename">;

  avatarUrl: (variables: {
    size: unknown;
  }) => Field<"avatarUrl", [/* @todo */]>;

  createdAt: () => Field<"createdAt">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  id: () => Field<"id">;

  login: () => Field<"login">;

  name: () => Field<"name">;

  organizations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | OrganizationOrder;
      query?: Variable<"query"> | string;
      role?: Variable<"role"> | EnterpriseUserAccountMembershipRole;
    },
    select: (t: EnterpriseOrganizationMembershipConnectionSelector) => T
  ) => Field<
    "organizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | OrganizationOrder>,
      Argument<"query", Variable<"query"> | string>,
      Argument<"role", Variable<"role"> | EnterpriseUserAccountMembershipRole>
    ],
    SelectionSet<T>
  >;

  resourcePath: () => Field<"resourcePath">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const isEnterpriseUserAccount = (
  object: Record<string, any>
): object is Partial<IEnterpriseUserAccount> => {
  return object.__typename === "EnterpriseUserAccount";
};

export const EnterpriseUserAccount: EnterpriseUserAccountSelector = {
  __typename: () => new Field("__typename"),

  avatarUrl: (variables) => new Field("avatarUrl"),
  createdAt: () => new Field("createdAt"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  id: () => new Field("id"),
  login: () => new Field("login"),
  name: () => new Field("name"),

  organizations: (variables, select) =>
    new Field(
      "organizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("query", variables.query),
        new Argument(
          "role",
          variables.role,
          EnterpriseUserAccountMembershipRole
        ),
      ],
      new SelectionSet(select(EnterpriseOrganizationMembershipConnection))
    ),

  resourcePath: () => new Field("resourcePath"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface IEnterpriseUserAccountConnection {
  edges: IEnterpriseUserAccountEdge[];
  nodes: IEnterpriseUserAccount[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface EnterpriseUserAccountConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: EnterpriseUserAccountEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: EnterpriseUserAccountSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const EnterpriseUserAccountConnection: EnterpriseUserAccountConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(EnterpriseUserAccountEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(EnterpriseUserAccount))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IEnterpriseUserAccountEdge {
  cursor: string;
  node: IEnterpriseUserAccount;
}

interface EnterpriseUserAccountEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: EnterpriseUserAccountSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const EnterpriseUserAccountEdge: EnterpriseUserAccountEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(EnterpriseUserAccount))
    ),
};

export interface IExternalIdentity extends INode {
  __typename: "ExternalIdentity";
  guid: string;
  organizationInvitation: IOrganizationInvitation;
  samlIdentity: IExternalIdentitySamlAttributes;
  scimIdentity: IExternalIdentityScimAttributes;
  user: IUser;
}

interface ExternalIdentitySelector {
  __typename: () => Field<"__typename">;

  guid: () => Field<"guid">;

  id: () => Field<"id">;

  organizationInvitation: <T extends Array<Selection>>(
    select: (t: OrganizationInvitationSelector) => T
  ) => Field<"organizationInvitation", never, SelectionSet<T>>;

  samlIdentity: <T extends Array<Selection>>(
    select: (t: ExternalIdentitySamlAttributesSelector) => T
  ) => Field<"samlIdentity", never, SelectionSet<T>>;

  scimIdentity: <T extends Array<Selection>>(
    select: (t: ExternalIdentityScimAttributesSelector) => T
  ) => Field<"scimIdentity", never, SelectionSet<T>>;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const isExternalIdentity = (
  object: Record<string, any>
): object is Partial<IExternalIdentity> => {
  return object.__typename === "ExternalIdentity";
};

export const ExternalIdentity: ExternalIdentitySelector = {
  __typename: () => new Field("__typename"),

  guid: () => new Field("guid"),
  id: () => new Field("id"),

  organizationInvitation: (select) =>
    new Field(
      "organizationInvitation",
      undefined as never,
      new SelectionSet(select(OrganizationInvitation))
    ),

  samlIdentity: (select) =>
    new Field(
      "samlIdentity",
      undefined as never,
      new SelectionSet(select(ExternalIdentitySamlAttributes))
    ),

  scimIdentity: (select) =>
    new Field(
      "scimIdentity",
      undefined as never,
      new SelectionSet(select(ExternalIdentityScimAttributes))
    ),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface IExternalIdentityConnection {
  edges: IExternalIdentityEdge[];
  nodes: IExternalIdentity[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface ExternalIdentityConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: ExternalIdentityEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: ExternalIdentitySelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const ExternalIdentityConnection: ExternalIdentityConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(ExternalIdentityEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(ExternalIdentity))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IExternalIdentityEdge {
  cursor: string;
  node: IExternalIdentity;
}

interface ExternalIdentityEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: ExternalIdentitySelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const ExternalIdentityEdge: ExternalIdentityEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(ExternalIdentity))
    ),
};

export interface IExternalIdentitySamlAttributes {
  emails: IUserEmailMetadata[];
  familyName: string;
  givenName: string;
  groups: string[];
  nameId: string;
  username: string;
}

interface ExternalIdentitySamlAttributesSelector {
  __typename: () => Field<"__typename">;

  emails: <T extends Array<Selection>>(
    select: (t: UserEmailMetadataSelector) => T
  ) => Field<"emails", never, SelectionSet<T>>;

  familyName: () => Field<"familyName">;

  givenName: () => Field<"givenName">;

  groups: () => Field<"groups">;

  nameId: () => Field<"nameId">;

  username: () => Field<"username">;
}

export const ExternalIdentitySamlAttributes: ExternalIdentitySamlAttributesSelector = {
  __typename: () => new Field("__typename"),

  emails: (select) =>
    new Field(
      "emails",
      undefined as never,
      new SelectionSet(select(UserEmailMetadata))
    ),

  familyName: () => new Field("familyName"),
  givenName: () => new Field("givenName"),
  groups: () => new Field("groups"),
  nameId: () => new Field("nameId"),
  username: () => new Field("username"),
};

export interface IExternalIdentityScimAttributes {
  emails: IUserEmailMetadata[];
  familyName: string;
  givenName: string;
  groups: string[];
  username: string;
}

interface ExternalIdentityScimAttributesSelector {
  __typename: () => Field<"__typename">;

  emails: <T extends Array<Selection>>(
    select: (t: UserEmailMetadataSelector) => T
  ) => Field<"emails", never, SelectionSet<T>>;

  familyName: () => Field<"familyName">;

  givenName: () => Field<"givenName">;

  groups: () => Field<"groups">;

  username: () => Field<"username">;
}

export const ExternalIdentityScimAttributes: ExternalIdentityScimAttributesSelector = {
  __typename: () => new Field("__typename"),

  emails: (select) =>
    new Field(
      "emails",
      undefined as never,
      new SelectionSet(select(UserEmailMetadata))
    ),

  familyName: () => new Field("familyName"),
  givenName: () => new Field("givenName"),
  groups: () => new Field("groups"),
  username: () => new Field("username"),
};

export interface IFollowUserPayload {
  clientMutationId: string;
  user: IUser;
}

interface FollowUserPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const FollowUserPayload: FollowUserPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface IFollowerConnection {
  edges: IUserEdge[];
  nodes: IUser[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface FollowerConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: UserEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const FollowerConnection: FollowerConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field("edges", undefined as never, new SelectionSet(select(UserEdge))),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(User))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IFollowingConnection {
  edges: IUserEdge[];
  nodes: IUser[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface FollowingConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: UserEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const FollowingConnection: FollowingConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field("edges", undefined as never, new SelectionSet(select(UserEdge))),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(User))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IFundingLink {
  platform: FundingPlatform;
  url: unknown;
}

interface FundingLinkSelector {
  __typename: () => Field<"__typename">;

  platform: () => Field<"platform">;

  url: () => Field<"url">;
}

export const FundingLink: FundingLinkSelector = {
  __typename: () => new Field("__typename"),

  platform: () => new Field("platform"),
  url: () => new Field("url"),
};

export interface IGenericHovercardContext extends IHovercardContext {
  __typename: "GenericHovercardContext";
}

interface GenericHovercardContextSelector {
  __typename: () => Field<"__typename">;

  message: () => Field<"message">;

  octicon: () => Field<"octicon">;
}

export const isGenericHovercardContext = (
  object: Record<string, any>
): object is Partial<IGenericHovercardContext> => {
  return object.__typename === "GenericHovercardContext";
};

export const GenericHovercardContext: GenericHovercardContextSelector = {
  __typename: () => new Field("__typename"),

  message: () => new Field("message"),
  octicon: () => new Field("octicon"),
};

export interface IGist extends INode, IStarrable, IUniformResourceLocatable {
  __typename: "Gist";
  comments: IGistCommentConnection;
  createdAt: unknown;
  description: string;
  files: IGistFile[];
  forks: IGistConnection;
  isFork: boolean;
  isPublic: boolean;
  name: string;
  owner: IRepositoryOwner;
  pushedAt: unknown;
  updatedAt: unknown;
}

interface GistSelector {
  __typename: () => Field<"__typename">;

  comments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: GistCommentConnectionSelector) => T
  ) => Field<
    "comments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  createdAt: () => Field<"createdAt">;

  description: () => Field<"description">;

  files: <T extends Array<Selection>>(
    variables: {
      limit?: Variable<"limit"> | number;
      oid?: Variable<"oid"> | unknown;
    },
    select: (t: GistFileSelector) => T
  ) => Field<
    "files",
    [
      Argument<"limit", Variable<"limit"> | number>,
      Argument<"oid", Variable<"oid"> | unknown>
    ],
    SelectionSet<T>
  >;

  forks: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | GistOrder;
    },
    select: (t: GistConnectionSelector) => T
  ) => Field<
    "forks",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | GistOrder>
    ],
    SelectionSet<T>
  >;

  id: () => Field<"id">;

  isFork: () => Field<"isFork">;

  isPublic: () => Field<"isPublic">;

  name: () => Field<"name">;

  owner: <T extends Array<Selection>>(
    select: (t: RepositoryOwnerSelector) => T
  ) => Field<"owner", never, SelectionSet<T>>;

  pushedAt: () => Field<"pushedAt">;

  resourcePath: () => Field<"resourcePath">;

  stargazerCount: () => Field<"stargazerCount">;

  stargazers: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | StarOrder;
    },
    select: (t: StargazerConnectionSelector) => T
  ) => Field<
    "stargazers",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | StarOrder>
    ],
    SelectionSet<T>
  >;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  viewerHasStarred: () => Field<"viewerHasStarred">;
}

export const isGist = (
  object: Record<string, any>
): object is Partial<IGist> => {
  return object.__typename === "Gist";
};

export const Gist: GistSelector = {
  __typename: () => new Field("__typename"),

  comments: (variables, select) =>
    new Field(
      "comments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(GistCommentConnection))
    ),

  createdAt: () => new Field("createdAt"),
  description: () => new Field("description"),

  files: (variables, select) =>
    new Field(
      "files",
      [
        new Argument("limit", variables.limit),
        new Argument("oid", variables.oid),
      ],
      new SelectionSet(select(GistFile))
    ),

  forks: (variables, select) =>
    new Field(
      "forks",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(GistConnection))
    ),

  id: () => new Field("id"),
  isFork: () => new Field("isFork"),
  isPublic: () => new Field("isPublic"),
  name: () => new Field("name"),

  owner: (select) =>
    new Field(
      "owner",
      undefined as never,
      new SelectionSet(select(RepositoryOwner))
    ),

  pushedAt: () => new Field("pushedAt"),
  resourcePath: () => new Field("resourcePath"),
  stargazerCount: () => new Field("stargazerCount"),

  stargazers: (variables, select) =>
    new Field(
      "stargazers",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(StargazerConnection))
    ),

  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
  viewerHasStarred: () => new Field("viewerHasStarred"),
};

export interface IGistComment
  extends IComment,
    IDeletable,
    IMinimizable,
    INode,
    IUpdatable,
    IUpdatableComment {
  __typename: "GistComment";
  databaseId: number;
  gist: IGist;
}

interface GistCommentSelector {
  __typename: () => Field<"__typename">;

  author: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"author", never, SelectionSet<T>>;

  authorAssociation: () => Field<"authorAssociation">;

  body: () => Field<"body">;

  bodyHTML: () => Field<"bodyHTML">;

  bodyText: () => Field<"bodyText">;

  createdAt: () => Field<"createdAt">;

  createdViaEmail: () => Field<"createdViaEmail">;

  databaseId: () => Field<"databaseId">;

  editor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"editor", never, SelectionSet<T>>;

  gist: <T extends Array<Selection>>(
    select: (t: GistSelector) => T
  ) => Field<"gist", never, SelectionSet<T>>;

  id: () => Field<"id">;

  includesCreatedEdit: () => Field<"includesCreatedEdit">;

  isMinimized: () => Field<"isMinimized">;

  lastEditedAt: () => Field<"lastEditedAt">;

  minimizedReason: () => Field<"minimizedReason">;

  publishedAt: () => Field<"publishedAt">;

  updatedAt: () => Field<"updatedAt">;

  userContentEdits: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserContentEditConnectionSelector) => T
  ) => Field<
    "userContentEdits",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  viewerCanDelete: () => Field<"viewerCanDelete">;

  viewerCanMinimize: () => Field<"viewerCanMinimize">;

  viewerCanUpdate: () => Field<"viewerCanUpdate">;

  viewerCannotUpdateReasons: () => Field<"viewerCannotUpdateReasons">;

  viewerDidAuthor: () => Field<"viewerDidAuthor">;
}

export const isGistComment = (
  object: Record<string, any>
): object is Partial<IGistComment> => {
  return object.__typename === "GistComment";
};

export const GistComment: GistCommentSelector = {
  __typename: () => new Field("__typename"),

  author: (select) =>
    new Field("author", undefined as never, new SelectionSet(select(Actor))),

  authorAssociation: () => new Field("authorAssociation"),
  body: () => new Field("body"),
  bodyHTML: () => new Field("bodyHTML"),
  bodyText: () => new Field("bodyText"),
  createdAt: () => new Field("createdAt"),
  createdViaEmail: () => new Field("createdViaEmail"),
  databaseId: () => new Field("databaseId"),

  editor: (select) =>
    new Field("editor", undefined as never, new SelectionSet(select(Actor))),

  gist: (select) =>
    new Field("gist", undefined as never, new SelectionSet(select(Gist))),

  id: () => new Field("id"),
  includesCreatedEdit: () => new Field("includesCreatedEdit"),
  isMinimized: () => new Field("isMinimized"),
  lastEditedAt: () => new Field("lastEditedAt"),
  minimizedReason: () => new Field("minimizedReason"),
  publishedAt: () => new Field("publishedAt"),
  updatedAt: () => new Field("updatedAt"),

  userContentEdits: (variables, select) =>
    new Field(
      "userContentEdits",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserContentEditConnection))
    ),

  viewerCanDelete: () => new Field("viewerCanDelete"),
  viewerCanMinimize: () => new Field("viewerCanMinimize"),
  viewerCanUpdate: () => new Field("viewerCanUpdate"),
  viewerCannotUpdateReasons: () => new Field("viewerCannotUpdateReasons"),
  viewerDidAuthor: () => new Field("viewerDidAuthor"),
};

export interface IGistCommentConnection {
  edges: IGistCommentEdge[];
  nodes: IGistComment[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface GistCommentConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: GistCommentEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: GistCommentSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const GistCommentConnection: GistCommentConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(GistCommentEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(GistComment))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IGistCommentEdge {
  cursor: string;
  node: IGistComment;
}

interface GistCommentEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: GistCommentSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const GistCommentEdge: GistCommentEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(GistComment))
    ),
};

export interface IGistConnection {
  edges: IGistEdge[];
  nodes: IGist[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface GistConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: GistEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: GistSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const GistConnection: GistConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field("edges", undefined as never, new SelectionSet(select(GistEdge))),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(Gist))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IGistEdge {
  cursor: string;
  node: IGist;
}

interface GistEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: GistSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const GistEdge: GistEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Gist))),
};

export interface IGistFile {
  encodedName: string;
  encoding: string;
  extension: string;
  isImage: boolean;
  isTruncated: boolean;
  language: ILanguage;
  name: string;
  size: number;
  text: string;
}

interface GistFileSelector {
  __typename: () => Field<"__typename">;

  encodedName: () => Field<"encodedName">;

  encoding: () => Field<"encoding">;

  extension: () => Field<"extension">;

  isImage: () => Field<"isImage">;

  isTruncated: () => Field<"isTruncated">;

  language: <T extends Array<Selection>>(
    select: (t: LanguageSelector) => T
  ) => Field<"language", never, SelectionSet<T>>;

  name: () => Field<"name">;

  size: () => Field<"size">;

  text: (variables: { truncate: unknown }) => Field<"text", [/* @todo */]>;
}

export const GistFile: GistFileSelector = {
  __typename: () => new Field("__typename"),

  encodedName: () => new Field("encodedName"),
  encoding: () => new Field("encoding"),
  extension: () => new Field("extension"),
  isImage: () => new Field("isImage"),
  isTruncated: () => new Field("isTruncated"),

  language: (select) =>
    new Field(
      "language",
      undefined as never,
      new SelectionSet(select(Language))
    ),

  name: () => new Field("name"),
  size: () => new Field("size"),
  text: (variables) => new Field("text"),
};

export interface IGitActor {
  avatarUrl: unknown;
  date: unknown;
  email: string;
  name: string;
  user: IUser;
}

interface GitActorSelector {
  __typename: () => Field<"__typename">;

  avatarUrl: (variables: {
    size: unknown;
  }) => Field<"avatarUrl", [/* @todo */]>;

  date: () => Field<"date">;

  email: () => Field<"email">;

  name: () => Field<"name">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const GitActor: GitActorSelector = {
  __typename: () => new Field("__typename"),

  avatarUrl: (variables) => new Field("avatarUrl"),
  date: () => new Field("date"),
  email: () => new Field("email"),
  name: () => new Field("name"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface IGitActorConnection {
  edges: IGitActorEdge[];
  nodes: IGitActor[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface GitActorConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: GitActorEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: GitActorSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const GitActorConnection: GitActorConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(GitActorEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(GitActor))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IGitActorEdge {
  cursor: string;
  node: IGitActor;
}

interface GitActorEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: GitActorSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const GitActorEdge: GitActorEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(GitActor))),
};

export interface IGitHubMetadata {
  gitHubServicesSha: unknown;
  gitIpAddresses: string[];
  hookIpAddresses: string[];
  importerIpAddresses: string[];
  isPasswordAuthenticationVerifiable: boolean;
  pagesIpAddresses: string[];
}

interface GitHubMetadataSelector {
  __typename: () => Field<"__typename">;

  gitHubServicesSha: () => Field<"gitHubServicesSha">;

  gitIpAddresses: () => Field<"gitIpAddresses">;

  hookIpAddresses: () => Field<"hookIpAddresses">;

  importerIpAddresses: () => Field<"importerIpAddresses">;

  isPasswordAuthenticationVerifiable: () => Field<"isPasswordAuthenticationVerifiable">;

  pagesIpAddresses: () => Field<"pagesIpAddresses">;
}

export const GitHubMetadata: GitHubMetadataSelector = {
  __typename: () => new Field("__typename"),

  gitHubServicesSha: () => new Field("gitHubServicesSha"),
  gitIpAddresses: () => new Field("gitIpAddresses"),
  hookIpAddresses: () => new Field("hookIpAddresses"),
  importerIpAddresses: () => new Field("importerIpAddresses"),
  isPasswordAuthenticationVerifiable: () =>
    new Field("isPasswordAuthenticationVerifiable"),
  pagesIpAddresses: () => new Field("pagesIpAddresses"),
};

export interface IGitObject {
  __typename: string;
  abbreviatedOid: string;
  commitResourcePath: unknown;
  commitUrl: unknown;
  id: string;
  oid: unknown;
  repository: IRepository;
}

interface GitObjectSelector {
  __typename: () => Field<"__typename">;

  abbreviatedOid: () => Field<"abbreviatedOid">;

  commitResourcePath: () => Field<"commitResourcePath">;

  commitUrl: () => Field<"commitUrl">;

  id: () => Field<"id">;

  oid: () => Field<"oid">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  on: <
    T extends Array<Selection>,
    F extends "Blob" | "Commit" | "Tag" | "Tree"
  >(
    type: F,
    select: (
      t: F extends "Blob"
        ? BlobSelector
        : F extends "Commit"
        ? CommitSelector
        : F extends "Tag"
        ? TagSelector
        : F extends "Tree"
        ? TreeSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const GitObject: GitObjectSelector = {
  __typename: () => new Field("__typename"),

  abbreviatedOid: () => new Field("abbreviatedOid"),
  commitResourcePath: () => new Field("commitResourcePath"),
  commitUrl: () => new Field("commitUrl"),
  id: () => new Field("id"),
  oid: () => new Field("oid"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  on: (type, select) => {
    switch (type) {
      case "Blob": {
        return new InlineFragment(
          new NamedType("Blob") as any,
          new SelectionSet(select(Blob as any))
        );
      }

      case "Commit": {
        return new InlineFragment(
          new NamedType("Commit") as any,
          new SelectionSet(select(Commit as any))
        );
      }

      case "Tag": {
        return new InlineFragment(
          new NamedType("Tag") as any,
          new SelectionSet(select(Tag as any))
        );
      }

      case "Tree": {
        return new InlineFragment(
          new NamedType("Tree") as any,
          new SelectionSet(select(Tree as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IGitSignature {
  __typename: string;
  email: string;
  isValid: boolean;
  payload: string;
  signature: string;
  signer: IUser;
  state: GitSignatureState;
  wasSignedByGitHub: boolean;
}

interface GitSignatureSelector {
  __typename: () => Field<"__typename">;

  email: () => Field<"email">;

  isValid: () => Field<"isValid">;

  payload: () => Field<"payload">;

  signature: () => Field<"signature">;

  signer: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"signer", never, SelectionSet<T>>;

  state: () => Field<"state">;

  wasSignedByGitHub: () => Field<"wasSignedByGitHub">;

  on: <
    T extends Array<Selection>,
    F extends "GpgSignature" | "SmimeSignature" | "UnknownSignature"
  >(
    type: F,
    select: (
      t: F extends "GpgSignature"
        ? GpgSignatureSelector
        : F extends "SmimeSignature"
        ? SmimeSignatureSelector
        : F extends "UnknownSignature"
        ? UnknownSignatureSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const GitSignature: GitSignatureSelector = {
  __typename: () => new Field("__typename"),

  email: () => new Field("email"),
  isValid: () => new Field("isValid"),
  payload: () => new Field("payload"),
  signature: () => new Field("signature"),

  signer: (select) =>
    new Field("signer", undefined as never, new SelectionSet(select(User))),

  state: () => new Field("state"),
  wasSignedByGitHub: () => new Field("wasSignedByGitHub"),

  on: (type, select) => {
    switch (type) {
      case "GpgSignature": {
        return new InlineFragment(
          new NamedType("GpgSignature") as any,
          new SelectionSet(select(GpgSignature as any))
        );
      }

      case "SmimeSignature": {
        return new InlineFragment(
          new NamedType("SmimeSignature") as any,
          new SelectionSet(select(SmimeSignature as any))
        );
      }

      case "UnknownSignature": {
        return new InlineFragment(
          new NamedType("UnknownSignature") as any,
          new SelectionSet(select(UnknownSignature as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IGpgSignature extends IGitSignature {
  __typename: "GpgSignature";
  keyId: string;
}

interface GpgSignatureSelector {
  __typename: () => Field<"__typename">;

  email: () => Field<"email">;

  isValid: () => Field<"isValid">;

  keyId: () => Field<"keyId">;

  payload: () => Field<"payload">;

  signature: () => Field<"signature">;

  signer: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"signer", never, SelectionSet<T>>;

  state: () => Field<"state">;

  wasSignedByGitHub: () => Field<"wasSignedByGitHub">;
}

export const isGpgSignature = (
  object: Record<string, any>
): object is Partial<IGpgSignature> => {
  return object.__typename === "GpgSignature";
};

export const GpgSignature: GpgSignatureSelector = {
  __typename: () => new Field("__typename"),

  email: () => new Field("email"),
  isValid: () => new Field("isValid"),
  keyId: () => new Field("keyId"),
  payload: () => new Field("payload"),
  signature: () => new Field("signature"),

  signer: (select) =>
    new Field("signer", undefined as never, new SelectionSet(select(User))),

  state: () => new Field("state"),
  wasSignedByGitHub: () => new Field("wasSignedByGitHub"),
};

export interface IHeadRefDeletedEvent extends INode {
  __typename: "HeadRefDeletedEvent";
  actor: IActor;
  createdAt: unknown;
  headRef: IRef;
  headRefName: string;
  pullRequest: IPullRequest;
}

interface HeadRefDeletedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  headRef: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"headRef", never, SelectionSet<T>>;

  headRefName: () => Field<"headRefName">;

  id: () => Field<"id">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const isHeadRefDeletedEvent = (
  object: Record<string, any>
): object is Partial<IHeadRefDeletedEvent> => {
  return object.__typename === "HeadRefDeletedEvent";
};

export const HeadRefDeletedEvent: HeadRefDeletedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),

  headRef: (select) =>
    new Field("headRef", undefined as never, new SelectionSet(select(Ref))),

  headRefName: () => new Field("headRefName"),
  id: () => new Field("id"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IHeadRefForcePushedEvent extends INode {
  __typename: "HeadRefForcePushedEvent";
  actor: IActor;
  afterCommit: ICommit;
  beforeCommit: ICommit;
  createdAt: unknown;
  pullRequest: IPullRequest;
  ref: IRef;
}

interface HeadRefForcePushedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  afterCommit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"afterCommit", never, SelectionSet<T>>;

  beforeCommit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"beforeCommit", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  ref: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"ref", never, SelectionSet<T>>;
}

export const isHeadRefForcePushedEvent = (
  object: Record<string, any>
): object is Partial<IHeadRefForcePushedEvent> => {
  return object.__typename === "HeadRefForcePushedEvent";
};

export const HeadRefForcePushedEvent: HeadRefForcePushedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  afterCommit: (select) =>
    new Field(
      "afterCommit",
      undefined as never,
      new SelectionSet(select(Commit))
    ),

  beforeCommit: (select) =>
    new Field(
      "beforeCommit",
      undefined as never,
      new SelectionSet(select(Commit))
    ),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  ref: (select) =>
    new Field("ref", undefined as never, new SelectionSet(select(Ref))),
};

export interface IHeadRefRestoredEvent extends INode {
  __typename: "HeadRefRestoredEvent";
  actor: IActor;
  createdAt: unknown;
  pullRequest: IPullRequest;
}

interface HeadRefRestoredEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const isHeadRefRestoredEvent = (
  object: Record<string, any>
): object is Partial<IHeadRefRestoredEvent> => {
  return object.__typename === "HeadRefRestoredEvent";
};

export const HeadRefRestoredEvent: HeadRefRestoredEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IHovercard {
  contexts: IHovercardContext[];
}

interface HovercardSelector {
  __typename: () => Field<"__typename">;

  contexts: <T extends Array<Selection>>(
    select: (t: HovercardContextSelector) => T
  ) => Field<"contexts", never, SelectionSet<T>>;
}

export const Hovercard: HovercardSelector = {
  __typename: () => new Field("__typename"),

  contexts: (select) =>
    new Field(
      "contexts",
      undefined as never,
      new SelectionSet(select(HovercardContext))
    ),
};

export interface IHovercardContext {
  __typename: string;
  message: string;
  octicon: string;
}

interface HovercardContextSelector {
  __typename: () => Field<"__typename">;

  message: () => Field<"message">;

  octicon: () => Field<"octicon">;

  on: <
    T extends Array<Selection>,
    F extends
      | "GenericHovercardContext"
      | "OrganizationTeamsHovercardContext"
      | "OrganizationsHovercardContext"
      | "ReviewStatusHovercardContext"
      | "ViewerHovercardContext"
  >(
    type: F,
    select: (
      t: F extends "GenericHovercardContext"
        ? GenericHovercardContextSelector
        : F extends "OrganizationTeamsHovercardContext"
        ? OrganizationTeamsHovercardContextSelector
        : F extends "OrganizationsHovercardContext"
        ? OrganizationsHovercardContextSelector
        : F extends "ReviewStatusHovercardContext"
        ? ReviewStatusHovercardContextSelector
        : F extends "ViewerHovercardContext"
        ? ViewerHovercardContextSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const HovercardContext: HovercardContextSelector = {
  __typename: () => new Field("__typename"),

  message: () => new Field("message"),
  octicon: () => new Field("octicon"),

  on: (type, select) => {
    switch (type) {
      case "GenericHovercardContext": {
        return new InlineFragment(
          new NamedType("GenericHovercardContext") as any,
          new SelectionSet(select(GenericHovercardContext as any))
        );
      }

      case "OrganizationTeamsHovercardContext": {
        return new InlineFragment(
          new NamedType("OrganizationTeamsHovercardContext") as any,
          new SelectionSet(select(OrganizationTeamsHovercardContext as any))
        );
      }

      case "OrganizationsHovercardContext": {
        return new InlineFragment(
          new NamedType("OrganizationsHovercardContext") as any,
          new SelectionSet(select(OrganizationsHovercardContext as any))
        );
      }

      case "ReviewStatusHovercardContext": {
        return new InlineFragment(
          new NamedType("ReviewStatusHovercardContext") as any,
          new SelectionSet(select(ReviewStatusHovercardContext as any))
        );
      }

      case "ViewerHovercardContext": {
        return new InlineFragment(
          new NamedType("ViewerHovercardContext") as any,
          new SelectionSet(select(ViewerHovercardContext as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IInviteEnterpriseAdminPayload {
  clientMutationId: string;
  invitation: IEnterpriseAdministratorInvitation;
}

interface InviteEnterpriseAdminPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  invitation: <T extends Array<Selection>>(
    select: (t: EnterpriseAdministratorInvitationSelector) => T
  ) => Field<"invitation", never, SelectionSet<T>>;
}

export const InviteEnterpriseAdminPayload: InviteEnterpriseAdminPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  invitation: (select) =>
    new Field(
      "invitation",
      undefined as never,
      new SelectionSet(select(EnterpriseAdministratorInvitation))
    ),
};

export interface IIpAllowListEntry extends INode {
  __typename: "IpAllowListEntry";
  allowListValue: string;
  createdAt: unknown;
  isActive: boolean;
  name: string;
  owner: IIpAllowListOwner;
  updatedAt: unknown;
}

interface IpAllowListEntrySelector {
  __typename: () => Field<"__typename">;

  allowListValue: () => Field<"allowListValue">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  isActive: () => Field<"isActive">;

  name: () => Field<"name">;

  owner: <T extends Array<Selection>>(
    select: (t: IpAllowListOwnerSelector) => T
  ) => Field<"owner", never, SelectionSet<T>>;

  updatedAt: () => Field<"updatedAt">;
}

export const isIpAllowListEntry = (
  object: Record<string, any>
): object is Partial<IIpAllowListEntry> => {
  return object.__typename === "IpAllowListEntry";
};

export const IpAllowListEntry: IpAllowListEntrySelector = {
  __typename: () => new Field("__typename"),

  allowListValue: () => new Field("allowListValue"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  isActive: () => new Field("isActive"),
  name: () => new Field("name"),

  owner: (select) =>
    new Field(
      "owner",
      undefined as never,
      new SelectionSet(select(IpAllowListOwner))
    ),

  updatedAt: () => new Field("updatedAt"),
};

export interface IIpAllowListEntryConnection {
  edges: IIpAllowListEntryEdge[];
  nodes: IIpAllowListEntry[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface IpAllowListEntryConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: IpAllowListEntryEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: IpAllowListEntrySelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const IpAllowListEntryConnection: IpAllowListEntryConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(IpAllowListEntryEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(IpAllowListEntry))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IIpAllowListEntryEdge {
  cursor: string;
  node: IIpAllowListEntry;
}

interface IpAllowListEntryEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: IpAllowListEntrySelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const IpAllowListEntryEdge: IpAllowListEntryEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(IpAllowListEntry))
    ),
};

export interface IIssue
  extends IAssignable,
    IClosable,
    IComment,
    ILabelable,
    ILockable,
    INode,
    IReactable,
    IRepositoryNode,
    ISubscribable,
    IUniformResourceLocatable,
    IUpdatable,
    IUpdatableComment {
  __typename: "Issue";
  bodyResourcePath: unknown;
  bodyUrl: unknown;
  comments: IIssueCommentConnection;
  hovercard: IHovercard;
  isReadByViewer: boolean;
  milestone: IMilestone;
  number: number;
  participants: IUserConnection;
  projectCards: IProjectCardConnection;
  state: IssueState;
  timeline: IIssueTimelineConnection;
  timelineItems: IIssueTimelineItemsConnection;
  title: string;
}

interface IssueSelector {
  __typename: () => Field<"__typename">;

  activeLockReason: () => Field<"activeLockReason">;

  assignees: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserConnectionSelector) => T
  ) => Field<
    "assignees",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  author: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"author", never, SelectionSet<T>>;

  authorAssociation: () => Field<"authorAssociation">;

  body: () => Field<"body">;

  bodyHTML: () => Field<"bodyHTML">;

  bodyResourcePath: () => Field<"bodyResourcePath">;

  bodyText: () => Field<"bodyText">;

  bodyUrl: () => Field<"bodyUrl">;

  closed: () => Field<"closed">;

  closedAt: () => Field<"closedAt">;

  comments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IssueCommentOrder;
    },
    select: (t: IssueCommentConnectionSelector) => T
  ) => Field<
    "comments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IssueCommentOrder>
    ],
    SelectionSet<T>
  >;

  createdAt: () => Field<"createdAt">;

  createdViaEmail: () => Field<"createdViaEmail">;

  databaseId: () => Field<"databaseId">;

  editor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"editor", never, SelectionSet<T>>;

  hovercard: <T extends Array<Selection>>(
    variables: {
      includeNotificationContexts?:
        | Variable<"includeNotificationContexts">
        | boolean;
    },
    select: (t: HovercardSelector) => T
  ) => Field<
    "hovercard",
    [
      Argument<
        "includeNotificationContexts",
        Variable<"includeNotificationContexts"> | boolean
      >
    ],
    SelectionSet<T>
  >;

  id: () => Field<"id">;

  includesCreatedEdit: () => Field<"includesCreatedEdit">;

  isReadByViewer: () => Field<"isReadByViewer">;

  labels: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | LabelOrder;
    },
    select: (t: LabelConnectionSelector) => T
  ) => Field<
    "labels",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | LabelOrder>
    ],
    SelectionSet<T>
  >;

  lastEditedAt: () => Field<"lastEditedAt">;

  locked: () => Field<"locked">;

  milestone: <T extends Array<Selection>>(
    select: (t: MilestoneSelector) => T
  ) => Field<"milestone", never, SelectionSet<T>>;

  number: () => Field<"number">;

  participants: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserConnectionSelector) => T
  ) => Field<
    "participants",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  projectCards: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      archivedStates?: Variable<"archivedStates"> | ProjectCardArchivedState;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: ProjectCardConnectionSelector) => T
  ) => Field<
    "projectCards",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<
        "archivedStates",
        Variable<"archivedStates"> | ProjectCardArchivedState
      >,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  publishedAt: () => Field<"publishedAt">;

  reactionGroups: <T extends Array<Selection>>(
    select: (t: ReactionGroupSelector) => T
  ) => Field<"reactionGroups", never, SelectionSet<T>>;

  reactions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      content?: Variable<"content"> | ReactionContent;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ReactionOrder;
    },
    select: (t: ReactionConnectionSelector) => T
  ) => Field<
    "reactions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"content", Variable<"content"> | ReactionContent>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ReactionOrder>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  state: () => Field<"state">;

  /**
   * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.
   */

  timeline: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      since?: Variable<"since"> | unknown;
    },
    select: (t: IssueTimelineConnectionSelector) => T
  ) => Field<
    "timeline",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"since", Variable<"since"> | unknown>
    ],
    SelectionSet<T>
  >;

  timelineItems: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      itemTypes?: Variable<"itemTypes"> | IssueTimelineItemsItemType;
      last?: Variable<"last"> | number;
      since?: Variable<"since"> | unknown;
      skip?: Variable<"skip"> | number;
    },
    select: (t: IssueTimelineItemsConnectionSelector) => T
  ) => Field<
    "timelineItems",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"itemTypes", Variable<"itemTypes"> | IssueTimelineItemsItemType>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"since", Variable<"since"> | unknown>,
      Argument<"skip", Variable<"skip"> | number>
    ],
    SelectionSet<T>
  >;

  title: () => Field<"title">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  userContentEdits: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserContentEditConnectionSelector) => T
  ) => Field<
    "userContentEdits",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  viewerCanReact: () => Field<"viewerCanReact">;

  viewerCanSubscribe: () => Field<"viewerCanSubscribe">;

  viewerCanUpdate: () => Field<"viewerCanUpdate">;

  viewerCannotUpdateReasons: () => Field<"viewerCannotUpdateReasons">;

  viewerDidAuthor: () => Field<"viewerDidAuthor">;

  viewerSubscription: () => Field<"viewerSubscription">;
}

export const isIssue = (
  object: Record<string, any>
): object is Partial<IIssue> => {
  return object.__typename === "Issue";
};

export const Issue: IssueSelector = {
  __typename: () => new Field("__typename"),

  activeLockReason: () => new Field("activeLockReason"),

  assignees: (variables, select) =>
    new Field(
      "assignees",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserConnection))
    ),

  author: (select) =>
    new Field("author", undefined as never, new SelectionSet(select(Actor))),

  authorAssociation: () => new Field("authorAssociation"),
  body: () => new Field("body"),
  bodyHTML: () => new Field("bodyHTML"),
  bodyResourcePath: () => new Field("bodyResourcePath"),
  bodyText: () => new Field("bodyText"),
  bodyUrl: () => new Field("bodyUrl"),
  closed: () => new Field("closed"),
  closedAt: () => new Field("closedAt"),

  comments: (variables, select) =>
    new Field(
      "comments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(IssueCommentConnection))
    ),

  createdAt: () => new Field("createdAt"),
  createdViaEmail: () => new Field("createdViaEmail"),
  databaseId: () => new Field("databaseId"),

  editor: (select) =>
    new Field("editor", undefined as never, new SelectionSet(select(Actor))),

  hovercard: (variables, select) =>
    new Field(
      "hovercard",
      [
        new Argument(
          "includeNotificationContexts",
          variables.includeNotificationContexts
        ),
      ],
      new SelectionSet(select(Hovercard))
    ),

  id: () => new Field("id"),
  includesCreatedEdit: () => new Field("includesCreatedEdit"),
  isReadByViewer: () => new Field("isReadByViewer"),

  labels: (variables, select) =>
    new Field(
      "labels",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(LabelConnection))
    ),

  lastEditedAt: () => new Field("lastEditedAt"),
  locked: () => new Field("locked"),

  milestone: (select) =>
    new Field(
      "milestone",
      undefined as never,
      new SelectionSet(select(Milestone))
    ),

  number: () => new Field("number"),

  participants: (variables, select) =>
    new Field(
      "participants",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserConnection))
    ),

  projectCards: (variables, select) =>
    new Field(
      "projectCards",
      [
        new Argument("after", variables.after),
        new Argument(
          "archivedStates",
          variables.archivedStates,
          ProjectCardArchivedState
        ),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(ProjectCardConnection))
    ),

  publishedAt: () => new Field("publishedAt"),

  reactionGroups: (select) =>
    new Field(
      "reactionGroups",
      undefined as never,
      new SelectionSet(select(ReactionGroup))
    ),

  reactions: (variables, select) =>
    new Field(
      "reactions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("content", variables.content, ReactionContent),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(ReactionConnection))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  state: () => new Field("state"),

  /**
   * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.
   */

  timeline: (variables, select) =>
    new Field(
      "timeline",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("since", variables.since),
      ],
      new SelectionSet(select(IssueTimelineConnection))
    ),

  timelineItems: (variables, select) =>
    new Field(
      "timelineItems",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument(
          "itemTypes",
          variables.itemTypes,
          IssueTimelineItemsItemType
        ),
        new Argument("last", variables.last),
        new Argument("since", variables.since),
        new Argument("skip", variables.skip),
      ],
      new SelectionSet(select(IssueTimelineItemsConnection))
    ),

  title: () => new Field("title"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),

  userContentEdits: (variables, select) =>
    new Field(
      "userContentEdits",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserContentEditConnection))
    ),

  viewerCanReact: () => new Field("viewerCanReact"),
  viewerCanSubscribe: () => new Field("viewerCanSubscribe"),
  viewerCanUpdate: () => new Field("viewerCanUpdate"),
  viewerCannotUpdateReasons: () => new Field("viewerCannotUpdateReasons"),
  viewerDidAuthor: () => new Field("viewerDidAuthor"),
  viewerSubscription: () => new Field("viewerSubscription"),
};

export interface IIssueComment
  extends IComment,
    IDeletable,
    IMinimizable,
    INode,
    IReactable,
    IRepositoryNode,
    IUpdatable,
    IUpdatableComment {
  __typename: "IssueComment";
  issue: IIssue;
  pullRequest: IPullRequest;
  resourcePath: unknown;
  url: unknown;
}

interface IssueCommentSelector {
  __typename: () => Field<"__typename">;

  author: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"author", never, SelectionSet<T>>;

  authorAssociation: () => Field<"authorAssociation">;

  body: () => Field<"body">;

  bodyHTML: () => Field<"bodyHTML">;

  bodyText: () => Field<"bodyText">;

  createdAt: () => Field<"createdAt">;

  createdViaEmail: () => Field<"createdViaEmail">;

  databaseId: () => Field<"databaseId">;

  editor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"editor", never, SelectionSet<T>>;

  id: () => Field<"id">;

  includesCreatedEdit: () => Field<"includesCreatedEdit">;

  isMinimized: () => Field<"isMinimized">;

  issue: <T extends Array<Selection>>(
    select: (t: IssueSelector) => T
  ) => Field<"issue", never, SelectionSet<T>>;

  lastEditedAt: () => Field<"lastEditedAt">;

  minimizedReason: () => Field<"minimizedReason">;

  publishedAt: () => Field<"publishedAt">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  reactionGroups: <T extends Array<Selection>>(
    select: (t: ReactionGroupSelector) => T
  ) => Field<"reactionGroups", never, SelectionSet<T>>;

  reactions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      content?: Variable<"content"> | ReactionContent;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ReactionOrder;
    },
    select: (t: ReactionConnectionSelector) => T
  ) => Field<
    "reactions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"content", Variable<"content"> | ReactionContent>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ReactionOrder>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  userContentEdits: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserContentEditConnectionSelector) => T
  ) => Field<
    "userContentEdits",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  viewerCanDelete: () => Field<"viewerCanDelete">;

  viewerCanMinimize: () => Field<"viewerCanMinimize">;

  viewerCanReact: () => Field<"viewerCanReact">;

  viewerCanUpdate: () => Field<"viewerCanUpdate">;

  viewerCannotUpdateReasons: () => Field<"viewerCannotUpdateReasons">;

  viewerDidAuthor: () => Field<"viewerDidAuthor">;
}

export const isIssueComment = (
  object: Record<string, any>
): object is Partial<IIssueComment> => {
  return object.__typename === "IssueComment";
};

export const IssueComment: IssueCommentSelector = {
  __typename: () => new Field("__typename"),

  author: (select) =>
    new Field("author", undefined as never, new SelectionSet(select(Actor))),

  authorAssociation: () => new Field("authorAssociation"),
  body: () => new Field("body"),
  bodyHTML: () => new Field("bodyHTML"),
  bodyText: () => new Field("bodyText"),
  createdAt: () => new Field("createdAt"),
  createdViaEmail: () => new Field("createdViaEmail"),
  databaseId: () => new Field("databaseId"),

  editor: (select) =>
    new Field("editor", undefined as never, new SelectionSet(select(Actor))),

  id: () => new Field("id"),
  includesCreatedEdit: () => new Field("includesCreatedEdit"),
  isMinimized: () => new Field("isMinimized"),

  issue: (select) =>
    new Field("issue", undefined as never, new SelectionSet(select(Issue))),

  lastEditedAt: () => new Field("lastEditedAt"),
  minimizedReason: () => new Field("minimizedReason"),
  publishedAt: () => new Field("publishedAt"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  reactionGroups: (select) =>
    new Field(
      "reactionGroups",
      undefined as never,
      new SelectionSet(select(ReactionGroup))
    ),

  reactions: (variables, select) =>
    new Field(
      "reactions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("content", variables.content, ReactionContent),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(ReactionConnection))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),

  userContentEdits: (variables, select) =>
    new Field(
      "userContentEdits",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserContentEditConnection))
    ),

  viewerCanDelete: () => new Field("viewerCanDelete"),
  viewerCanMinimize: () => new Field("viewerCanMinimize"),
  viewerCanReact: () => new Field("viewerCanReact"),
  viewerCanUpdate: () => new Field("viewerCanUpdate"),
  viewerCannotUpdateReasons: () => new Field("viewerCannotUpdateReasons"),
  viewerDidAuthor: () => new Field("viewerDidAuthor"),
};

export interface IIssueCommentConnection {
  edges: IIssueCommentEdge[];
  nodes: IIssueComment[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface IssueCommentConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: IssueCommentEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: IssueCommentSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const IssueCommentConnection: IssueCommentConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(IssueCommentEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(IssueComment))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IIssueCommentEdge {
  cursor: string;
  node: IIssueComment;
}

interface IssueCommentEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: IssueCommentSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const IssueCommentEdge: IssueCommentEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(IssueComment))
    ),
};

export interface IIssueConnection {
  edges: IIssueEdge[];
  nodes: IIssue[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface IssueConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: IssueEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: IssueSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const IssueConnection: IssueConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field("edges", undefined as never, new SelectionSet(select(IssueEdge))),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(Issue))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IIssueContributionsByRepository {
  contributions: ICreatedIssueContributionConnection;
  repository: IRepository;
}

interface IssueContributionsByRepositorySelector {
  __typename: () => Field<"__typename">;

  contributions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ContributionOrder;
    },
    select: (t: CreatedIssueContributionConnectionSelector) => T
  ) => Field<
    "contributions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ContributionOrder>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const IssueContributionsByRepository: IssueContributionsByRepositorySelector = {
  __typename: () => new Field("__typename"),

  contributions: (variables, select) =>
    new Field(
      "contributions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(CreatedIssueContributionConnection))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface IIssueEdge {
  cursor: string;
  node: IIssue;
}

interface IssueEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: IssueSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const IssueEdge: IssueEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Issue))),
};

export interface IIssueTemplate {
  about: string;
  body: string;
  name: string;
  title: string;
}

interface IssueTemplateSelector {
  __typename: () => Field<"__typename">;

  about: () => Field<"about">;

  body: () => Field<"body">;

  name: () => Field<"name">;

  title: () => Field<"title">;
}

export const IssueTemplate: IssueTemplateSelector = {
  __typename: () => new Field("__typename"),

  about: () => new Field("about"),
  body: () => new Field("body"),
  name: () => new Field("name"),
  title: () => new Field("title"),
};

export interface IIssueTimelineConnection {
  edges: IIssueTimelineItemEdge[];
  nodes: IIssueTimelineItem[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface IssueTimelineConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: IssueTimelineItemEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: IssueTimelineItemSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const IssueTimelineConnection: IssueTimelineConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(IssueTimelineItemEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(IssueTimelineItem))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IIssueTimelineItemEdge {
  cursor: string;
  node: IIssueTimelineItem;
}

interface IssueTimelineItemEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: IssueTimelineItemSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const IssueTimelineItemEdge: IssueTimelineItemEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(IssueTimelineItem))
    ),
};

export interface IIssueTimelineItemsConnection {
  edges: IIssueTimelineItemsEdge[];
  filteredCount: number;
  nodes: IIssueTimelineItems[];
  pageCount: number;
  pageInfo: IPageInfo;
  totalCount: number;
  updatedAt: unknown;
}

interface IssueTimelineItemsConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: IssueTimelineItemsEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  filteredCount: () => Field<"filteredCount">;

  nodes: <T extends Array<Selection>>(
    select: (t: IssueTimelineItemsSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageCount: () => Field<"pageCount">;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;

  updatedAt: () => Field<"updatedAt">;
}

export const IssueTimelineItemsConnection: IssueTimelineItemsConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(IssueTimelineItemsEdge))
    ),

  filteredCount: () => new Field("filteredCount"),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(IssueTimelineItems))
    ),

  pageCount: () => new Field("pageCount"),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
  updatedAt: () => new Field("updatedAt"),
};

export interface IIssueTimelineItemsEdge {
  cursor: string;
  node: IIssueTimelineItems;
}

interface IssueTimelineItemsEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: IssueTimelineItemsSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const IssueTimelineItemsEdge: IssueTimelineItemsEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(IssueTimelineItems))
    ),
};

export interface IJoinedGitHubContribution extends IContribution {
  __typename: "JoinedGitHubContribution";
}

interface JoinedGitHubContributionSelector {
  __typename: () => Field<"__typename">;

  isRestricted: () => Field<"isRestricted">;

  occurredAt: () => Field<"occurredAt">;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const isJoinedGitHubContribution = (
  object: Record<string, any>
): object is Partial<IJoinedGitHubContribution> => {
  return object.__typename === "JoinedGitHubContribution";
};

export const JoinedGitHubContribution: JoinedGitHubContributionSelector = {
  __typename: () => new Field("__typename"),

  isRestricted: () => new Field("isRestricted"),
  occurredAt: () => new Field("occurredAt"),
  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface ILabel extends INode {
  __typename: "Label";
  color: string;
  createdAt: unknown;
  description: string;
  isDefault: boolean;
  issues: IIssueConnection;
  name: string;
  pullRequests: IPullRequestConnection;
  repository: IRepository;
  resourcePath: unknown;
  updatedAt: unknown;
  url: unknown;
}

interface LabelSelector {
  __typename: () => Field<"__typename">;

  color: () => Field<"color">;

  createdAt: () => Field<"createdAt">;

  description: () => Field<"description">;

  id: () => Field<"id">;

  isDefault: () => Field<"isDefault">;

  issues: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      filterBy?: Variable<"filterBy"> | IssueFilters;
      first?: Variable<"first"> | number;
      labels?: Variable<"labels"> | string;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IssueOrder;
      states?: Variable<"states"> | IssueState;
    },
    select: (t: IssueConnectionSelector) => T
  ) => Field<
    "issues",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"filterBy", Variable<"filterBy"> | IssueFilters>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"labels", Variable<"labels"> | string>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IssueOrder>,
      Argument<"states", Variable<"states"> | IssueState>
    ],
    SelectionSet<T>
  >;

  name: () => Field<"name">;

  pullRequests: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      baseRefName?: Variable<"baseRefName"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      headRefName?: Variable<"headRefName"> | string;
      labels?: Variable<"labels"> | string;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IssueOrder;
      states?: Variable<"states"> | PullRequestState;
    },
    select: (t: PullRequestConnectionSelector) => T
  ) => Field<
    "pullRequests",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"baseRefName", Variable<"baseRefName"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"headRefName", Variable<"headRefName"> | string>,
      Argument<"labels", Variable<"labels"> | string>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IssueOrder>,
      Argument<"states", Variable<"states"> | PullRequestState>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;
}

export const isLabel = (
  object: Record<string, any>
): object is Partial<ILabel> => {
  return object.__typename === "Label";
};

export const Label: LabelSelector = {
  __typename: () => new Field("__typename"),

  color: () => new Field("color"),
  createdAt: () => new Field("createdAt"),
  description: () => new Field("description"),
  id: () => new Field("id"),
  isDefault: () => new Field("isDefault"),

  issues: (variables, select) =>
    new Field(
      "issues",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("filterBy", variables.filterBy),
        new Argument("first", variables.first),
        new Argument("labels", variables.labels),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("states", variables.states, IssueState),
      ],
      new SelectionSet(select(IssueConnection))
    ),

  name: () => new Field("name"),

  pullRequests: (variables, select) =>
    new Field(
      "pullRequests",
      [
        new Argument("after", variables.after),
        new Argument("baseRefName", variables.baseRefName),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("headRefName", variables.headRefName),
        new Argument("labels", variables.labels),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("states", variables.states, PullRequestState),
      ],
      new SelectionSet(select(PullRequestConnection))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
};

export interface ILabelConnection {
  edges: ILabelEdge[];
  nodes: ILabel[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface LabelConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: LabelEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: LabelSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const LabelConnection: LabelConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field("edges", undefined as never, new SelectionSet(select(LabelEdge))),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(Label))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ILabelEdge {
  cursor: string;
  node: ILabel;
}

interface LabelEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: LabelSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const LabelEdge: LabelEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Label))),
};

export interface ILabelable {
  __typename: string;
  labels: ILabelConnection;
}

interface LabelableSelector {
  __typename: () => Field<"__typename">;

  labels: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | LabelOrder;
    },
    select: (t: LabelConnectionSelector) => T
  ) => Field<
    "labels",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | LabelOrder>
    ],
    SelectionSet<T>
  >;

  on: <T extends Array<Selection>, F extends "Issue" | "PullRequest">(
    type: F,
    select: (
      t: F extends "Issue"
        ? IssueSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Labelable: LabelableSelector = {
  __typename: () => new Field("__typename"),

  labels: (variables, select) =>
    new Field(
      "labels",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(LabelConnection))
    ),

  on: (type, select) => {
    switch (type) {
      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface ILabeledEvent extends INode {
  __typename: "LabeledEvent";
  actor: IActor;
  createdAt: unknown;
  label: ILabel;
  labelable: ILabelable;
}

interface LabeledEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  label: <T extends Array<Selection>>(
    select: (t: LabelSelector) => T
  ) => Field<"label", never, SelectionSet<T>>;

  labelable: <T extends Array<Selection>>(
    select: (t: LabelableSelector) => T
  ) => Field<"labelable", never, SelectionSet<T>>;
}

export const isLabeledEvent = (
  object: Record<string, any>
): object is Partial<ILabeledEvent> => {
  return object.__typename === "LabeledEvent";
};

export const LabeledEvent: LabeledEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  label: (select) =>
    new Field("label", undefined as never, new SelectionSet(select(Label))),

  labelable: (select) =>
    new Field(
      "labelable",
      undefined as never,
      new SelectionSet(select(Labelable))
    ),
};

export interface ILanguage extends INode {
  __typename: "Language";
  color: string;
  name: string;
}

interface LanguageSelector {
  __typename: () => Field<"__typename">;

  color: () => Field<"color">;

  id: () => Field<"id">;

  name: () => Field<"name">;
}

export const isLanguage = (
  object: Record<string, any>
): object is Partial<ILanguage> => {
  return object.__typename === "Language";
};

export const Language: LanguageSelector = {
  __typename: () => new Field("__typename"),

  color: () => new Field("color"),
  id: () => new Field("id"),
  name: () => new Field("name"),
};

export interface ILanguageConnection {
  edges: ILanguageEdge[];
  nodes: ILanguage[];
  pageInfo: IPageInfo;
  totalCount: number;
  totalSize: number;
}

interface LanguageConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: LanguageEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: LanguageSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;

  totalSize: () => Field<"totalSize">;
}

export const LanguageConnection: LanguageConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(LanguageEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(Language))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
  totalSize: () => new Field("totalSize"),
};

export interface ILanguageEdge {
  cursor: string;
  node: ILanguage;
  size: number;
}

interface LanguageEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: LanguageSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;

  size: () => Field<"size">;
}

export const LanguageEdge: LanguageEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Language))),

  size: () => new Field("size"),
};

export interface ILicense extends INode {
  __typename: "License";
  body: string;
  conditions: ILicenseRule[];
  description: string;
  featured: boolean;
  hidden: boolean;
  implementation: string;
  key: string;
  limitations: ILicenseRule[];
  name: string;
  nickname: string;
  permissions: ILicenseRule[];
  pseudoLicense: boolean;
  spdxId: string;
  url: unknown;
}

interface LicenseSelector {
  __typename: () => Field<"__typename">;

  body: () => Field<"body">;

  conditions: <T extends Array<Selection>>(
    select: (t: LicenseRuleSelector) => T
  ) => Field<"conditions", never, SelectionSet<T>>;

  description: () => Field<"description">;

  featured: () => Field<"featured">;

  hidden: () => Field<"hidden">;

  id: () => Field<"id">;

  implementation: () => Field<"implementation">;

  key: () => Field<"key">;

  limitations: <T extends Array<Selection>>(
    select: (t: LicenseRuleSelector) => T
  ) => Field<"limitations", never, SelectionSet<T>>;

  name: () => Field<"name">;

  nickname: () => Field<"nickname">;

  permissions: <T extends Array<Selection>>(
    select: (t: LicenseRuleSelector) => T
  ) => Field<"permissions", never, SelectionSet<T>>;

  pseudoLicense: () => Field<"pseudoLicense">;

  spdxId: () => Field<"spdxId">;

  url: () => Field<"url">;
}

export const isLicense = (
  object: Record<string, any>
): object is Partial<ILicense> => {
  return object.__typename === "License";
};

export const License: LicenseSelector = {
  __typename: () => new Field("__typename"),

  body: () => new Field("body"),

  conditions: (select) =>
    new Field(
      "conditions",
      undefined as never,
      new SelectionSet(select(LicenseRule))
    ),

  description: () => new Field("description"),
  featured: () => new Field("featured"),
  hidden: () => new Field("hidden"),
  id: () => new Field("id"),
  implementation: () => new Field("implementation"),
  key: () => new Field("key"),

  limitations: (select) =>
    new Field(
      "limitations",
      undefined as never,
      new SelectionSet(select(LicenseRule))
    ),

  name: () => new Field("name"),
  nickname: () => new Field("nickname"),

  permissions: (select) =>
    new Field(
      "permissions",
      undefined as never,
      new SelectionSet(select(LicenseRule))
    ),

  pseudoLicense: () => new Field("pseudoLicense"),
  spdxId: () => new Field("spdxId"),
  url: () => new Field("url"),
};

export interface ILicenseRule {
  description: string;
  key: string;
  label: string;
}

interface LicenseRuleSelector {
  __typename: () => Field<"__typename">;

  description: () => Field<"description">;

  key: () => Field<"key">;

  label: () => Field<"label">;
}

export const LicenseRule: LicenseRuleSelector = {
  __typename: () => new Field("__typename"),

  description: () => new Field("description"),
  key: () => new Field("key"),
  label: () => new Field("label"),
};

export interface ILinkRepositoryToProjectPayload {
  clientMutationId: string;
  project: IProject;
  repository: IRepository;
}

interface LinkRepositoryToProjectPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  project: <T extends Array<Selection>>(
    select: (t: ProjectSelector) => T
  ) => Field<"project", never, SelectionSet<T>>;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const LinkRepositoryToProjectPayload: LinkRepositoryToProjectPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  project: (select) =>
    new Field("project", undefined as never, new SelectionSet(select(Project))),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface ILockLockablePayload {
  actor: IActor;
  clientMutationId: string;
  lockedRecord: ILockable;
}

interface LockLockablePayloadSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;

  lockedRecord: <T extends Array<Selection>>(
    select: (t: LockableSelector) => T
  ) => Field<"lockedRecord", never, SelectionSet<T>>;
}

export const LockLockablePayload: LockLockablePayloadSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  clientMutationId: () => new Field("clientMutationId"),

  lockedRecord: (select) =>
    new Field(
      "lockedRecord",
      undefined as never,
      new SelectionSet(select(Lockable))
    ),
};

export interface ILockable {
  __typename: string;
  activeLockReason: LockReason;
  locked: boolean;
}

interface LockableSelector {
  __typename: () => Field<"__typename">;

  activeLockReason: () => Field<"activeLockReason">;

  locked: () => Field<"locked">;

  on: <T extends Array<Selection>, F extends "Issue" | "PullRequest">(
    type: F,
    select: (
      t: F extends "Issue"
        ? IssueSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Lockable: LockableSelector = {
  __typename: () => new Field("__typename"),

  activeLockReason: () => new Field("activeLockReason"),
  locked: () => new Field("locked"),

  on: (type, select) => {
    switch (type) {
      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface ILockedEvent extends INode {
  __typename: "LockedEvent";
  actor: IActor;
  createdAt: unknown;
  lockReason: LockReason;
  lockable: ILockable;
}

interface LockedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  lockReason: () => Field<"lockReason">;

  lockable: <T extends Array<Selection>>(
    select: (t: LockableSelector) => T
  ) => Field<"lockable", never, SelectionSet<T>>;
}

export const isLockedEvent = (
  object: Record<string, any>
): object is Partial<ILockedEvent> => {
  return object.__typename === "LockedEvent";
};

export const LockedEvent: LockedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  lockReason: () => new Field("lockReason"),

  lockable: (select) =>
    new Field(
      "lockable",
      undefined as never,
      new SelectionSet(select(Lockable))
    ),
};

export interface IMannequin extends IActor, INode, IUniformResourceLocatable {
  __typename: "Mannequin";
  createdAt: unknown;
  databaseId: number;
  email: string;
  updatedAt: unknown;
}

interface MannequinSelector {
  __typename: () => Field<"__typename">;

  avatarUrl: (variables: {
    size: unknown;
  }) => Field<"avatarUrl", [/* @todo */]>;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  email: () => Field<"email">;

  id: () => Field<"id">;

  login: () => Field<"login">;

  resourcePath: () => Field<"resourcePath">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;
}

export const isMannequin = (
  object: Record<string, any>
): object is Partial<IMannequin> => {
  return object.__typename === "Mannequin";
};

export const Mannequin: MannequinSelector = {
  __typename: () => new Field("__typename"),

  avatarUrl: (variables) => new Field("avatarUrl"),
  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  email: () => new Field("email"),
  id: () => new Field("id"),
  login: () => new Field("login"),
  resourcePath: () => new Field("resourcePath"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
};

export interface IMarkFileAsViewedPayload {
  clientMutationId: string;
  pullRequest: IPullRequest;
}

interface MarkFileAsViewedPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const MarkFileAsViewedPayload: MarkFileAsViewedPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IMarkPullRequestReadyForReviewPayload {
  clientMutationId: string;
  pullRequest: IPullRequest;
}

interface MarkPullRequestReadyForReviewPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const MarkPullRequestReadyForReviewPayload: MarkPullRequestReadyForReviewPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IMarkedAsDuplicateEvent extends INode {
  __typename: "MarkedAsDuplicateEvent";
  actor: IActor;
  canonical: IIssueOrPullRequest;
  createdAt: unknown;
  duplicate: IIssueOrPullRequest;
  isCrossRepository: boolean;
}

interface MarkedAsDuplicateEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  canonical: <T extends Array<Selection>>(
    select: (t: IssueOrPullRequestSelector) => T
  ) => Field<"canonical", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  duplicate: <T extends Array<Selection>>(
    select: (t: IssueOrPullRequestSelector) => T
  ) => Field<"duplicate", never, SelectionSet<T>>;

  id: () => Field<"id">;

  isCrossRepository: () => Field<"isCrossRepository">;
}

export const isMarkedAsDuplicateEvent = (
  object: Record<string, any>
): object is Partial<IMarkedAsDuplicateEvent> => {
  return object.__typename === "MarkedAsDuplicateEvent";
};

export const MarkedAsDuplicateEvent: MarkedAsDuplicateEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  canonical: (select) =>
    new Field(
      "canonical",
      undefined as never,
      new SelectionSet(select(IssueOrPullRequest))
    ),

  createdAt: () => new Field("createdAt"),

  duplicate: (select) =>
    new Field(
      "duplicate",
      undefined as never,
      new SelectionSet(select(IssueOrPullRequest))
    ),

  id: () => new Field("id"),
  isCrossRepository: () => new Field("isCrossRepository"),
};

export interface IMarketplaceCategory extends INode {
  __typename: "MarketplaceCategory";
  description: string;
  howItWorks: string;
  name: string;
  primaryListingCount: number;
  resourcePath: unknown;
  secondaryListingCount: number;
  slug: string;
  url: unknown;
}

interface MarketplaceCategorySelector {
  __typename: () => Field<"__typename">;

  description: () => Field<"description">;

  howItWorks: () => Field<"howItWorks">;

  id: () => Field<"id">;

  name: () => Field<"name">;

  primaryListingCount: () => Field<"primaryListingCount">;

  resourcePath: () => Field<"resourcePath">;

  secondaryListingCount: () => Field<"secondaryListingCount">;

  slug: () => Field<"slug">;

  url: () => Field<"url">;
}

export const isMarketplaceCategory = (
  object: Record<string, any>
): object is Partial<IMarketplaceCategory> => {
  return object.__typename === "MarketplaceCategory";
};

export const MarketplaceCategory: MarketplaceCategorySelector = {
  __typename: () => new Field("__typename"),

  description: () => new Field("description"),
  howItWorks: () => new Field("howItWorks"),
  id: () => new Field("id"),
  name: () => new Field("name"),
  primaryListingCount: () => new Field("primaryListingCount"),
  resourcePath: () => new Field("resourcePath"),
  secondaryListingCount: () => new Field("secondaryListingCount"),
  slug: () => new Field("slug"),
  url: () => new Field("url"),
};

export interface IMarketplaceListing extends INode {
  __typename: "MarketplaceListing";
  app: IApp;
  companyUrl: unknown;
  configurationResourcePath: unknown;
  configurationUrl: unknown;
  documentationUrl: unknown;
  extendedDescription: string;
  extendedDescriptionHTML: unknown;
  fullDescription: string;
  fullDescriptionHTML: unknown;
  hasPublishedFreeTrialPlans: boolean;
  hasTermsOfService: boolean;
  hasVerifiedOwner: boolean;
  howItWorks: string;
  howItWorksHTML: unknown;
  installationUrl: unknown;
  installedForViewer: boolean;
  isArchived: boolean;
  isDraft: boolean;
  isPaid: boolean;
  isPublic: boolean;
  isRejected: boolean;
  isUnverified: boolean;
  isUnverifiedPending: boolean;
  isVerificationPendingFromDraft: boolean;
  isVerificationPendingFromUnverified: boolean;
  isVerified: boolean;
  logoBackgroundColor: string;
  logoUrl: unknown;
  name: string;
  normalizedShortDescription: string;
  pricingUrl: unknown;
  primaryCategory: IMarketplaceCategory;
  privacyPolicyUrl: unknown;
  resourcePath: unknown;
  screenshotUrls: string[];
  secondaryCategory: IMarketplaceCategory;
  shortDescription: string;
  slug: string;
  statusUrl: unknown;
  supportEmail: string;
  supportUrl: unknown;
  termsOfServiceUrl: unknown;
  url: unknown;
  viewerCanAddPlans: boolean;
  viewerCanApprove: boolean;
  viewerCanDelist: boolean;
  viewerCanEdit: boolean;
  viewerCanEditCategories: boolean;
  viewerCanEditPlans: boolean;
  viewerCanRedraft: boolean;
  viewerCanReject: boolean;
  viewerCanRequestApproval: boolean;
  viewerHasPurchased: boolean;
  viewerHasPurchasedForAllOrganizations: boolean;
  viewerIsListingAdmin: boolean;
}

interface MarketplaceListingSelector {
  __typename: () => Field<"__typename">;

  app: <T extends Array<Selection>>(
    select: (t: AppSelector) => T
  ) => Field<"app", never, SelectionSet<T>>;

  companyUrl: () => Field<"companyUrl">;

  configurationResourcePath: () => Field<"configurationResourcePath">;

  configurationUrl: () => Field<"configurationUrl">;

  documentationUrl: () => Field<"documentationUrl">;

  extendedDescription: () => Field<"extendedDescription">;

  extendedDescriptionHTML: () => Field<"extendedDescriptionHTML">;

  fullDescription: () => Field<"fullDescription">;

  fullDescriptionHTML: () => Field<"fullDescriptionHTML">;

  hasPublishedFreeTrialPlans: () => Field<"hasPublishedFreeTrialPlans">;

  hasTermsOfService: () => Field<"hasTermsOfService">;

  hasVerifiedOwner: () => Field<"hasVerifiedOwner">;

  howItWorks: () => Field<"howItWorks">;

  howItWorksHTML: () => Field<"howItWorksHTML">;

  id: () => Field<"id">;

  installationUrl: () => Field<"installationUrl">;

  installedForViewer: () => Field<"installedForViewer">;

  isArchived: () => Field<"isArchived">;

  isDraft: () => Field<"isDraft">;

  isPaid: () => Field<"isPaid">;

  isPublic: () => Field<"isPublic">;

  isRejected: () => Field<"isRejected">;

  isUnverified: () => Field<"isUnverified">;

  isUnverifiedPending: () => Field<"isUnverifiedPending">;

  isVerificationPendingFromDraft: () => Field<"isVerificationPendingFromDraft">;

  isVerificationPendingFromUnverified: () => Field<"isVerificationPendingFromUnverified">;

  isVerified: () => Field<"isVerified">;

  logoBackgroundColor: () => Field<"logoBackgroundColor">;

  logoUrl: (variables: { size: unknown }) => Field<"logoUrl", [/* @todo */]>;

  name: () => Field<"name">;

  normalizedShortDescription: () => Field<"normalizedShortDescription">;

  pricingUrl: () => Field<"pricingUrl">;

  primaryCategory: <T extends Array<Selection>>(
    select: (t: MarketplaceCategorySelector) => T
  ) => Field<"primaryCategory", never, SelectionSet<T>>;

  privacyPolicyUrl: () => Field<"privacyPolicyUrl">;

  resourcePath: () => Field<"resourcePath">;

  screenshotUrls: () => Field<"screenshotUrls">;

  secondaryCategory: <T extends Array<Selection>>(
    select: (t: MarketplaceCategorySelector) => T
  ) => Field<"secondaryCategory", never, SelectionSet<T>>;

  shortDescription: () => Field<"shortDescription">;

  slug: () => Field<"slug">;

  statusUrl: () => Field<"statusUrl">;

  supportEmail: () => Field<"supportEmail">;

  supportUrl: () => Field<"supportUrl">;

  termsOfServiceUrl: () => Field<"termsOfServiceUrl">;

  url: () => Field<"url">;

  viewerCanAddPlans: () => Field<"viewerCanAddPlans">;

  viewerCanApprove: () => Field<"viewerCanApprove">;

  viewerCanDelist: () => Field<"viewerCanDelist">;

  viewerCanEdit: () => Field<"viewerCanEdit">;

  viewerCanEditCategories: () => Field<"viewerCanEditCategories">;

  viewerCanEditPlans: () => Field<"viewerCanEditPlans">;

  viewerCanRedraft: () => Field<"viewerCanRedraft">;

  viewerCanReject: () => Field<"viewerCanReject">;

  viewerCanRequestApproval: () => Field<"viewerCanRequestApproval">;

  viewerHasPurchased: () => Field<"viewerHasPurchased">;

  viewerHasPurchasedForAllOrganizations: () => Field<"viewerHasPurchasedForAllOrganizations">;

  viewerIsListingAdmin: () => Field<"viewerIsListingAdmin">;
}

export const isMarketplaceListing = (
  object: Record<string, any>
): object is Partial<IMarketplaceListing> => {
  return object.__typename === "MarketplaceListing";
};

export const MarketplaceListing: MarketplaceListingSelector = {
  __typename: () => new Field("__typename"),

  app: (select) =>
    new Field("app", undefined as never, new SelectionSet(select(App))),

  companyUrl: () => new Field("companyUrl"),
  configurationResourcePath: () => new Field("configurationResourcePath"),
  configurationUrl: () => new Field("configurationUrl"),
  documentationUrl: () => new Field("documentationUrl"),
  extendedDescription: () => new Field("extendedDescription"),
  extendedDescriptionHTML: () => new Field("extendedDescriptionHTML"),
  fullDescription: () => new Field("fullDescription"),
  fullDescriptionHTML: () => new Field("fullDescriptionHTML"),
  hasPublishedFreeTrialPlans: () => new Field("hasPublishedFreeTrialPlans"),
  hasTermsOfService: () => new Field("hasTermsOfService"),
  hasVerifiedOwner: () => new Field("hasVerifiedOwner"),
  howItWorks: () => new Field("howItWorks"),
  howItWorksHTML: () => new Field("howItWorksHTML"),
  id: () => new Field("id"),
  installationUrl: () => new Field("installationUrl"),
  installedForViewer: () => new Field("installedForViewer"),
  isArchived: () => new Field("isArchived"),
  isDraft: () => new Field("isDraft"),
  isPaid: () => new Field("isPaid"),
  isPublic: () => new Field("isPublic"),
  isRejected: () => new Field("isRejected"),
  isUnverified: () => new Field("isUnverified"),
  isUnverifiedPending: () => new Field("isUnverifiedPending"),
  isVerificationPendingFromDraft: () =>
    new Field("isVerificationPendingFromDraft"),
  isVerificationPendingFromUnverified: () =>
    new Field("isVerificationPendingFromUnverified"),
  isVerified: () => new Field("isVerified"),
  logoBackgroundColor: () => new Field("logoBackgroundColor"),
  logoUrl: (variables) => new Field("logoUrl"),
  name: () => new Field("name"),
  normalizedShortDescription: () => new Field("normalizedShortDescription"),
  pricingUrl: () => new Field("pricingUrl"),

  primaryCategory: (select) =>
    new Field(
      "primaryCategory",
      undefined as never,
      new SelectionSet(select(MarketplaceCategory))
    ),

  privacyPolicyUrl: () => new Field("privacyPolicyUrl"),
  resourcePath: () => new Field("resourcePath"),
  screenshotUrls: () => new Field("screenshotUrls"),

  secondaryCategory: (select) =>
    new Field(
      "secondaryCategory",
      undefined as never,
      new SelectionSet(select(MarketplaceCategory))
    ),

  shortDescription: () => new Field("shortDescription"),
  slug: () => new Field("slug"),
  statusUrl: () => new Field("statusUrl"),
  supportEmail: () => new Field("supportEmail"),
  supportUrl: () => new Field("supportUrl"),
  termsOfServiceUrl: () => new Field("termsOfServiceUrl"),
  url: () => new Field("url"),
  viewerCanAddPlans: () => new Field("viewerCanAddPlans"),
  viewerCanApprove: () => new Field("viewerCanApprove"),
  viewerCanDelist: () => new Field("viewerCanDelist"),
  viewerCanEdit: () => new Field("viewerCanEdit"),
  viewerCanEditCategories: () => new Field("viewerCanEditCategories"),
  viewerCanEditPlans: () => new Field("viewerCanEditPlans"),
  viewerCanRedraft: () => new Field("viewerCanRedraft"),
  viewerCanReject: () => new Field("viewerCanReject"),
  viewerCanRequestApproval: () => new Field("viewerCanRequestApproval"),
  viewerHasPurchased: () => new Field("viewerHasPurchased"),
  viewerHasPurchasedForAllOrganizations: () =>
    new Field("viewerHasPurchasedForAllOrganizations"),
  viewerIsListingAdmin: () => new Field("viewerIsListingAdmin"),
};

export interface IMarketplaceListingConnection {
  edges: IMarketplaceListingEdge[];
  nodes: IMarketplaceListing[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface MarketplaceListingConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: MarketplaceListingEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: MarketplaceListingSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const MarketplaceListingConnection: MarketplaceListingConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(MarketplaceListingEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(MarketplaceListing))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IMarketplaceListingEdge {
  cursor: string;
  node: IMarketplaceListing;
}

interface MarketplaceListingEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: MarketplaceListingSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const MarketplaceListingEdge: MarketplaceListingEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(MarketplaceListing))
    ),
};

export interface IMemberStatusable {
  __typename: string;
  memberStatuses: IUserStatusConnection;
}

interface MemberStatusableSelector {
  __typename: () => Field<"__typename">;

  memberStatuses: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | UserStatusOrder;
    },
    select: (t: UserStatusConnectionSelector) => T
  ) => Field<
    "memberStatuses",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | UserStatusOrder>
    ],
    SelectionSet<T>
  >;

  on: <T extends Array<Selection>, F extends "Organization" | "Team">(
    type: F,
    select: (
      t: F extends "Organization"
        ? OrganizationSelector
        : F extends "Team"
        ? TeamSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const MemberStatusable: MemberStatusableSelector = {
  __typename: () => new Field("__typename"),

  memberStatuses: (variables, select) =>
    new Field(
      "memberStatuses",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(UserStatusConnection))
    ),

  on: (type, select) => {
    switch (type) {
      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      case "Team": {
        return new InlineFragment(
          new NamedType("Team") as any,
          new SelectionSet(select(Team as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IMembersCanDeleteReposClearAuditEntry
  extends IAuditEntry,
    IEnterpriseAuditEntryData,
    INode,
    IOrganizationAuditEntryData {
  __typename: "MembersCanDeleteReposClearAuditEntry";
}

interface MembersCanDeleteReposClearAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  enterpriseResourcePath: () => Field<"enterpriseResourcePath">;

  enterpriseSlug: () => Field<"enterpriseSlug">;

  enterpriseUrl: () => Field<"enterpriseUrl">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isMembersCanDeleteReposClearAuditEntry = (
  object: Record<string, any>
): object is Partial<IMembersCanDeleteReposClearAuditEntry> => {
  return object.__typename === "MembersCanDeleteReposClearAuditEntry";
};

export const MembersCanDeleteReposClearAuditEntry: MembersCanDeleteReposClearAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  enterpriseResourcePath: () => new Field("enterpriseResourcePath"),
  enterpriseSlug: () => new Field("enterpriseSlug"),
  enterpriseUrl: () => new Field("enterpriseUrl"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IMembersCanDeleteReposDisableAuditEntry
  extends IAuditEntry,
    IEnterpriseAuditEntryData,
    INode,
    IOrganizationAuditEntryData {
  __typename: "MembersCanDeleteReposDisableAuditEntry";
}

interface MembersCanDeleteReposDisableAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  enterpriseResourcePath: () => Field<"enterpriseResourcePath">;

  enterpriseSlug: () => Field<"enterpriseSlug">;

  enterpriseUrl: () => Field<"enterpriseUrl">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isMembersCanDeleteReposDisableAuditEntry = (
  object: Record<string, any>
): object is Partial<IMembersCanDeleteReposDisableAuditEntry> => {
  return object.__typename === "MembersCanDeleteReposDisableAuditEntry";
};

export const MembersCanDeleteReposDisableAuditEntry: MembersCanDeleteReposDisableAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  enterpriseResourcePath: () => new Field("enterpriseResourcePath"),
  enterpriseSlug: () => new Field("enterpriseSlug"),
  enterpriseUrl: () => new Field("enterpriseUrl"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IMembersCanDeleteReposEnableAuditEntry
  extends IAuditEntry,
    IEnterpriseAuditEntryData,
    INode,
    IOrganizationAuditEntryData {
  __typename: "MembersCanDeleteReposEnableAuditEntry";
}

interface MembersCanDeleteReposEnableAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  enterpriseResourcePath: () => Field<"enterpriseResourcePath">;

  enterpriseSlug: () => Field<"enterpriseSlug">;

  enterpriseUrl: () => Field<"enterpriseUrl">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isMembersCanDeleteReposEnableAuditEntry = (
  object: Record<string, any>
): object is Partial<IMembersCanDeleteReposEnableAuditEntry> => {
  return object.__typename === "MembersCanDeleteReposEnableAuditEntry";
};

export const MembersCanDeleteReposEnableAuditEntry: MembersCanDeleteReposEnableAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  enterpriseResourcePath: () => new Field("enterpriseResourcePath"),
  enterpriseSlug: () => new Field("enterpriseSlug"),
  enterpriseUrl: () => new Field("enterpriseUrl"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IMentionedEvent extends INode {
  __typename: "MentionedEvent";
  actor: IActor;
  createdAt: unknown;
  databaseId: number;
}

interface MentionedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;
}

export const isMentionedEvent = (
  object: Record<string, any>
): object is Partial<IMentionedEvent> => {
  return object.__typename === "MentionedEvent";
};

export const MentionedEvent: MentionedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),
};

export interface IMergeBranchPayload {
  clientMutationId: string;
  mergeCommit: ICommit;
}

interface MergeBranchPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  mergeCommit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"mergeCommit", never, SelectionSet<T>>;
}

export const MergeBranchPayload: MergeBranchPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  mergeCommit: (select) =>
    new Field(
      "mergeCommit",
      undefined as never,
      new SelectionSet(select(Commit))
    ),
};

export interface IMergePullRequestPayload {
  actor: IActor;
  clientMutationId: string;
  pullRequest: IPullRequest;
}

interface MergePullRequestPayloadSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const MergePullRequestPayload: MergePullRequestPayloadSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IMergedEvent extends INode, IUniformResourceLocatable {
  __typename: "MergedEvent";
  actor: IActor;
  commit: ICommit;
  createdAt: unknown;
  mergeRef: IRef;
  mergeRefName: string;
  pullRequest: IPullRequest;
}

interface MergedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  commit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"commit", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  mergeRef: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"mergeRef", never, SelectionSet<T>>;

  mergeRefName: () => Field<"mergeRefName">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;
}

export const isMergedEvent = (
  object: Record<string, any>
): object is Partial<IMergedEvent> => {
  return object.__typename === "MergedEvent";
};

export const MergedEvent: MergedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  commit: (select) =>
    new Field("commit", undefined as never, new SelectionSet(select(Commit))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  mergeRef: (select) =>
    new Field("mergeRef", undefined as never, new SelectionSet(select(Ref))),

  mergeRefName: () => new Field("mergeRefName"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),
};

export interface IMilestone
  extends IClosable,
    INode,
    IUniformResourceLocatable {
  __typename: "Milestone";
  createdAt: unknown;
  creator: IActor;
  description: string;
  dueOn: unknown;
  issues: IIssueConnection;
  number: number;
  progressPercentage: number;
  pullRequests: IPullRequestConnection;
  repository: IRepository;
  state: MilestoneState;
  title: string;
  updatedAt: unknown;
}

interface MilestoneSelector {
  __typename: () => Field<"__typename">;

  closed: () => Field<"closed">;

  closedAt: () => Field<"closedAt">;

  createdAt: () => Field<"createdAt">;

  creator: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"creator", never, SelectionSet<T>>;

  description: () => Field<"description">;

  dueOn: () => Field<"dueOn">;

  id: () => Field<"id">;

  issues: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      filterBy?: Variable<"filterBy"> | IssueFilters;
      first?: Variable<"first"> | number;
      labels?: Variable<"labels"> | string;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IssueOrder;
      states?: Variable<"states"> | IssueState;
    },
    select: (t: IssueConnectionSelector) => T
  ) => Field<
    "issues",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"filterBy", Variable<"filterBy"> | IssueFilters>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"labels", Variable<"labels"> | string>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IssueOrder>,
      Argument<"states", Variable<"states"> | IssueState>
    ],
    SelectionSet<T>
  >;

  number: () => Field<"number">;

  progressPercentage: () => Field<"progressPercentage">;

  pullRequests: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      baseRefName?: Variable<"baseRefName"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      headRefName?: Variable<"headRefName"> | string;
      labels?: Variable<"labels"> | string;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IssueOrder;
      states?: Variable<"states"> | PullRequestState;
    },
    select: (t: PullRequestConnectionSelector) => T
  ) => Field<
    "pullRequests",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"baseRefName", Variable<"baseRefName"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"headRefName", Variable<"headRefName"> | string>,
      Argument<"labels", Variable<"labels"> | string>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IssueOrder>,
      Argument<"states", Variable<"states"> | PullRequestState>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  state: () => Field<"state">;

  title: () => Field<"title">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;
}

export const isMilestone = (
  object: Record<string, any>
): object is Partial<IMilestone> => {
  return object.__typename === "Milestone";
};

export const Milestone: MilestoneSelector = {
  __typename: () => new Field("__typename"),

  closed: () => new Field("closed"),
  closedAt: () => new Field("closedAt"),
  createdAt: () => new Field("createdAt"),

  creator: (select) =>
    new Field("creator", undefined as never, new SelectionSet(select(Actor))),

  description: () => new Field("description"),
  dueOn: () => new Field("dueOn"),
  id: () => new Field("id"),

  issues: (variables, select) =>
    new Field(
      "issues",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("filterBy", variables.filterBy),
        new Argument("first", variables.first),
        new Argument("labels", variables.labels),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("states", variables.states, IssueState),
      ],
      new SelectionSet(select(IssueConnection))
    ),

  number: () => new Field("number"),
  progressPercentage: () => new Field("progressPercentage"),

  pullRequests: (variables, select) =>
    new Field(
      "pullRequests",
      [
        new Argument("after", variables.after),
        new Argument("baseRefName", variables.baseRefName),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("headRefName", variables.headRefName),
        new Argument("labels", variables.labels),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("states", variables.states, PullRequestState),
      ],
      new SelectionSet(select(PullRequestConnection))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  state: () => new Field("state"),
  title: () => new Field("title"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
};

export interface IMilestoneConnection {
  edges: IMilestoneEdge[];
  nodes: IMilestone[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface MilestoneConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: MilestoneEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: MilestoneSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const MilestoneConnection: MilestoneConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(MilestoneEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(Milestone))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IMilestoneEdge {
  cursor: string;
  node: IMilestone;
}

interface MilestoneEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: MilestoneSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const MilestoneEdge: MilestoneEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Milestone))),
};

export interface IMilestonedEvent extends INode {
  __typename: "MilestonedEvent";
  actor: IActor;
  createdAt: unknown;
  milestoneTitle: string;
  subject: IMilestoneItem;
}

interface MilestonedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  milestoneTitle: () => Field<"milestoneTitle">;

  subject: <T extends Array<Selection>>(
    select: (t: MilestoneItemSelector) => T
  ) => Field<"subject", never, SelectionSet<T>>;
}

export const isMilestonedEvent = (
  object: Record<string, any>
): object is Partial<IMilestonedEvent> => {
  return object.__typename === "MilestonedEvent";
};

export const MilestonedEvent: MilestonedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  milestoneTitle: () => new Field("milestoneTitle"),

  subject: (select) =>
    new Field(
      "subject",
      undefined as never,
      new SelectionSet(select(MilestoneItem))
    ),
};

export interface IMinimizable {
  __typename: string;
  isMinimized: boolean;
  minimizedReason: string;
  viewerCanMinimize: boolean;
}

interface MinimizableSelector {
  __typename: () => Field<"__typename">;

  isMinimized: () => Field<"isMinimized">;

  minimizedReason: () => Field<"minimizedReason">;

  viewerCanMinimize: () => Field<"viewerCanMinimize">;

  on: <
    T extends Array<Selection>,
    F extends
      | "CommitComment"
      | "GistComment"
      | "IssueComment"
      | "PullRequestReviewComment"
  >(
    type: F,
    select: (
      t: F extends "CommitComment"
        ? CommitCommentSelector
        : F extends "GistComment"
        ? GistCommentSelector
        : F extends "IssueComment"
        ? IssueCommentSelector
        : F extends "PullRequestReviewComment"
        ? PullRequestReviewCommentSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Minimizable: MinimizableSelector = {
  __typename: () => new Field("__typename"),

  isMinimized: () => new Field("isMinimized"),
  minimizedReason: () => new Field("minimizedReason"),
  viewerCanMinimize: () => new Field("viewerCanMinimize"),

  on: (type, select) => {
    switch (type) {
      case "CommitComment": {
        return new InlineFragment(
          new NamedType("CommitComment") as any,
          new SelectionSet(select(CommitComment as any))
        );
      }

      case "GistComment": {
        return new InlineFragment(
          new NamedType("GistComment") as any,
          new SelectionSet(select(GistComment as any))
        );
      }

      case "IssueComment": {
        return new InlineFragment(
          new NamedType("IssueComment") as any,
          new SelectionSet(select(IssueComment as any))
        );
      }

      case "PullRequestReviewComment": {
        return new InlineFragment(
          new NamedType("PullRequestReviewComment") as any,
          new SelectionSet(select(PullRequestReviewComment as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IMinimizeCommentPayload {
  clientMutationId: string;
  minimizedComment: IMinimizable;
}

interface MinimizeCommentPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  minimizedComment: <T extends Array<Selection>>(
    select: (t: MinimizableSelector) => T
  ) => Field<"minimizedComment", never, SelectionSet<T>>;
}

export const MinimizeCommentPayload: MinimizeCommentPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  minimizedComment: (select) =>
    new Field(
      "minimizedComment",
      undefined as never,
      new SelectionSet(select(Minimizable))
    ),
};

export interface IMoveProjectCardPayload {
  cardEdge: IProjectCardEdge;
  clientMutationId: string;
}

interface MoveProjectCardPayloadSelector {
  __typename: () => Field<"__typename">;

  cardEdge: <T extends Array<Selection>>(
    select: (t: ProjectCardEdgeSelector) => T
  ) => Field<"cardEdge", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;
}

export const MoveProjectCardPayload: MoveProjectCardPayloadSelector = {
  __typename: () => new Field("__typename"),

  cardEdge: (select) =>
    new Field(
      "cardEdge",
      undefined as never,
      new SelectionSet(select(ProjectCardEdge))
    ),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface IMoveProjectColumnPayload {
  clientMutationId: string;
  columnEdge: IProjectColumnEdge;
}

interface MoveProjectColumnPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  columnEdge: <T extends Array<Selection>>(
    select: (t: ProjectColumnEdgeSelector) => T
  ) => Field<"columnEdge", never, SelectionSet<T>>;
}

export const MoveProjectColumnPayload: MoveProjectColumnPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  columnEdge: (select) =>
    new Field(
      "columnEdge",
      undefined as never,
      new SelectionSet(select(ProjectColumnEdge))
    ),
};

export interface IMovedColumnsInProjectEvent extends INode {
  __typename: "MovedColumnsInProjectEvent";
  actor: IActor;
  createdAt: unknown;
  databaseId: number;
}

interface MovedColumnsInProjectEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;
}

export const isMovedColumnsInProjectEvent = (
  object: Record<string, any>
): object is Partial<IMovedColumnsInProjectEvent> => {
  return object.__typename === "MovedColumnsInProjectEvent";
};

export const MovedColumnsInProjectEvent: MovedColumnsInProjectEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),
};

export interface IMutation {
  acceptEnterpriseAdministratorInvitation: IAcceptEnterpriseAdministratorInvitationPayload;
  acceptTopicSuggestion: IAcceptTopicSuggestionPayload;
  addAssigneesToAssignable: IAddAssigneesToAssignablePayload;
  addComment: IAddCommentPayload;
  addLabelsToLabelable: IAddLabelsToLabelablePayload;
  addProjectCard: IAddProjectCardPayload;
  addProjectColumn: IAddProjectColumnPayload;
  addPullRequestReview: IAddPullRequestReviewPayload;
  addPullRequestReviewComment: IAddPullRequestReviewCommentPayload;
  addPullRequestReviewThread: IAddPullRequestReviewThreadPayload;
  addReaction: IAddReactionPayload;
  addStar: IAddStarPayload;
  archiveRepository: IArchiveRepositoryPayload;
  cancelEnterpriseAdminInvitation: ICancelEnterpriseAdminInvitationPayload;
  changeUserStatus: IChangeUserStatusPayload;
  clearLabelsFromLabelable: IClearLabelsFromLabelablePayload;
  cloneProject: ICloneProjectPayload;
  cloneTemplateRepository: ICloneTemplateRepositoryPayload;
  closeIssue: ICloseIssuePayload;
  closePullRequest: IClosePullRequestPayload;
  convertProjectCardNoteToIssue: IConvertProjectCardNoteToIssuePayload;
  createBranchProtectionRule: ICreateBranchProtectionRulePayload;
  createCheckRun: ICreateCheckRunPayload;
  createCheckSuite: ICreateCheckSuitePayload;
  createEnterpriseOrganization: ICreateEnterpriseOrganizationPayload;
  createIpAllowListEntry: ICreateIpAllowListEntryPayload;
  createIssue: ICreateIssuePayload;
  createProject: ICreateProjectPayload;
  createPullRequest: ICreatePullRequestPayload;
  createRef: ICreateRefPayload;
  createRepository: ICreateRepositoryPayload;
  createTeamDiscussion: ICreateTeamDiscussionPayload;
  createTeamDiscussionComment: ICreateTeamDiscussionCommentPayload;
  declineTopicSuggestion: IDeclineTopicSuggestionPayload;
  deleteBranchProtectionRule: IDeleteBranchProtectionRulePayload;
  deleteDeployment: IDeleteDeploymentPayload;
  deleteIpAllowListEntry: IDeleteIpAllowListEntryPayload;
  deleteIssue: IDeleteIssuePayload;
  deleteIssueComment: IDeleteIssueCommentPayload;
  deleteProject: IDeleteProjectPayload;
  deleteProjectCard: IDeleteProjectCardPayload;
  deleteProjectColumn: IDeleteProjectColumnPayload;
  deletePullRequestReview: IDeletePullRequestReviewPayload;
  deletePullRequestReviewComment: IDeletePullRequestReviewCommentPayload;
  deleteRef: IDeleteRefPayload;
  deleteTeamDiscussion: IDeleteTeamDiscussionPayload;
  deleteTeamDiscussionComment: IDeleteTeamDiscussionCommentPayload;
  dismissPullRequestReview: IDismissPullRequestReviewPayload;
  followUser: IFollowUserPayload;
  inviteEnterpriseAdmin: IInviteEnterpriseAdminPayload;
  linkRepositoryToProject: ILinkRepositoryToProjectPayload;
  lockLockable: ILockLockablePayload;
  markFileAsViewed: IMarkFileAsViewedPayload;
  markPullRequestReadyForReview: IMarkPullRequestReadyForReviewPayload;
  mergeBranch: IMergeBranchPayload;
  mergePullRequest: IMergePullRequestPayload;
  minimizeComment: IMinimizeCommentPayload;
  moveProjectCard: IMoveProjectCardPayload;
  moveProjectColumn: IMoveProjectColumnPayload;
  regenerateEnterpriseIdentityProviderRecoveryCodes: IRegenerateEnterpriseIdentityProviderRecoveryCodesPayload;
  removeAssigneesFromAssignable: IRemoveAssigneesFromAssignablePayload;
  removeEnterpriseAdmin: IRemoveEnterpriseAdminPayload;
  removeEnterpriseIdentityProvider: IRemoveEnterpriseIdentityProviderPayload;
  removeEnterpriseOrganization: IRemoveEnterpriseOrganizationPayload;
  removeLabelsFromLabelable: IRemoveLabelsFromLabelablePayload;
  removeOutsideCollaborator: IRemoveOutsideCollaboratorPayload;
  removeReaction: IRemoveReactionPayload;
  removeStar: IRemoveStarPayload;
  reopenIssue: IReopenIssuePayload;
  reopenPullRequest: IReopenPullRequestPayload;
  requestReviews: IRequestReviewsPayload;
  rerequestCheckSuite: IRerequestCheckSuitePayload;
  resolveReviewThread: IResolveReviewThreadPayload;
  setEnterpriseIdentityProvider: ISetEnterpriseIdentityProviderPayload;
  setOrganizationInteractionLimit: ISetOrganizationInteractionLimitPayload;
  setRepositoryInteractionLimit: ISetRepositoryInteractionLimitPayload;
  setUserInteractionLimit: ISetUserInteractionLimitPayload;
  submitPullRequestReview: ISubmitPullRequestReviewPayload;
  transferIssue: ITransferIssuePayload;
  unarchiveRepository: IUnarchiveRepositoryPayload;
  unfollowUser: IUnfollowUserPayload;
  unlinkRepositoryFromProject: IUnlinkRepositoryFromProjectPayload;
  unlockLockable: IUnlockLockablePayload;
  unmarkFileAsViewed: IUnmarkFileAsViewedPayload;
  unmarkIssueAsDuplicate: IUnmarkIssueAsDuplicatePayload;
  unminimizeComment: IUnminimizeCommentPayload;
  unresolveReviewThread: IUnresolveReviewThreadPayload;
  updateBranchProtectionRule: IUpdateBranchProtectionRulePayload;
  updateCheckRun: IUpdateCheckRunPayload;
  updateCheckSuitePreferences: IUpdateCheckSuitePreferencesPayload;
  updateEnterpriseAdministratorRole: IUpdateEnterpriseAdministratorRolePayload;
  updateEnterpriseAllowPrivateRepositoryForkingSetting: IUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload;
  updateEnterpriseDefaultRepositoryPermissionSetting: IUpdateEnterpriseDefaultRepositoryPermissionSettingPayload;
  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting: IUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload;
  updateEnterpriseMembersCanCreateRepositoriesSetting: IUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload;
  updateEnterpriseMembersCanDeleteIssuesSetting: IUpdateEnterpriseMembersCanDeleteIssuesSettingPayload;
  updateEnterpriseMembersCanDeleteRepositoriesSetting: IUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload;
  updateEnterpriseMembersCanInviteCollaboratorsSetting: IUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload;
  updateEnterpriseMembersCanMakePurchasesSetting: IUpdateEnterpriseMembersCanMakePurchasesSettingPayload;
  updateEnterpriseMembersCanUpdateProtectedBranchesSetting: IUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload;
  updateEnterpriseMembersCanViewDependencyInsightsSetting: IUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload;
  updateEnterpriseOrganizationProjectsSetting: IUpdateEnterpriseOrganizationProjectsSettingPayload;
  updateEnterpriseProfile: IUpdateEnterpriseProfilePayload;
  updateEnterpriseRepositoryProjectsSetting: IUpdateEnterpriseRepositoryProjectsSettingPayload;
  updateEnterpriseTeamDiscussionsSetting: IUpdateEnterpriseTeamDiscussionsSettingPayload;
  updateEnterpriseTwoFactorAuthenticationRequiredSetting: IUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload;
  updateIpAllowListEnabledSetting: IUpdateIpAllowListEnabledSettingPayload;
  updateIpAllowListEntry: IUpdateIpAllowListEntryPayload;
  updateIssue: IUpdateIssuePayload;
  updateIssueComment: IUpdateIssueCommentPayload;
  updateProject: IUpdateProjectPayload;
  updateProjectCard: IUpdateProjectCardPayload;
  updateProjectColumn: IUpdateProjectColumnPayload;
  updatePullRequest: IUpdatePullRequestPayload;
  updatePullRequestReview: IUpdatePullRequestReviewPayload;
  updatePullRequestReviewComment: IUpdatePullRequestReviewCommentPayload;
  updateRef: IUpdateRefPayload;
  updateRepository: IUpdateRepositoryPayload;
  updateSubscription: IUpdateSubscriptionPayload;
  updateTeamDiscussion: IUpdateTeamDiscussionPayload;
  updateTeamDiscussionComment: IUpdateTeamDiscussionCommentPayload;
  updateTopics: IUpdateTopicsPayload;
}

interface MutationSelector {
  __typename: () => Field<"__typename">;

  acceptEnterpriseAdministratorInvitation: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | AcceptEnterpriseAdministratorInvitationInput;
    },
    select: (t: AcceptEnterpriseAdministratorInvitationPayloadSelector) => T
  ) => Field<
    "acceptEnterpriseAdministratorInvitation",
    [
      Argument<
        "input",
        Variable<"input"> | AcceptEnterpriseAdministratorInvitationInput
      >
    ],
    SelectionSet<T>
  >;

  acceptTopicSuggestion: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | AcceptTopicSuggestionInput },
    select: (t: AcceptTopicSuggestionPayloadSelector) => T
  ) => Field<
    "acceptTopicSuggestion",
    [Argument<"input", Variable<"input"> | AcceptTopicSuggestionInput>],
    SelectionSet<T>
  >;

  addAssigneesToAssignable: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | AddAssigneesToAssignableInput },
    select: (t: AddAssigneesToAssignablePayloadSelector) => T
  ) => Field<
    "addAssigneesToAssignable",
    [Argument<"input", Variable<"input"> | AddAssigneesToAssignableInput>],
    SelectionSet<T>
  >;

  addComment: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | AddCommentInput },
    select: (t: AddCommentPayloadSelector) => T
  ) => Field<
    "addComment",
    [Argument<"input", Variable<"input"> | AddCommentInput>],
    SelectionSet<T>
  >;

  addLabelsToLabelable: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | AddLabelsToLabelableInput },
    select: (t: AddLabelsToLabelablePayloadSelector) => T
  ) => Field<
    "addLabelsToLabelable",
    [Argument<"input", Variable<"input"> | AddLabelsToLabelableInput>],
    SelectionSet<T>
  >;

  addProjectCard: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | AddProjectCardInput },
    select: (t: AddProjectCardPayloadSelector) => T
  ) => Field<
    "addProjectCard",
    [Argument<"input", Variable<"input"> | AddProjectCardInput>],
    SelectionSet<T>
  >;

  addProjectColumn: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | AddProjectColumnInput },
    select: (t: AddProjectColumnPayloadSelector) => T
  ) => Field<
    "addProjectColumn",
    [Argument<"input", Variable<"input"> | AddProjectColumnInput>],
    SelectionSet<T>
  >;

  addPullRequestReview: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | AddPullRequestReviewInput },
    select: (t: AddPullRequestReviewPayloadSelector) => T
  ) => Field<
    "addPullRequestReview",
    [Argument<"input", Variable<"input"> | AddPullRequestReviewInput>],
    SelectionSet<T>
  >;

  addPullRequestReviewComment: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | AddPullRequestReviewCommentInput },
    select: (t: AddPullRequestReviewCommentPayloadSelector) => T
  ) => Field<
    "addPullRequestReviewComment",
    [Argument<"input", Variable<"input"> | AddPullRequestReviewCommentInput>],
    SelectionSet<T>
  >;

  addPullRequestReviewThread: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | AddPullRequestReviewThreadInput },
    select: (t: AddPullRequestReviewThreadPayloadSelector) => T
  ) => Field<
    "addPullRequestReviewThread",
    [Argument<"input", Variable<"input"> | AddPullRequestReviewThreadInput>],
    SelectionSet<T>
  >;

  addReaction: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | AddReactionInput },
    select: (t: AddReactionPayloadSelector) => T
  ) => Field<
    "addReaction",
    [Argument<"input", Variable<"input"> | AddReactionInput>],
    SelectionSet<T>
  >;

  addStar: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | AddStarInput },
    select: (t: AddStarPayloadSelector) => T
  ) => Field<
    "addStar",
    [Argument<"input", Variable<"input"> | AddStarInput>],
    SelectionSet<T>
  >;

  archiveRepository: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | ArchiveRepositoryInput },
    select: (t: ArchiveRepositoryPayloadSelector) => T
  ) => Field<
    "archiveRepository",
    [Argument<"input", Variable<"input"> | ArchiveRepositoryInput>],
    SelectionSet<T>
  >;

  cancelEnterpriseAdminInvitation: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | CancelEnterpriseAdminInvitationInput;
    },
    select: (t: CancelEnterpriseAdminInvitationPayloadSelector) => T
  ) => Field<
    "cancelEnterpriseAdminInvitation",
    [
      Argument<
        "input",
        Variable<"input"> | CancelEnterpriseAdminInvitationInput
      >
    ],
    SelectionSet<T>
  >;

  changeUserStatus: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | ChangeUserStatusInput },
    select: (t: ChangeUserStatusPayloadSelector) => T
  ) => Field<
    "changeUserStatus",
    [Argument<"input", Variable<"input"> | ChangeUserStatusInput>],
    SelectionSet<T>
  >;

  clearLabelsFromLabelable: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | ClearLabelsFromLabelableInput },
    select: (t: ClearLabelsFromLabelablePayloadSelector) => T
  ) => Field<
    "clearLabelsFromLabelable",
    [Argument<"input", Variable<"input"> | ClearLabelsFromLabelableInput>],
    SelectionSet<T>
  >;

  cloneProject: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | CloneProjectInput },
    select: (t: CloneProjectPayloadSelector) => T
  ) => Field<
    "cloneProject",
    [Argument<"input", Variable<"input"> | CloneProjectInput>],
    SelectionSet<T>
  >;

  cloneTemplateRepository: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | CloneTemplateRepositoryInput },
    select: (t: CloneTemplateRepositoryPayloadSelector) => T
  ) => Field<
    "cloneTemplateRepository",
    [Argument<"input", Variable<"input"> | CloneTemplateRepositoryInput>],
    SelectionSet<T>
  >;

  closeIssue: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | CloseIssueInput },
    select: (t: CloseIssuePayloadSelector) => T
  ) => Field<
    "closeIssue",
    [Argument<"input", Variable<"input"> | CloseIssueInput>],
    SelectionSet<T>
  >;

  closePullRequest: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | ClosePullRequestInput },
    select: (t: ClosePullRequestPayloadSelector) => T
  ) => Field<
    "closePullRequest",
    [Argument<"input", Variable<"input"> | ClosePullRequestInput>],
    SelectionSet<T>
  >;

  convertProjectCardNoteToIssue: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | ConvertProjectCardNoteToIssueInput;
    },
    select: (t: ConvertProjectCardNoteToIssuePayloadSelector) => T
  ) => Field<
    "convertProjectCardNoteToIssue",
    [Argument<"input", Variable<"input"> | ConvertProjectCardNoteToIssueInput>],
    SelectionSet<T>
  >;

  createBranchProtectionRule: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | CreateBranchProtectionRuleInput },
    select: (t: CreateBranchProtectionRulePayloadSelector) => T
  ) => Field<
    "createBranchProtectionRule",
    [Argument<"input", Variable<"input"> | CreateBranchProtectionRuleInput>],
    SelectionSet<T>
  >;

  createCheckRun: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | CreateCheckRunInput },
    select: (t: CreateCheckRunPayloadSelector) => T
  ) => Field<
    "createCheckRun",
    [Argument<"input", Variable<"input"> | CreateCheckRunInput>],
    SelectionSet<T>
  >;

  createCheckSuite: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | CreateCheckSuiteInput },
    select: (t: CreateCheckSuitePayloadSelector) => T
  ) => Field<
    "createCheckSuite",
    [Argument<"input", Variable<"input"> | CreateCheckSuiteInput>],
    SelectionSet<T>
  >;

  createEnterpriseOrganization: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | CreateEnterpriseOrganizationInput;
    },
    select: (t: CreateEnterpriseOrganizationPayloadSelector) => T
  ) => Field<
    "createEnterpriseOrganization",
    [Argument<"input", Variable<"input"> | CreateEnterpriseOrganizationInput>],
    SelectionSet<T>
  >;

  createIpAllowListEntry: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | CreateIpAllowListEntryInput },
    select: (t: CreateIpAllowListEntryPayloadSelector) => T
  ) => Field<
    "createIpAllowListEntry",
    [Argument<"input", Variable<"input"> | CreateIpAllowListEntryInput>],
    SelectionSet<T>
  >;

  createIssue: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | CreateIssueInput },
    select: (t: CreateIssuePayloadSelector) => T
  ) => Field<
    "createIssue",
    [Argument<"input", Variable<"input"> | CreateIssueInput>],
    SelectionSet<T>
  >;

  createProject: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | CreateProjectInput },
    select: (t: CreateProjectPayloadSelector) => T
  ) => Field<
    "createProject",
    [Argument<"input", Variable<"input"> | CreateProjectInput>],
    SelectionSet<T>
  >;

  createPullRequest: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | CreatePullRequestInput },
    select: (t: CreatePullRequestPayloadSelector) => T
  ) => Field<
    "createPullRequest",
    [Argument<"input", Variable<"input"> | CreatePullRequestInput>],
    SelectionSet<T>
  >;

  createRef: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | CreateRefInput },
    select: (t: CreateRefPayloadSelector) => T
  ) => Field<
    "createRef",
    [Argument<"input", Variable<"input"> | CreateRefInput>],
    SelectionSet<T>
  >;

  createRepository: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | CreateRepositoryInput },
    select: (t: CreateRepositoryPayloadSelector) => T
  ) => Field<
    "createRepository",
    [Argument<"input", Variable<"input"> | CreateRepositoryInput>],
    SelectionSet<T>
  >;

  createTeamDiscussion: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | CreateTeamDiscussionInput },
    select: (t: CreateTeamDiscussionPayloadSelector) => T
  ) => Field<
    "createTeamDiscussion",
    [Argument<"input", Variable<"input"> | CreateTeamDiscussionInput>],
    SelectionSet<T>
  >;

  createTeamDiscussionComment: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | CreateTeamDiscussionCommentInput },
    select: (t: CreateTeamDiscussionCommentPayloadSelector) => T
  ) => Field<
    "createTeamDiscussionComment",
    [Argument<"input", Variable<"input"> | CreateTeamDiscussionCommentInput>],
    SelectionSet<T>
  >;

  declineTopicSuggestion: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | DeclineTopicSuggestionInput },
    select: (t: DeclineTopicSuggestionPayloadSelector) => T
  ) => Field<
    "declineTopicSuggestion",
    [Argument<"input", Variable<"input"> | DeclineTopicSuggestionInput>],
    SelectionSet<T>
  >;

  deleteBranchProtectionRule: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | DeleteBranchProtectionRuleInput },
    select: (t: DeleteBranchProtectionRulePayloadSelector) => T
  ) => Field<
    "deleteBranchProtectionRule",
    [Argument<"input", Variable<"input"> | DeleteBranchProtectionRuleInput>],
    SelectionSet<T>
  >;

  deleteDeployment: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | DeleteDeploymentInput },
    select: (t: DeleteDeploymentPayloadSelector) => T
  ) => Field<
    "deleteDeployment",
    [Argument<"input", Variable<"input"> | DeleteDeploymentInput>],
    SelectionSet<T>
  >;

  deleteIpAllowListEntry: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | DeleteIpAllowListEntryInput },
    select: (t: DeleteIpAllowListEntryPayloadSelector) => T
  ) => Field<
    "deleteIpAllowListEntry",
    [Argument<"input", Variable<"input"> | DeleteIpAllowListEntryInput>],
    SelectionSet<T>
  >;

  deleteIssue: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | DeleteIssueInput },
    select: (t: DeleteIssuePayloadSelector) => T
  ) => Field<
    "deleteIssue",
    [Argument<"input", Variable<"input"> | DeleteIssueInput>],
    SelectionSet<T>
  >;

  deleteIssueComment: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | DeleteIssueCommentInput },
    select: (t: DeleteIssueCommentPayloadSelector) => T
  ) => Field<
    "deleteIssueComment",
    [Argument<"input", Variable<"input"> | DeleteIssueCommentInput>],
    SelectionSet<T>
  >;

  deleteProject: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | DeleteProjectInput },
    select: (t: DeleteProjectPayloadSelector) => T
  ) => Field<
    "deleteProject",
    [Argument<"input", Variable<"input"> | DeleteProjectInput>],
    SelectionSet<T>
  >;

  deleteProjectCard: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | DeleteProjectCardInput },
    select: (t: DeleteProjectCardPayloadSelector) => T
  ) => Field<
    "deleteProjectCard",
    [Argument<"input", Variable<"input"> | DeleteProjectCardInput>],
    SelectionSet<T>
  >;

  deleteProjectColumn: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | DeleteProjectColumnInput },
    select: (t: DeleteProjectColumnPayloadSelector) => T
  ) => Field<
    "deleteProjectColumn",
    [Argument<"input", Variable<"input"> | DeleteProjectColumnInput>],
    SelectionSet<T>
  >;

  deletePullRequestReview: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | DeletePullRequestReviewInput },
    select: (t: DeletePullRequestReviewPayloadSelector) => T
  ) => Field<
    "deletePullRequestReview",
    [Argument<"input", Variable<"input"> | DeletePullRequestReviewInput>],
    SelectionSet<T>
  >;

  deletePullRequestReviewComment: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | DeletePullRequestReviewCommentInput;
    },
    select: (t: DeletePullRequestReviewCommentPayloadSelector) => T
  ) => Field<
    "deletePullRequestReviewComment",
    [
      Argument<"input", Variable<"input"> | DeletePullRequestReviewCommentInput>
    ],
    SelectionSet<T>
  >;

  deleteRef: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | DeleteRefInput },
    select: (t: DeleteRefPayloadSelector) => T
  ) => Field<
    "deleteRef",
    [Argument<"input", Variable<"input"> | DeleteRefInput>],
    SelectionSet<T>
  >;

  deleteTeamDiscussion: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | DeleteTeamDiscussionInput },
    select: (t: DeleteTeamDiscussionPayloadSelector) => T
  ) => Field<
    "deleteTeamDiscussion",
    [Argument<"input", Variable<"input"> | DeleteTeamDiscussionInput>],
    SelectionSet<T>
  >;

  deleteTeamDiscussionComment: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | DeleteTeamDiscussionCommentInput },
    select: (t: DeleteTeamDiscussionCommentPayloadSelector) => T
  ) => Field<
    "deleteTeamDiscussionComment",
    [Argument<"input", Variable<"input"> | DeleteTeamDiscussionCommentInput>],
    SelectionSet<T>
  >;

  dismissPullRequestReview: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | DismissPullRequestReviewInput },
    select: (t: DismissPullRequestReviewPayloadSelector) => T
  ) => Field<
    "dismissPullRequestReview",
    [Argument<"input", Variable<"input"> | DismissPullRequestReviewInput>],
    SelectionSet<T>
  >;

  followUser: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | FollowUserInput },
    select: (t: FollowUserPayloadSelector) => T
  ) => Field<
    "followUser",
    [Argument<"input", Variable<"input"> | FollowUserInput>],
    SelectionSet<T>
  >;

  inviteEnterpriseAdmin: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | InviteEnterpriseAdminInput },
    select: (t: InviteEnterpriseAdminPayloadSelector) => T
  ) => Field<
    "inviteEnterpriseAdmin",
    [Argument<"input", Variable<"input"> | InviteEnterpriseAdminInput>],
    SelectionSet<T>
  >;

  linkRepositoryToProject: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | LinkRepositoryToProjectInput },
    select: (t: LinkRepositoryToProjectPayloadSelector) => T
  ) => Field<
    "linkRepositoryToProject",
    [Argument<"input", Variable<"input"> | LinkRepositoryToProjectInput>],
    SelectionSet<T>
  >;

  lockLockable: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | LockLockableInput },
    select: (t: LockLockablePayloadSelector) => T
  ) => Field<
    "lockLockable",
    [Argument<"input", Variable<"input"> | LockLockableInput>],
    SelectionSet<T>
  >;

  markFileAsViewed: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | MarkFileAsViewedInput },
    select: (t: MarkFileAsViewedPayloadSelector) => T
  ) => Field<
    "markFileAsViewed",
    [Argument<"input", Variable<"input"> | MarkFileAsViewedInput>],
    SelectionSet<T>
  >;

  markPullRequestReadyForReview: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | MarkPullRequestReadyForReviewInput;
    },
    select: (t: MarkPullRequestReadyForReviewPayloadSelector) => T
  ) => Field<
    "markPullRequestReadyForReview",
    [Argument<"input", Variable<"input"> | MarkPullRequestReadyForReviewInput>],
    SelectionSet<T>
  >;

  mergeBranch: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | MergeBranchInput },
    select: (t: MergeBranchPayloadSelector) => T
  ) => Field<
    "mergeBranch",
    [Argument<"input", Variable<"input"> | MergeBranchInput>],
    SelectionSet<T>
  >;

  mergePullRequest: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | MergePullRequestInput },
    select: (t: MergePullRequestPayloadSelector) => T
  ) => Field<
    "mergePullRequest",
    [Argument<"input", Variable<"input"> | MergePullRequestInput>],
    SelectionSet<T>
  >;

  minimizeComment: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | MinimizeCommentInput },
    select: (t: MinimizeCommentPayloadSelector) => T
  ) => Field<
    "minimizeComment",
    [Argument<"input", Variable<"input"> | MinimizeCommentInput>],
    SelectionSet<T>
  >;

  moveProjectCard: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | MoveProjectCardInput },
    select: (t: MoveProjectCardPayloadSelector) => T
  ) => Field<
    "moveProjectCard",
    [Argument<"input", Variable<"input"> | MoveProjectCardInput>],
    SelectionSet<T>
  >;

  moveProjectColumn: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | MoveProjectColumnInput },
    select: (t: MoveProjectColumnPayloadSelector) => T
  ) => Field<
    "moveProjectColumn",
    [Argument<"input", Variable<"input"> | MoveProjectColumnInput>],
    SelectionSet<T>
  >;

  regenerateEnterpriseIdentityProviderRecoveryCodes: <
    T extends Array<Selection>
  >(
    variables: {
      input?:
        | Variable<"input">
        | RegenerateEnterpriseIdentityProviderRecoveryCodesInput;
    },
    select: (
      t: RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadSelector
    ) => T
  ) => Field<
    "regenerateEnterpriseIdentityProviderRecoveryCodes",
    [
      Argument<
        "input",
        | Variable<"input">
        | RegenerateEnterpriseIdentityProviderRecoveryCodesInput
      >
    ],
    SelectionSet<T>
  >;

  removeAssigneesFromAssignable: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | RemoveAssigneesFromAssignableInput;
    },
    select: (t: RemoveAssigneesFromAssignablePayloadSelector) => T
  ) => Field<
    "removeAssigneesFromAssignable",
    [Argument<"input", Variable<"input"> | RemoveAssigneesFromAssignableInput>],
    SelectionSet<T>
  >;

  removeEnterpriseAdmin: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | RemoveEnterpriseAdminInput },
    select: (t: RemoveEnterpriseAdminPayloadSelector) => T
  ) => Field<
    "removeEnterpriseAdmin",
    [Argument<"input", Variable<"input"> | RemoveEnterpriseAdminInput>],
    SelectionSet<T>
  >;

  removeEnterpriseIdentityProvider: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | RemoveEnterpriseIdentityProviderInput;
    },
    select: (t: RemoveEnterpriseIdentityProviderPayloadSelector) => T
  ) => Field<
    "removeEnterpriseIdentityProvider",
    [
      Argument<
        "input",
        Variable<"input"> | RemoveEnterpriseIdentityProviderInput
      >
    ],
    SelectionSet<T>
  >;

  removeEnterpriseOrganization: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | RemoveEnterpriseOrganizationInput;
    },
    select: (t: RemoveEnterpriseOrganizationPayloadSelector) => T
  ) => Field<
    "removeEnterpriseOrganization",
    [Argument<"input", Variable<"input"> | RemoveEnterpriseOrganizationInput>],
    SelectionSet<T>
  >;

  removeLabelsFromLabelable: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | RemoveLabelsFromLabelableInput },
    select: (t: RemoveLabelsFromLabelablePayloadSelector) => T
  ) => Field<
    "removeLabelsFromLabelable",
    [Argument<"input", Variable<"input"> | RemoveLabelsFromLabelableInput>],
    SelectionSet<T>
  >;

  removeOutsideCollaborator: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | RemoveOutsideCollaboratorInput },
    select: (t: RemoveOutsideCollaboratorPayloadSelector) => T
  ) => Field<
    "removeOutsideCollaborator",
    [Argument<"input", Variable<"input"> | RemoveOutsideCollaboratorInput>],
    SelectionSet<T>
  >;

  removeReaction: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | RemoveReactionInput },
    select: (t: RemoveReactionPayloadSelector) => T
  ) => Field<
    "removeReaction",
    [Argument<"input", Variable<"input"> | RemoveReactionInput>],
    SelectionSet<T>
  >;

  removeStar: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | RemoveStarInput },
    select: (t: RemoveStarPayloadSelector) => T
  ) => Field<
    "removeStar",
    [Argument<"input", Variable<"input"> | RemoveStarInput>],
    SelectionSet<T>
  >;

  reopenIssue: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | ReopenIssueInput },
    select: (t: ReopenIssuePayloadSelector) => T
  ) => Field<
    "reopenIssue",
    [Argument<"input", Variable<"input"> | ReopenIssueInput>],
    SelectionSet<T>
  >;

  reopenPullRequest: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | ReopenPullRequestInput },
    select: (t: ReopenPullRequestPayloadSelector) => T
  ) => Field<
    "reopenPullRequest",
    [Argument<"input", Variable<"input"> | ReopenPullRequestInput>],
    SelectionSet<T>
  >;

  requestReviews: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | RequestReviewsInput },
    select: (t: RequestReviewsPayloadSelector) => T
  ) => Field<
    "requestReviews",
    [Argument<"input", Variable<"input"> | RequestReviewsInput>],
    SelectionSet<T>
  >;

  rerequestCheckSuite: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | RerequestCheckSuiteInput },
    select: (t: RerequestCheckSuitePayloadSelector) => T
  ) => Field<
    "rerequestCheckSuite",
    [Argument<"input", Variable<"input"> | RerequestCheckSuiteInput>],
    SelectionSet<T>
  >;

  resolveReviewThread: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | ResolveReviewThreadInput },
    select: (t: ResolveReviewThreadPayloadSelector) => T
  ) => Field<
    "resolveReviewThread",
    [Argument<"input", Variable<"input"> | ResolveReviewThreadInput>],
    SelectionSet<T>
  >;

  setEnterpriseIdentityProvider: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | SetEnterpriseIdentityProviderInput;
    },
    select: (t: SetEnterpriseIdentityProviderPayloadSelector) => T
  ) => Field<
    "setEnterpriseIdentityProvider",
    [Argument<"input", Variable<"input"> | SetEnterpriseIdentityProviderInput>],
    SelectionSet<T>
  >;

  setOrganizationInteractionLimit: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | SetOrganizationInteractionLimitInput;
    },
    select: (t: SetOrganizationInteractionLimitPayloadSelector) => T
  ) => Field<
    "setOrganizationInteractionLimit",
    [
      Argument<
        "input",
        Variable<"input"> | SetOrganizationInteractionLimitInput
      >
    ],
    SelectionSet<T>
  >;

  setRepositoryInteractionLimit: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | SetRepositoryInteractionLimitInput;
    },
    select: (t: SetRepositoryInteractionLimitPayloadSelector) => T
  ) => Field<
    "setRepositoryInteractionLimit",
    [Argument<"input", Variable<"input"> | SetRepositoryInteractionLimitInput>],
    SelectionSet<T>
  >;

  setUserInteractionLimit: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | SetUserInteractionLimitInput },
    select: (t: SetUserInteractionLimitPayloadSelector) => T
  ) => Field<
    "setUserInteractionLimit",
    [Argument<"input", Variable<"input"> | SetUserInteractionLimitInput>],
    SelectionSet<T>
  >;

  submitPullRequestReview: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | SubmitPullRequestReviewInput },
    select: (t: SubmitPullRequestReviewPayloadSelector) => T
  ) => Field<
    "submitPullRequestReview",
    [Argument<"input", Variable<"input"> | SubmitPullRequestReviewInput>],
    SelectionSet<T>
  >;

  transferIssue: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | TransferIssueInput },
    select: (t: TransferIssuePayloadSelector) => T
  ) => Field<
    "transferIssue",
    [Argument<"input", Variable<"input"> | TransferIssueInput>],
    SelectionSet<T>
  >;

  unarchiveRepository: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UnarchiveRepositoryInput },
    select: (t: UnarchiveRepositoryPayloadSelector) => T
  ) => Field<
    "unarchiveRepository",
    [Argument<"input", Variable<"input"> | UnarchiveRepositoryInput>],
    SelectionSet<T>
  >;

  unfollowUser: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UnfollowUserInput },
    select: (t: UnfollowUserPayloadSelector) => T
  ) => Field<
    "unfollowUser",
    [Argument<"input", Variable<"input"> | UnfollowUserInput>],
    SelectionSet<T>
  >;

  unlinkRepositoryFromProject: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UnlinkRepositoryFromProjectInput },
    select: (t: UnlinkRepositoryFromProjectPayloadSelector) => T
  ) => Field<
    "unlinkRepositoryFromProject",
    [Argument<"input", Variable<"input"> | UnlinkRepositoryFromProjectInput>],
    SelectionSet<T>
  >;

  unlockLockable: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UnlockLockableInput },
    select: (t: UnlockLockablePayloadSelector) => T
  ) => Field<
    "unlockLockable",
    [Argument<"input", Variable<"input"> | UnlockLockableInput>],
    SelectionSet<T>
  >;

  unmarkFileAsViewed: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UnmarkFileAsViewedInput },
    select: (t: UnmarkFileAsViewedPayloadSelector) => T
  ) => Field<
    "unmarkFileAsViewed",
    [Argument<"input", Variable<"input"> | UnmarkFileAsViewedInput>],
    SelectionSet<T>
  >;

  unmarkIssueAsDuplicate: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UnmarkIssueAsDuplicateInput },
    select: (t: UnmarkIssueAsDuplicatePayloadSelector) => T
  ) => Field<
    "unmarkIssueAsDuplicate",
    [Argument<"input", Variable<"input"> | UnmarkIssueAsDuplicateInput>],
    SelectionSet<T>
  >;

  unminimizeComment: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UnminimizeCommentInput },
    select: (t: UnminimizeCommentPayloadSelector) => T
  ) => Field<
    "unminimizeComment",
    [Argument<"input", Variable<"input"> | UnminimizeCommentInput>],
    SelectionSet<T>
  >;

  unresolveReviewThread: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UnresolveReviewThreadInput },
    select: (t: UnresolveReviewThreadPayloadSelector) => T
  ) => Field<
    "unresolveReviewThread",
    [Argument<"input", Variable<"input"> | UnresolveReviewThreadInput>],
    SelectionSet<T>
  >;

  updateBranchProtectionRule: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateBranchProtectionRuleInput },
    select: (t: UpdateBranchProtectionRulePayloadSelector) => T
  ) => Field<
    "updateBranchProtectionRule",
    [Argument<"input", Variable<"input"> | UpdateBranchProtectionRuleInput>],
    SelectionSet<T>
  >;

  updateCheckRun: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateCheckRunInput },
    select: (t: UpdateCheckRunPayloadSelector) => T
  ) => Field<
    "updateCheckRun",
    [Argument<"input", Variable<"input"> | UpdateCheckRunInput>],
    SelectionSet<T>
  >;

  updateCheckSuitePreferences: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateCheckSuitePreferencesInput },
    select: (t: UpdateCheckSuitePreferencesPayloadSelector) => T
  ) => Field<
    "updateCheckSuitePreferences",
    [Argument<"input", Variable<"input"> | UpdateCheckSuitePreferencesInput>],
    SelectionSet<T>
  >;

  updateEnterpriseAdministratorRole: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | UpdateEnterpriseAdministratorRoleInput;
    },
    select: (t: UpdateEnterpriseAdministratorRolePayloadSelector) => T
  ) => Field<
    "updateEnterpriseAdministratorRole",
    [
      Argument<
        "input",
        Variable<"input"> | UpdateEnterpriseAdministratorRoleInput
      >
    ],
    SelectionSet<T>
  >;

  updateEnterpriseAllowPrivateRepositoryForkingSetting: <
    T extends Array<Selection>
  >(
    variables: {
      input?:
        | Variable<"input">
        | UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput;
    },
    select: (
      t: UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadSelector
    ) => T
  ) => Field<
    "updateEnterpriseAllowPrivateRepositoryForkingSetting",
    [
      Argument<
        "input",
        | Variable<"input">
        | UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateEnterpriseDefaultRepositoryPermissionSetting: <
    T extends Array<Selection>
  >(
    variables: {
      input?:
        | Variable<"input">
        | UpdateEnterpriseDefaultRepositoryPermissionSettingInput;
    },
    select: (
      t: UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadSelector
    ) => T
  ) => Field<
    "updateEnterpriseDefaultRepositoryPermissionSetting",
    [
      Argument<
        "input",
        | Variable<"input">
        | UpdateEnterpriseDefaultRepositoryPermissionSettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting: <
    T extends Array<Selection>
  >(
    variables: {
      input?:
        | Variable<"input">
        | UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput;
    },
    select: (
      t: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadSelector
    ) => T
  ) => Field<
    "updateEnterpriseMembersCanChangeRepositoryVisibilitySetting",
    [
      Argument<
        "input",
        | Variable<"input">
        | UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateEnterpriseMembersCanCreateRepositoriesSetting: <
    T extends Array<Selection>
  >(
    variables: {
      input?:
        | Variable<"input">
        | UpdateEnterpriseMembersCanCreateRepositoriesSettingInput;
    },
    select: (
      t: UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadSelector
    ) => T
  ) => Field<
    "updateEnterpriseMembersCanCreateRepositoriesSetting",
    [
      Argument<
        "input",
        | Variable<"input">
        | UpdateEnterpriseMembersCanCreateRepositoriesSettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateEnterpriseMembersCanDeleteIssuesSetting: <T extends Array<Selection>>(
    variables: {
      input?:
        | Variable<"input">
        | UpdateEnterpriseMembersCanDeleteIssuesSettingInput;
    },
    select: (
      t: UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadSelector
    ) => T
  ) => Field<
    "updateEnterpriseMembersCanDeleteIssuesSetting",
    [
      Argument<
        "input",
        Variable<"input"> | UpdateEnterpriseMembersCanDeleteIssuesSettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateEnterpriseMembersCanDeleteRepositoriesSetting: <
    T extends Array<Selection>
  >(
    variables: {
      input?:
        | Variable<"input">
        | UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput;
    },
    select: (
      t: UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadSelector
    ) => T
  ) => Field<
    "updateEnterpriseMembersCanDeleteRepositoriesSetting",
    [
      Argument<
        "input",
        | Variable<"input">
        | UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateEnterpriseMembersCanInviteCollaboratorsSetting: <
    T extends Array<Selection>
  >(
    variables: {
      input?:
        | Variable<"input">
        | UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput;
    },
    select: (
      t: UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadSelector
    ) => T
  ) => Field<
    "updateEnterpriseMembersCanInviteCollaboratorsSetting",
    [
      Argument<
        "input",
        | Variable<"input">
        | UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateEnterpriseMembersCanMakePurchasesSetting: <T extends Array<Selection>>(
    variables: {
      input?:
        | Variable<"input">
        | UpdateEnterpriseMembersCanMakePurchasesSettingInput;
    },
    select: (
      t: UpdateEnterpriseMembersCanMakePurchasesSettingPayloadSelector
    ) => T
  ) => Field<
    "updateEnterpriseMembersCanMakePurchasesSetting",
    [
      Argument<
        "input",
        Variable<"input"> | UpdateEnterpriseMembersCanMakePurchasesSettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateEnterpriseMembersCanUpdateProtectedBranchesSetting: <
    T extends Array<Selection>
  >(
    variables: {
      input?:
        | Variable<"input">
        | UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput;
    },
    select: (
      t: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadSelector
    ) => T
  ) => Field<
    "updateEnterpriseMembersCanUpdateProtectedBranchesSetting",
    [
      Argument<
        "input",
        | Variable<"input">
        | UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateEnterpriseMembersCanViewDependencyInsightsSetting: <
    T extends Array<Selection>
  >(
    variables: {
      input?:
        | Variable<"input">
        | UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput;
    },
    select: (
      t: UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadSelector
    ) => T
  ) => Field<
    "updateEnterpriseMembersCanViewDependencyInsightsSetting",
    [
      Argument<
        "input",
        | Variable<"input">
        | UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateEnterpriseOrganizationProjectsSetting: <T extends Array<Selection>>(
    variables: {
      input?:
        | Variable<"input">
        | UpdateEnterpriseOrganizationProjectsSettingInput;
    },
    select: (t: UpdateEnterpriseOrganizationProjectsSettingPayloadSelector) => T
  ) => Field<
    "updateEnterpriseOrganizationProjectsSetting",
    [
      Argument<
        "input",
        Variable<"input"> | UpdateEnterpriseOrganizationProjectsSettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateEnterpriseProfile: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateEnterpriseProfileInput },
    select: (t: UpdateEnterpriseProfilePayloadSelector) => T
  ) => Field<
    "updateEnterpriseProfile",
    [Argument<"input", Variable<"input"> | UpdateEnterpriseProfileInput>],
    SelectionSet<T>
  >;

  updateEnterpriseRepositoryProjectsSetting: <T extends Array<Selection>>(
    variables: {
      input?:
        | Variable<"input">
        | UpdateEnterpriseRepositoryProjectsSettingInput;
    },
    select: (t: UpdateEnterpriseRepositoryProjectsSettingPayloadSelector) => T
  ) => Field<
    "updateEnterpriseRepositoryProjectsSetting",
    [
      Argument<
        "input",
        Variable<"input"> | UpdateEnterpriseRepositoryProjectsSettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateEnterpriseTeamDiscussionsSetting: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | UpdateEnterpriseTeamDiscussionsSettingInput;
    },
    select: (t: UpdateEnterpriseTeamDiscussionsSettingPayloadSelector) => T
  ) => Field<
    "updateEnterpriseTeamDiscussionsSetting",
    [
      Argument<
        "input",
        Variable<"input"> | UpdateEnterpriseTeamDiscussionsSettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateEnterpriseTwoFactorAuthenticationRequiredSetting: <
    T extends Array<Selection>
  >(
    variables: {
      input?:
        | Variable<"input">
        | UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput;
    },
    select: (
      t: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadSelector
    ) => T
  ) => Field<
    "updateEnterpriseTwoFactorAuthenticationRequiredSetting",
    [
      Argument<
        "input",
        | Variable<"input">
        | UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateIpAllowListEnabledSetting: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | UpdateIpAllowListEnabledSettingInput;
    },
    select: (t: UpdateIpAllowListEnabledSettingPayloadSelector) => T
  ) => Field<
    "updateIpAllowListEnabledSetting",
    [
      Argument<
        "input",
        Variable<"input"> | UpdateIpAllowListEnabledSettingInput
      >
    ],
    SelectionSet<T>
  >;

  updateIpAllowListEntry: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateIpAllowListEntryInput },
    select: (t: UpdateIpAllowListEntryPayloadSelector) => T
  ) => Field<
    "updateIpAllowListEntry",
    [Argument<"input", Variable<"input"> | UpdateIpAllowListEntryInput>],
    SelectionSet<T>
  >;

  updateIssue: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateIssueInput },
    select: (t: UpdateIssuePayloadSelector) => T
  ) => Field<
    "updateIssue",
    [Argument<"input", Variable<"input"> | UpdateIssueInput>],
    SelectionSet<T>
  >;

  updateIssueComment: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateIssueCommentInput },
    select: (t: UpdateIssueCommentPayloadSelector) => T
  ) => Field<
    "updateIssueComment",
    [Argument<"input", Variable<"input"> | UpdateIssueCommentInput>],
    SelectionSet<T>
  >;

  updateProject: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateProjectInput },
    select: (t: UpdateProjectPayloadSelector) => T
  ) => Field<
    "updateProject",
    [Argument<"input", Variable<"input"> | UpdateProjectInput>],
    SelectionSet<T>
  >;

  updateProjectCard: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateProjectCardInput },
    select: (t: UpdateProjectCardPayloadSelector) => T
  ) => Field<
    "updateProjectCard",
    [Argument<"input", Variable<"input"> | UpdateProjectCardInput>],
    SelectionSet<T>
  >;

  updateProjectColumn: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateProjectColumnInput },
    select: (t: UpdateProjectColumnPayloadSelector) => T
  ) => Field<
    "updateProjectColumn",
    [Argument<"input", Variable<"input"> | UpdateProjectColumnInput>],
    SelectionSet<T>
  >;

  updatePullRequest: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdatePullRequestInput },
    select: (t: UpdatePullRequestPayloadSelector) => T
  ) => Field<
    "updatePullRequest",
    [Argument<"input", Variable<"input"> | UpdatePullRequestInput>],
    SelectionSet<T>
  >;

  updatePullRequestReview: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdatePullRequestReviewInput },
    select: (t: UpdatePullRequestReviewPayloadSelector) => T
  ) => Field<
    "updatePullRequestReview",
    [Argument<"input", Variable<"input"> | UpdatePullRequestReviewInput>],
    SelectionSet<T>
  >;

  updatePullRequestReviewComment: <T extends Array<Selection>>(
    variables: {
      input?: Variable<"input"> | UpdatePullRequestReviewCommentInput;
    },
    select: (t: UpdatePullRequestReviewCommentPayloadSelector) => T
  ) => Field<
    "updatePullRequestReviewComment",
    [
      Argument<"input", Variable<"input"> | UpdatePullRequestReviewCommentInput>
    ],
    SelectionSet<T>
  >;

  updateRef: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateRefInput },
    select: (t: UpdateRefPayloadSelector) => T
  ) => Field<
    "updateRef",
    [Argument<"input", Variable<"input"> | UpdateRefInput>],
    SelectionSet<T>
  >;

  updateRepository: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateRepositoryInput },
    select: (t: UpdateRepositoryPayloadSelector) => T
  ) => Field<
    "updateRepository",
    [Argument<"input", Variable<"input"> | UpdateRepositoryInput>],
    SelectionSet<T>
  >;

  updateSubscription: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateSubscriptionInput },
    select: (t: UpdateSubscriptionPayloadSelector) => T
  ) => Field<
    "updateSubscription",
    [Argument<"input", Variable<"input"> | UpdateSubscriptionInput>],
    SelectionSet<T>
  >;

  updateTeamDiscussion: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateTeamDiscussionInput },
    select: (t: UpdateTeamDiscussionPayloadSelector) => T
  ) => Field<
    "updateTeamDiscussion",
    [Argument<"input", Variable<"input"> | UpdateTeamDiscussionInput>],
    SelectionSet<T>
  >;

  updateTeamDiscussionComment: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateTeamDiscussionCommentInput },
    select: (t: UpdateTeamDiscussionCommentPayloadSelector) => T
  ) => Field<
    "updateTeamDiscussionComment",
    [Argument<"input", Variable<"input"> | UpdateTeamDiscussionCommentInput>],
    SelectionSet<T>
  >;

  updateTopics: <T extends Array<Selection>>(
    variables: { input?: Variable<"input"> | UpdateTopicsInput },
    select: (t: UpdateTopicsPayloadSelector) => T
  ) => Field<
    "updateTopics",
    [Argument<"input", Variable<"input"> | UpdateTopicsInput>],
    SelectionSet<T>
  >;
}

export const Mutation: MutationSelector = {
  __typename: () => new Field("__typename"),

  acceptEnterpriseAdministratorInvitation: (variables, select) =>
    new Field(
      "acceptEnterpriseAdministratorInvitation",
      [new Argument("input", variables.input)],
      new SelectionSet(select(AcceptEnterpriseAdministratorInvitationPayload))
    ),

  acceptTopicSuggestion: (variables, select) =>
    new Field(
      "acceptTopicSuggestion",
      [new Argument("input", variables.input)],
      new SelectionSet(select(AcceptTopicSuggestionPayload))
    ),

  addAssigneesToAssignable: (variables, select) =>
    new Field(
      "addAssigneesToAssignable",
      [new Argument("input", variables.input)],
      new SelectionSet(select(AddAssigneesToAssignablePayload))
    ),

  addComment: (variables, select) =>
    new Field(
      "addComment",
      [new Argument("input", variables.input)],
      new SelectionSet(select(AddCommentPayload))
    ),

  addLabelsToLabelable: (variables, select) =>
    new Field(
      "addLabelsToLabelable",
      [new Argument("input", variables.input)],
      new SelectionSet(select(AddLabelsToLabelablePayload))
    ),

  addProjectCard: (variables, select) =>
    new Field(
      "addProjectCard",
      [new Argument("input", variables.input)],
      new SelectionSet(select(AddProjectCardPayload))
    ),

  addProjectColumn: (variables, select) =>
    new Field(
      "addProjectColumn",
      [new Argument("input", variables.input)],
      new SelectionSet(select(AddProjectColumnPayload))
    ),

  addPullRequestReview: (variables, select) =>
    new Field(
      "addPullRequestReview",
      [new Argument("input", variables.input)],
      new SelectionSet(select(AddPullRequestReviewPayload))
    ),

  addPullRequestReviewComment: (variables, select) =>
    new Field(
      "addPullRequestReviewComment",
      [new Argument("input", variables.input)],
      new SelectionSet(select(AddPullRequestReviewCommentPayload))
    ),

  addPullRequestReviewThread: (variables, select) =>
    new Field(
      "addPullRequestReviewThread",
      [new Argument("input", variables.input)],
      new SelectionSet(select(AddPullRequestReviewThreadPayload))
    ),

  addReaction: (variables, select) =>
    new Field(
      "addReaction",
      [new Argument("input", variables.input)],
      new SelectionSet(select(AddReactionPayload))
    ),

  addStar: (variables, select) =>
    new Field(
      "addStar",
      [new Argument("input", variables.input)],
      new SelectionSet(select(AddStarPayload))
    ),

  archiveRepository: (variables, select) =>
    new Field(
      "archiveRepository",
      [new Argument("input", variables.input)],
      new SelectionSet(select(ArchiveRepositoryPayload))
    ),

  cancelEnterpriseAdminInvitation: (variables, select) =>
    new Field(
      "cancelEnterpriseAdminInvitation",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CancelEnterpriseAdminInvitationPayload))
    ),

  changeUserStatus: (variables, select) =>
    new Field(
      "changeUserStatus",
      [new Argument("input", variables.input)],
      new SelectionSet(select(ChangeUserStatusPayload))
    ),

  clearLabelsFromLabelable: (variables, select) =>
    new Field(
      "clearLabelsFromLabelable",
      [new Argument("input", variables.input)],
      new SelectionSet(select(ClearLabelsFromLabelablePayload))
    ),

  cloneProject: (variables, select) =>
    new Field(
      "cloneProject",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CloneProjectPayload))
    ),

  cloneTemplateRepository: (variables, select) =>
    new Field(
      "cloneTemplateRepository",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CloneTemplateRepositoryPayload))
    ),

  closeIssue: (variables, select) =>
    new Field(
      "closeIssue",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CloseIssuePayload))
    ),

  closePullRequest: (variables, select) =>
    new Field(
      "closePullRequest",
      [new Argument("input", variables.input)],
      new SelectionSet(select(ClosePullRequestPayload))
    ),

  convertProjectCardNoteToIssue: (variables, select) =>
    new Field(
      "convertProjectCardNoteToIssue",
      [new Argument("input", variables.input)],
      new SelectionSet(select(ConvertProjectCardNoteToIssuePayload))
    ),

  createBranchProtectionRule: (variables, select) =>
    new Field(
      "createBranchProtectionRule",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CreateBranchProtectionRulePayload))
    ),

  createCheckRun: (variables, select) =>
    new Field(
      "createCheckRun",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CreateCheckRunPayload))
    ),

  createCheckSuite: (variables, select) =>
    new Field(
      "createCheckSuite",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CreateCheckSuitePayload))
    ),

  createEnterpriseOrganization: (variables, select) =>
    new Field(
      "createEnterpriseOrganization",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CreateEnterpriseOrganizationPayload))
    ),

  createIpAllowListEntry: (variables, select) =>
    new Field(
      "createIpAllowListEntry",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CreateIpAllowListEntryPayload))
    ),

  createIssue: (variables, select) =>
    new Field(
      "createIssue",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CreateIssuePayload))
    ),

  createProject: (variables, select) =>
    new Field(
      "createProject",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CreateProjectPayload))
    ),

  createPullRequest: (variables, select) =>
    new Field(
      "createPullRequest",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CreatePullRequestPayload))
    ),

  createRef: (variables, select) =>
    new Field(
      "createRef",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CreateRefPayload))
    ),

  createRepository: (variables, select) =>
    new Field(
      "createRepository",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CreateRepositoryPayload))
    ),

  createTeamDiscussion: (variables, select) =>
    new Field(
      "createTeamDiscussion",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CreateTeamDiscussionPayload))
    ),

  createTeamDiscussionComment: (variables, select) =>
    new Field(
      "createTeamDiscussionComment",
      [new Argument("input", variables.input)],
      new SelectionSet(select(CreateTeamDiscussionCommentPayload))
    ),

  declineTopicSuggestion: (variables, select) =>
    new Field(
      "declineTopicSuggestion",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DeclineTopicSuggestionPayload))
    ),

  deleteBranchProtectionRule: (variables, select) =>
    new Field(
      "deleteBranchProtectionRule",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DeleteBranchProtectionRulePayload))
    ),

  deleteDeployment: (variables, select) =>
    new Field(
      "deleteDeployment",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DeleteDeploymentPayload))
    ),

  deleteIpAllowListEntry: (variables, select) =>
    new Field(
      "deleteIpAllowListEntry",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DeleteIpAllowListEntryPayload))
    ),

  deleteIssue: (variables, select) =>
    new Field(
      "deleteIssue",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DeleteIssuePayload))
    ),

  deleteIssueComment: (variables, select) =>
    new Field(
      "deleteIssueComment",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DeleteIssueCommentPayload))
    ),

  deleteProject: (variables, select) =>
    new Field(
      "deleteProject",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DeleteProjectPayload))
    ),

  deleteProjectCard: (variables, select) =>
    new Field(
      "deleteProjectCard",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DeleteProjectCardPayload))
    ),

  deleteProjectColumn: (variables, select) =>
    new Field(
      "deleteProjectColumn",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DeleteProjectColumnPayload))
    ),

  deletePullRequestReview: (variables, select) =>
    new Field(
      "deletePullRequestReview",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DeletePullRequestReviewPayload))
    ),

  deletePullRequestReviewComment: (variables, select) =>
    new Field(
      "deletePullRequestReviewComment",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DeletePullRequestReviewCommentPayload))
    ),

  deleteRef: (variables, select) =>
    new Field(
      "deleteRef",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DeleteRefPayload))
    ),

  deleteTeamDiscussion: (variables, select) =>
    new Field(
      "deleteTeamDiscussion",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DeleteTeamDiscussionPayload))
    ),

  deleteTeamDiscussionComment: (variables, select) =>
    new Field(
      "deleteTeamDiscussionComment",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DeleteTeamDiscussionCommentPayload))
    ),

  dismissPullRequestReview: (variables, select) =>
    new Field(
      "dismissPullRequestReview",
      [new Argument("input", variables.input)],
      new SelectionSet(select(DismissPullRequestReviewPayload))
    ),

  followUser: (variables, select) =>
    new Field(
      "followUser",
      [new Argument("input", variables.input)],
      new SelectionSet(select(FollowUserPayload))
    ),

  inviteEnterpriseAdmin: (variables, select) =>
    new Field(
      "inviteEnterpriseAdmin",
      [new Argument("input", variables.input)],
      new SelectionSet(select(InviteEnterpriseAdminPayload))
    ),

  linkRepositoryToProject: (variables, select) =>
    new Field(
      "linkRepositoryToProject",
      [new Argument("input", variables.input)],
      new SelectionSet(select(LinkRepositoryToProjectPayload))
    ),

  lockLockable: (variables, select) =>
    new Field(
      "lockLockable",
      [new Argument("input", variables.input)],
      new SelectionSet(select(LockLockablePayload))
    ),

  markFileAsViewed: (variables, select) =>
    new Field(
      "markFileAsViewed",
      [new Argument("input", variables.input)],
      new SelectionSet(select(MarkFileAsViewedPayload))
    ),

  markPullRequestReadyForReview: (variables, select) =>
    new Field(
      "markPullRequestReadyForReview",
      [new Argument("input", variables.input)],
      new SelectionSet(select(MarkPullRequestReadyForReviewPayload))
    ),

  mergeBranch: (variables, select) =>
    new Field(
      "mergeBranch",
      [new Argument("input", variables.input)],
      new SelectionSet(select(MergeBranchPayload))
    ),

  mergePullRequest: (variables, select) =>
    new Field(
      "mergePullRequest",
      [new Argument("input", variables.input)],
      new SelectionSet(select(MergePullRequestPayload))
    ),

  minimizeComment: (variables, select) =>
    new Field(
      "minimizeComment",
      [new Argument("input", variables.input)],
      new SelectionSet(select(MinimizeCommentPayload))
    ),

  moveProjectCard: (variables, select) =>
    new Field(
      "moveProjectCard",
      [new Argument("input", variables.input)],
      new SelectionSet(select(MoveProjectCardPayload))
    ),

  moveProjectColumn: (variables, select) =>
    new Field(
      "moveProjectColumn",
      [new Argument("input", variables.input)],
      new SelectionSet(select(MoveProjectColumnPayload))
    ),

  regenerateEnterpriseIdentityProviderRecoveryCodes: (variables, select) =>
    new Field(
      "regenerateEnterpriseIdentityProviderRecoveryCodes",
      [new Argument("input", variables.input)],
      new SelectionSet(
        select(RegenerateEnterpriseIdentityProviderRecoveryCodesPayload)
      )
    ),

  removeAssigneesFromAssignable: (variables, select) =>
    new Field(
      "removeAssigneesFromAssignable",
      [new Argument("input", variables.input)],
      new SelectionSet(select(RemoveAssigneesFromAssignablePayload))
    ),

  removeEnterpriseAdmin: (variables, select) =>
    new Field(
      "removeEnterpriseAdmin",
      [new Argument("input", variables.input)],
      new SelectionSet(select(RemoveEnterpriseAdminPayload))
    ),

  removeEnterpriseIdentityProvider: (variables, select) =>
    new Field(
      "removeEnterpriseIdentityProvider",
      [new Argument("input", variables.input)],
      new SelectionSet(select(RemoveEnterpriseIdentityProviderPayload))
    ),

  removeEnterpriseOrganization: (variables, select) =>
    new Field(
      "removeEnterpriseOrganization",
      [new Argument("input", variables.input)],
      new SelectionSet(select(RemoveEnterpriseOrganizationPayload))
    ),

  removeLabelsFromLabelable: (variables, select) =>
    new Field(
      "removeLabelsFromLabelable",
      [new Argument("input", variables.input)],
      new SelectionSet(select(RemoveLabelsFromLabelablePayload))
    ),

  removeOutsideCollaborator: (variables, select) =>
    new Field(
      "removeOutsideCollaborator",
      [new Argument("input", variables.input)],
      new SelectionSet(select(RemoveOutsideCollaboratorPayload))
    ),

  removeReaction: (variables, select) =>
    new Field(
      "removeReaction",
      [new Argument("input", variables.input)],
      new SelectionSet(select(RemoveReactionPayload))
    ),

  removeStar: (variables, select) =>
    new Field(
      "removeStar",
      [new Argument("input", variables.input)],
      new SelectionSet(select(RemoveStarPayload))
    ),

  reopenIssue: (variables, select) =>
    new Field(
      "reopenIssue",
      [new Argument("input", variables.input)],
      new SelectionSet(select(ReopenIssuePayload))
    ),

  reopenPullRequest: (variables, select) =>
    new Field(
      "reopenPullRequest",
      [new Argument("input", variables.input)],
      new SelectionSet(select(ReopenPullRequestPayload))
    ),

  requestReviews: (variables, select) =>
    new Field(
      "requestReviews",
      [new Argument("input", variables.input)],
      new SelectionSet(select(RequestReviewsPayload))
    ),

  rerequestCheckSuite: (variables, select) =>
    new Field(
      "rerequestCheckSuite",
      [new Argument("input", variables.input)],
      new SelectionSet(select(RerequestCheckSuitePayload))
    ),

  resolveReviewThread: (variables, select) =>
    new Field(
      "resolveReviewThread",
      [new Argument("input", variables.input)],
      new SelectionSet(select(ResolveReviewThreadPayload))
    ),

  setEnterpriseIdentityProvider: (variables, select) =>
    new Field(
      "setEnterpriseIdentityProvider",
      [new Argument("input", variables.input)],
      new SelectionSet(select(SetEnterpriseIdentityProviderPayload))
    ),

  setOrganizationInteractionLimit: (variables, select) =>
    new Field(
      "setOrganizationInteractionLimit",
      [new Argument("input", variables.input)],
      new SelectionSet(select(SetOrganizationInteractionLimitPayload))
    ),

  setRepositoryInteractionLimit: (variables, select) =>
    new Field(
      "setRepositoryInteractionLimit",
      [new Argument("input", variables.input)],
      new SelectionSet(select(SetRepositoryInteractionLimitPayload))
    ),

  setUserInteractionLimit: (variables, select) =>
    new Field(
      "setUserInteractionLimit",
      [new Argument("input", variables.input)],
      new SelectionSet(select(SetUserInteractionLimitPayload))
    ),

  submitPullRequestReview: (variables, select) =>
    new Field(
      "submitPullRequestReview",
      [new Argument("input", variables.input)],
      new SelectionSet(select(SubmitPullRequestReviewPayload))
    ),

  transferIssue: (variables, select) =>
    new Field(
      "transferIssue",
      [new Argument("input", variables.input)],
      new SelectionSet(select(TransferIssuePayload))
    ),

  unarchiveRepository: (variables, select) =>
    new Field(
      "unarchiveRepository",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UnarchiveRepositoryPayload))
    ),

  unfollowUser: (variables, select) =>
    new Field(
      "unfollowUser",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UnfollowUserPayload))
    ),

  unlinkRepositoryFromProject: (variables, select) =>
    new Field(
      "unlinkRepositoryFromProject",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UnlinkRepositoryFromProjectPayload))
    ),

  unlockLockable: (variables, select) =>
    new Field(
      "unlockLockable",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UnlockLockablePayload))
    ),

  unmarkFileAsViewed: (variables, select) =>
    new Field(
      "unmarkFileAsViewed",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UnmarkFileAsViewedPayload))
    ),

  unmarkIssueAsDuplicate: (variables, select) =>
    new Field(
      "unmarkIssueAsDuplicate",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UnmarkIssueAsDuplicatePayload))
    ),

  unminimizeComment: (variables, select) =>
    new Field(
      "unminimizeComment",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UnminimizeCommentPayload))
    ),

  unresolveReviewThread: (variables, select) =>
    new Field(
      "unresolveReviewThread",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UnresolveReviewThreadPayload))
    ),

  updateBranchProtectionRule: (variables, select) =>
    new Field(
      "updateBranchProtectionRule",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateBranchProtectionRulePayload))
    ),

  updateCheckRun: (variables, select) =>
    new Field(
      "updateCheckRun",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateCheckRunPayload))
    ),

  updateCheckSuitePreferences: (variables, select) =>
    new Field(
      "updateCheckSuitePreferences",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateCheckSuitePreferencesPayload))
    ),

  updateEnterpriseAdministratorRole: (variables, select) =>
    new Field(
      "updateEnterpriseAdministratorRole",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateEnterpriseAdministratorRolePayload))
    ),

  updateEnterpriseAllowPrivateRepositoryForkingSetting: (variables, select) =>
    new Field(
      "updateEnterpriseAllowPrivateRepositoryForkingSetting",
      [new Argument("input", variables.input)],
      new SelectionSet(
        select(UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload)
      )
    ),

  updateEnterpriseDefaultRepositoryPermissionSetting: (variables, select) =>
    new Field(
      "updateEnterpriseDefaultRepositoryPermissionSetting",
      [new Argument("input", variables.input)],
      new SelectionSet(
        select(UpdateEnterpriseDefaultRepositoryPermissionSettingPayload)
      )
    ),

  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting: (
    variables,
    select
  ) =>
    new Field(
      "updateEnterpriseMembersCanChangeRepositoryVisibilitySetting",
      [new Argument("input", variables.input)],
      new SelectionSet(
        select(
          UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload
        )
      )
    ),

  updateEnterpriseMembersCanCreateRepositoriesSetting: (variables, select) =>
    new Field(
      "updateEnterpriseMembersCanCreateRepositoriesSetting",
      [new Argument("input", variables.input)],
      new SelectionSet(
        select(UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload)
      )
    ),

  updateEnterpriseMembersCanDeleteIssuesSetting: (variables, select) =>
    new Field(
      "updateEnterpriseMembersCanDeleteIssuesSetting",
      [new Argument("input", variables.input)],
      new SelectionSet(
        select(UpdateEnterpriseMembersCanDeleteIssuesSettingPayload)
      )
    ),

  updateEnterpriseMembersCanDeleteRepositoriesSetting: (variables, select) =>
    new Field(
      "updateEnterpriseMembersCanDeleteRepositoriesSetting",
      [new Argument("input", variables.input)],
      new SelectionSet(
        select(UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload)
      )
    ),

  updateEnterpriseMembersCanInviteCollaboratorsSetting: (variables, select) =>
    new Field(
      "updateEnterpriseMembersCanInviteCollaboratorsSetting",
      [new Argument("input", variables.input)],
      new SelectionSet(
        select(UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload)
      )
    ),

  updateEnterpriseMembersCanMakePurchasesSetting: (variables, select) =>
    new Field(
      "updateEnterpriseMembersCanMakePurchasesSetting",
      [new Argument("input", variables.input)],
      new SelectionSet(
        select(UpdateEnterpriseMembersCanMakePurchasesSettingPayload)
      )
    ),

  updateEnterpriseMembersCanUpdateProtectedBranchesSetting: (
    variables,
    select
  ) =>
    new Field(
      "updateEnterpriseMembersCanUpdateProtectedBranchesSetting",
      [new Argument("input", variables.input)],
      new SelectionSet(
        select(UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload)
      )
    ),

  updateEnterpriseMembersCanViewDependencyInsightsSetting: (
    variables,
    select
  ) =>
    new Field(
      "updateEnterpriseMembersCanViewDependencyInsightsSetting",
      [new Argument("input", variables.input)],
      new SelectionSet(
        select(UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload)
      )
    ),

  updateEnterpriseOrganizationProjectsSetting: (variables, select) =>
    new Field(
      "updateEnterpriseOrganizationProjectsSetting",
      [new Argument("input", variables.input)],
      new SelectionSet(
        select(UpdateEnterpriseOrganizationProjectsSettingPayload)
      )
    ),

  updateEnterpriseProfile: (variables, select) =>
    new Field(
      "updateEnterpriseProfile",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateEnterpriseProfilePayload))
    ),

  updateEnterpriseRepositoryProjectsSetting: (variables, select) =>
    new Field(
      "updateEnterpriseRepositoryProjectsSetting",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateEnterpriseRepositoryProjectsSettingPayload))
    ),

  updateEnterpriseTeamDiscussionsSetting: (variables, select) =>
    new Field(
      "updateEnterpriseTeamDiscussionsSetting",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateEnterpriseTeamDiscussionsSettingPayload))
    ),

  updateEnterpriseTwoFactorAuthenticationRequiredSetting: (variables, select) =>
    new Field(
      "updateEnterpriseTwoFactorAuthenticationRequiredSetting",
      [new Argument("input", variables.input)],
      new SelectionSet(
        select(UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload)
      )
    ),

  updateIpAllowListEnabledSetting: (variables, select) =>
    new Field(
      "updateIpAllowListEnabledSetting",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateIpAllowListEnabledSettingPayload))
    ),

  updateIpAllowListEntry: (variables, select) =>
    new Field(
      "updateIpAllowListEntry",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateIpAllowListEntryPayload))
    ),

  updateIssue: (variables, select) =>
    new Field(
      "updateIssue",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateIssuePayload))
    ),

  updateIssueComment: (variables, select) =>
    new Field(
      "updateIssueComment",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateIssueCommentPayload))
    ),

  updateProject: (variables, select) =>
    new Field(
      "updateProject",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateProjectPayload))
    ),

  updateProjectCard: (variables, select) =>
    new Field(
      "updateProjectCard",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateProjectCardPayload))
    ),

  updateProjectColumn: (variables, select) =>
    new Field(
      "updateProjectColumn",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateProjectColumnPayload))
    ),

  updatePullRequest: (variables, select) =>
    new Field(
      "updatePullRequest",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdatePullRequestPayload))
    ),

  updatePullRequestReview: (variables, select) =>
    new Field(
      "updatePullRequestReview",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdatePullRequestReviewPayload))
    ),

  updatePullRequestReviewComment: (variables, select) =>
    new Field(
      "updatePullRequestReviewComment",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdatePullRequestReviewCommentPayload))
    ),

  updateRef: (variables, select) =>
    new Field(
      "updateRef",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateRefPayload))
    ),

  updateRepository: (variables, select) =>
    new Field(
      "updateRepository",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateRepositoryPayload))
    ),

  updateSubscription: (variables, select) =>
    new Field(
      "updateSubscription",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateSubscriptionPayload))
    ),

  updateTeamDiscussion: (variables, select) =>
    new Field(
      "updateTeamDiscussion",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateTeamDiscussionPayload))
    ),

  updateTeamDiscussionComment: (variables, select) =>
    new Field(
      "updateTeamDiscussionComment",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateTeamDiscussionCommentPayload))
    ),

  updateTopics: (variables, select) =>
    new Field(
      "updateTopics",
      [new Argument("input", variables.input)],
      new SelectionSet(select(UpdateTopicsPayload))
    ),
};

export interface INode {
  __typename: string;
  id: string;
}

interface NodeSelector {
  __typename: () => Field<"__typename">;

  id: () => Field<"id">;

  on: <
    T extends Array<Selection>,
    F extends
      | "AddedToProjectEvent"
      | "App"
      | "AssignedEvent"
      | "AutomaticBaseChangeFailedEvent"
      | "AutomaticBaseChangeSucceededEvent"
      | "BaseRefChangedEvent"
      | "BaseRefDeletedEvent"
      | "BaseRefForcePushedEvent"
      | "Blob"
      | "Bot"
      | "BranchProtectionRule"
      | "CheckRun"
      | "CheckSuite"
      | "ClosedEvent"
      | "CodeOfConduct"
      | "CommentDeletedEvent"
      | "Commit"
      | "CommitComment"
      | "CommitCommentThread"
      | "ConnectedEvent"
      | "ConvertToDraftEvent"
      | "ConvertedNoteToIssueEvent"
      | "CrossReferencedEvent"
      | "DemilestonedEvent"
      | "DeployKey"
      | "DeployedEvent"
      | "Deployment"
      | "DeploymentEnvironmentChangedEvent"
      | "DeploymentStatus"
      | "DisconnectedEvent"
      | "Enterprise"
      | "EnterpriseAdministratorInvitation"
      | "EnterpriseIdentityProvider"
      | "EnterpriseRepositoryInfo"
      | "EnterpriseServerInstallation"
      | "EnterpriseServerUserAccount"
      | "EnterpriseServerUserAccountEmail"
      | "EnterpriseServerUserAccountsUpload"
      | "EnterpriseUserAccount"
      | "ExternalIdentity"
      | "Gist"
      | "GistComment"
      | "HeadRefDeletedEvent"
      | "HeadRefForcePushedEvent"
      | "HeadRefRestoredEvent"
      | "IpAllowListEntry"
      | "Issue"
      | "IssueComment"
      | "Label"
      | "LabeledEvent"
      | "Language"
      | "License"
      | "LockedEvent"
      | "Mannequin"
      | "MarkedAsDuplicateEvent"
      | "MarketplaceCategory"
      | "MarketplaceListing"
      | "MembersCanDeleteReposClearAuditEntry"
      | "MembersCanDeleteReposDisableAuditEntry"
      | "MembersCanDeleteReposEnableAuditEntry"
      | "MentionedEvent"
      | "MergedEvent"
      | "Milestone"
      | "MilestonedEvent"
      | "MovedColumnsInProjectEvent"
      | "OauthApplicationCreateAuditEntry"
      | "OrgAddBillingManagerAuditEntry"
      | "OrgAddMemberAuditEntry"
      | "OrgBlockUserAuditEntry"
      | "OrgConfigDisableCollaboratorsOnlyAuditEntry"
      | "OrgConfigEnableCollaboratorsOnlyAuditEntry"
      | "OrgCreateAuditEntry"
      | "OrgDisableOauthAppRestrictionsAuditEntry"
      | "OrgDisableSamlAuditEntry"
      | "OrgDisableTwoFactorRequirementAuditEntry"
      | "OrgEnableOauthAppRestrictionsAuditEntry"
      | "OrgEnableSamlAuditEntry"
      | "OrgEnableTwoFactorRequirementAuditEntry"
      | "OrgInviteMemberAuditEntry"
      | "OrgInviteToBusinessAuditEntry"
      | "OrgOauthAppAccessApprovedAuditEntry"
      | "OrgOauthAppAccessDeniedAuditEntry"
      | "OrgOauthAppAccessRequestedAuditEntry"
      | "OrgRemoveBillingManagerAuditEntry"
      | "OrgRemoveMemberAuditEntry"
      | "OrgRemoveOutsideCollaboratorAuditEntry"
      | "OrgRestoreMemberAuditEntry"
      | "OrgUnblockUserAuditEntry"
      | "OrgUpdateDefaultRepositoryPermissionAuditEntry"
      | "OrgUpdateMemberAuditEntry"
      | "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
      | "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
      | "Organization"
      | "OrganizationIdentityProvider"
      | "OrganizationInvitation"
      | "Package"
      | "PackageFile"
      | "PackageTag"
      | "PackageVersion"
      | "PinnedEvent"
      | "PrivateRepositoryForkingDisableAuditEntry"
      | "PrivateRepositoryForkingEnableAuditEntry"
      | "Project"
      | "ProjectCard"
      | "ProjectColumn"
      | "PublicKey"
      | "PullRequest"
      | "PullRequestCommit"
      | "PullRequestCommitCommentThread"
      | "PullRequestReview"
      | "PullRequestReviewComment"
      | "PullRequestReviewThread"
      | "Push"
      | "PushAllowance"
      | "Reaction"
      | "ReadyForReviewEvent"
      | "Ref"
      | "ReferencedEvent"
      | "Release"
      | "ReleaseAsset"
      | "RemovedFromProjectEvent"
      | "RenamedTitleEvent"
      | "ReopenedEvent"
      | "RepoAccessAuditEntry"
      | "RepoAddMemberAuditEntry"
      | "RepoAddTopicAuditEntry"
      | "RepoArchivedAuditEntry"
      | "RepoChangeMergeSettingAuditEntry"
      | "RepoConfigDisableAnonymousGitAccessAuditEntry"
      | "RepoConfigDisableCollaboratorsOnlyAuditEntry"
      | "RepoConfigDisableContributorsOnlyAuditEntry"
      | "RepoConfigDisableSockpuppetDisallowedAuditEntry"
      | "RepoConfigEnableAnonymousGitAccessAuditEntry"
      | "RepoConfigEnableCollaboratorsOnlyAuditEntry"
      | "RepoConfigEnableContributorsOnlyAuditEntry"
      | "RepoConfigEnableSockpuppetDisallowedAuditEntry"
      | "RepoConfigLockAnonymousGitAccessAuditEntry"
      | "RepoConfigUnlockAnonymousGitAccessAuditEntry"
      | "RepoCreateAuditEntry"
      | "RepoDestroyAuditEntry"
      | "RepoRemoveMemberAuditEntry"
      | "RepoRemoveTopicAuditEntry"
      | "Repository"
      | "RepositoryInvitation"
      | "RepositoryTopic"
      | "RepositoryVisibilityChangeDisableAuditEntry"
      | "RepositoryVisibilityChangeEnableAuditEntry"
      | "RepositoryVulnerabilityAlert"
      | "ReviewDismissalAllowance"
      | "ReviewDismissedEvent"
      | "ReviewRequest"
      | "ReviewRequestRemovedEvent"
      | "ReviewRequestedEvent"
      | "SavedReply"
      | "SecurityAdvisory"
      | "SponsorsListing"
      | "SponsorsTier"
      | "Sponsorship"
      | "Status"
      | "StatusCheckRollup"
      | "StatusContext"
      | "SubscribedEvent"
      | "Tag"
      | "Team"
      | "TeamAddMemberAuditEntry"
      | "TeamAddRepositoryAuditEntry"
      | "TeamChangeParentTeamAuditEntry"
      | "TeamDiscussion"
      | "TeamDiscussionComment"
      | "TeamRemoveMemberAuditEntry"
      | "TeamRemoveRepositoryAuditEntry"
      | "Topic"
      | "TransferredEvent"
      | "Tree"
      | "UnassignedEvent"
      | "UnlabeledEvent"
      | "UnlockedEvent"
      | "UnmarkedAsDuplicateEvent"
      | "UnpinnedEvent"
      | "UnsubscribedEvent"
      | "User"
      | "UserBlockedEvent"
      | "UserContentEdit"
      | "UserStatus"
  >(
    type: F,
    select: (
      t: F extends "AddedToProjectEvent"
        ? AddedToProjectEventSelector
        : F extends "App"
        ? AppSelector
        : F extends "AssignedEvent"
        ? AssignedEventSelector
        : F extends "AutomaticBaseChangeFailedEvent"
        ? AutomaticBaseChangeFailedEventSelector
        : F extends "AutomaticBaseChangeSucceededEvent"
        ? AutomaticBaseChangeSucceededEventSelector
        : F extends "BaseRefChangedEvent"
        ? BaseRefChangedEventSelector
        : F extends "BaseRefDeletedEvent"
        ? BaseRefDeletedEventSelector
        : F extends "BaseRefForcePushedEvent"
        ? BaseRefForcePushedEventSelector
        : F extends "Blob"
        ? BlobSelector
        : F extends "Bot"
        ? BotSelector
        : F extends "BranchProtectionRule"
        ? BranchProtectionRuleSelector
        : F extends "CheckRun"
        ? CheckRunSelector
        : F extends "CheckSuite"
        ? CheckSuiteSelector
        : F extends "ClosedEvent"
        ? ClosedEventSelector
        : F extends "CodeOfConduct"
        ? CodeOfConductSelector
        : F extends "CommentDeletedEvent"
        ? CommentDeletedEventSelector
        : F extends "Commit"
        ? CommitSelector
        : F extends "CommitComment"
        ? CommitCommentSelector
        : F extends "CommitCommentThread"
        ? CommitCommentThreadSelector
        : F extends "ConnectedEvent"
        ? ConnectedEventSelector
        : F extends "ConvertToDraftEvent"
        ? ConvertToDraftEventSelector
        : F extends "ConvertedNoteToIssueEvent"
        ? ConvertedNoteToIssueEventSelector
        : F extends "CrossReferencedEvent"
        ? CrossReferencedEventSelector
        : F extends "DemilestonedEvent"
        ? DemilestonedEventSelector
        : F extends "DeployKey"
        ? DeployKeySelector
        : F extends "DeployedEvent"
        ? DeployedEventSelector
        : F extends "Deployment"
        ? DeploymentSelector
        : F extends "DeploymentEnvironmentChangedEvent"
        ? DeploymentEnvironmentChangedEventSelector
        : F extends "DeploymentStatus"
        ? DeploymentStatusSelector
        : F extends "DisconnectedEvent"
        ? DisconnectedEventSelector
        : F extends "Enterprise"
        ? EnterpriseSelector
        : F extends "EnterpriseAdministratorInvitation"
        ? EnterpriseAdministratorInvitationSelector
        : F extends "EnterpriseIdentityProvider"
        ? EnterpriseIdentityProviderSelector
        : F extends "EnterpriseRepositoryInfo"
        ? EnterpriseRepositoryInfoSelector
        : F extends "EnterpriseServerInstallation"
        ? EnterpriseServerInstallationSelector
        : F extends "EnterpriseServerUserAccount"
        ? EnterpriseServerUserAccountSelector
        : F extends "EnterpriseServerUserAccountEmail"
        ? EnterpriseServerUserAccountEmailSelector
        : F extends "EnterpriseServerUserAccountsUpload"
        ? EnterpriseServerUserAccountsUploadSelector
        : F extends "EnterpriseUserAccount"
        ? EnterpriseUserAccountSelector
        : F extends "ExternalIdentity"
        ? ExternalIdentitySelector
        : F extends "Gist"
        ? GistSelector
        : F extends "GistComment"
        ? GistCommentSelector
        : F extends "HeadRefDeletedEvent"
        ? HeadRefDeletedEventSelector
        : F extends "HeadRefForcePushedEvent"
        ? HeadRefForcePushedEventSelector
        : F extends "HeadRefRestoredEvent"
        ? HeadRefRestoredEventSelector
        : F extends "IpAllowListEntry"
        ? IpAllowListEntrySelector
        : F extends "Issue"
        ? IssueSelector
        : F extends "IssueComment"
        ? IssueCommentSelector
        : F extends "Label"
        ? LabelSelector
        : F extends "LabeledEvent"
        ? LabeledEventSelector
        : F extends "Language"
        ? LanguageSelector
        : F extends "License"
        ? LicenseSelector
        : F extends "LockedEvent"
        ? LockedEventSelector
        : F extends "Mannequin"
        ? MannequinSelector
        : F extends "MarkedAsDuplicateEvent"
        ? MarkedAsDuplicateEventSelector
        : F extends "MarketplaceCategory"
        ? MarketplaceCategorySelector
        : F extends "MarketplaceListing"
        ? MarketplaceListingSelector
        : F extends "MembersCanDeleteReposClearAuditEntry"
        ? MembersCanDeleteReposClearAuditEntrySelector
        : F extends "MembersCanDeleteReposDisableAuditEntry"
        ? MembersCanDeleteReposDisableAuditEntrySelector
        : F extends "MembersCanDeleteReposEnableAuditEntry"
        ? MembersCanDeleteReposEnableAuditEntrySelector
        : F extends "MentionedEvent"
        ? MentionedEventSelector
        : F extends "MergedEvent"
        ? MergedEventSelector
        : F extends "Milestone"
        ? MilestoneSelector
        : F extends "MilestonedEvent"
        ? MilestonedEventSelector
        : F extends "MovedColumnsInProjectEvent"
        ? MovedColumnsInProjectEventSelector
        : F extends "OauthApplicationCreateAuditEntry"
        ? OauthApplicationCreateAuditEntrySelector
        : F extends "OrgAddBillingManagerAuditEntry"
        ? OrgAddBillingManagerAuditEntrySelector
        : F extends "OrgAddMemberAuditEntry"
        ? OrgAddMemberAuditEntrySelector
        : F extends "OrgBlockUserAuditEntry"
        ? OrgBlockUserAuditEntrySelector
        : F extends "OrgConfigDisableCollaboratorsOnlyAuditEntry"
        ? OrgConfigDisableCollaboratorsOnlyAuditEntrySelector
        : F extends "OrgConfigEnableCollaboratorsOnlyAuditEntry"
        ? OrgConfigEnableCollaboratorsOnlyAuditEntrySelector
        : F extends "OrgCreateAuditEntry"
        ? OrgCreateAuditEntrySelector
        : F extends "OrgDisableOauthAppRestrictionsAuditEntry"
        ? OrgDisableOauthAppRestrictionsAuditEntrySelector
        : F extends "OrgDisableSamlAuditEntry"
        ? OrgDisableSamlAuditEntrySelector
        : F extends "OrgDisableTwoFactorRequirementAuditEntry"
        ? OrgDisableTwoFactorRequirementAuditEntrySelector
        : F extends "OrgEnableOauthAppRestrictionsAuditEntry"
        ? OrgEnableOauthAppRestrictionsAuditEntrySelector
        : F extends "OrgEnableSamlAuditEntry"
        ? OrgEnableSamlAuditEntrySelector
        : F extends "OrgEnableTwoFactorRequirementAuditEntry"
        ? OrgEnableTwoFactorRequirementAuditEntrySelector
        : F extends "OrgInviteMemberAuditEntry"
        ? OrgInviteMemberAuditEntrySelector
        : F extends "OrgInviteToBusinessAuditEntry"
        ? OrgInviteToBusinessAuditEntrySelector
        : F extends "OrgOauthAppAccessApprovedAuditEntry"
        ? OrgOauthAppAccessApprovedAuditEntrySelector
        : F extends "OrgOauthAppAccessDeniedAuditEntry"
        ? OrgOauthAppAccessDeniedAuditEntrySelector
        : F extends "OrgOauthAppAccessRequestedAuditEntry"
        ? OrgOauthAppAccessRequestedAuditEntrySelector
        : F extends "OrgRemoveBillingManagerAuditEntry"
        ? OrgRemoveBillingManagerAuditEntrySelector
        : F extends "OrgRemoveMemberAuditEntry"
        ? OrgRemoveMemberAuditEntrySelector
        : F extends "OrgRemoveOutsideCollaboratorAuditEntry"
        ? OrgRemoveOutsideCollaboratorAuditEntrySelector
        : F extends "OrgRestoreMemberAuditEntry"
        ? OrgRestoreMemberAuditEntrySelector
        : F extends "OrgUnblockUserAuditEntry"
        ? OrgUnblockUserAuditEntrySelector
        : F extends "OrgUpdateDefaultRepositoryPermissionAuditEntry"
        ? OrgUpdateDefaultRepositoryPermissionAuditEntrySelector
        : F extends "OrgUpdateMemberAuditEntry"
        ? OrgUpdateMemberAuditEntrySelector
        : F extends "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
        ? OrgUpdateMemberRepositoryCreationPermissionAuditEntrySelector
        : F extends "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
        ? OrgUpdateMemberRepositoryInvitationPermissionAuditEntrySelector
        : F extends "Organization"
        ? OrganizationSelector
        : F extends "OrganizationIdentityProvider"
        ? OrganizationIdentityProviderSelector
        : F extends "OrganizationInvitation"
        ? OrganizationInvitationSelector
        : F extends "Package"
        ? PackageSelector
        : F extends "PackageFile"
        ? PackageFileSelector
        : F extends "PackageTag"
        ? PackageTagSelector
        : F extends "PackageVersion"
        ? PackageVersionSelector
        : F extends "PinnedEvent"
        ? PinnedEventSelector
        : F extends "PrivateRepositoryForkingDisableAuditEntry"
        ? PrivateRepositoryForkingDisableAuditEntrySelector
        : F extends "PrivateRepositoryForkingEnableAuditEntry"
        ? PrivateRepositoryForkingEnableAuditEntrySelector
        : F extends "Project"
        ? ProjectSelector
        : F extends "ProjectCard"
        ? ProjectCardSelector
        : F extends "ProjectColumn"
        ? ProjectColumnSelector
        : F extends "PublicKey"
        ? PublicKeySelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : F extends "PullRequestCommit"
        ? PullRequestCommitSelector
        : F extends "PullRequestCommitCommentThread"
        ? PullRequestCommitCommentThreadSelector
        : F extends "PullRequestReview"
        ? PullRequestReviewSelector
        : F extends "PullRequestReviewComment"
        ? PullRequestReviewCommentSelector
        : F extends "PullRequestReviewThread"
        ? PullRequestReviewThreadSelector
        : F extends "Push"
        ? PushSelector
        : F extends "PushAllowance"
        ? PushAllowanceSelector
        : F extends "Reaction"
        ? ReactionSelector
        : F extends "ReadyForReviewEvent"
        ? ReadyForReviewEventSelector
        : F extends "Ref"
        ? RefSelector
        : F extends "ReferencedEvent"
        ? ReferencedEventSelector
        : F extends "Release"
        ? ReleaseSelector
        : F extends "ReleaseAsset"
        ? ReleaseAssetSelector
        : F extends "RemovedFromProjectEvent"
        ? RemovedFromProjectEventSelector
        : F extends "RenamedTitleEvent"
        ? RenamedTitleEventSelector
        : F extends "ReopenedEvent"
        ? ReopenedEventSelector
        : F extends "RepoAccessAuditEntry"
        ? RepoAccessAuditEntrySelector
        : F extends "RepoAddMemberAuditEntry"
        ? RepoAddMemberAuditEntrySelector
        : F extends "RepoAddTopicAuditEntry"
        ? RepoAddTopicAuditEntrySelector
        : F extends "RepoArchivedAuditEntry"
        ? RepoArchivedAuditEntrySelector
        : F extends "RepoChangeMergeSettingAuditEntry"
        ? RepoChangeMergeSettingAuditEntrySelector
        : F extends "RepoConfigDisableAnonymousGitAccessAuditEntry"
        ? RepoConfigDisableAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigDisableCollaboratorsOnlyAuditEntry"
        ? RepoConfigDisableCollaboratorsOnlyAuditEntrySelector
        : F extends "RepoConfigDisableContributorsOnlyAuditEntry"
        ? RepoConfigDisableContributorsOnlyAuditEntrySelector
        : F extends "RepoConfigDisableSockpuppetDisallowedAuditEntry"
        ? RepoConfigDisableSockpuppetDisallowedAuditEntrySelector
        : F extends "RepoConfigEnableAnonymousGitAccessAuditEntry"
        ? RepoConfigEnableAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigEnableCollaboratorsOnlyAuditEntry"
        ? RepoConfigEnableCollaboratorsOnlyAuditEntrySelector
        : F extends "RepoConfigEnableContributorsOnlyAuditEntry"
        ? RepoConfigEnableContributorsOnlyAuditEntrySelector
        : F extends "RepoConfigEnableSockpuppetDisallowedAuditEntry"
        ? RepoConfigEnableSockpuppetDisallowedAuditEntrySelector
        : F extends "RepoConfigLockAnonymousGitAccessAuditEntry"
        ? RepoConfigLockAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigUnlockAnonymousGitAccessAuditEntry"
        ? RepoConfigUnlockAnonymousGitAccessAuditEntrySelector
        : F extends "RepoCreateAuditEntry"
        ? RepoCreateAuditEntrySelector
        : F extends "RepoDestroyAuditEntry"
        ? RepoDestroyAuditEntrySelector
        : F extends "RepoRemoveMemberAuditEntry"
        ? RepoRemoveMemberAuditEntrySelector
        : F extends "RepoRemoveTopicAuditEntry"
        ? RepoRemoveTopicAuditEntrySelector
        : F extends "Repository"
        ? RepositorySelector
        : F extends "RepositoryInvitation"
        ? RepositoryInvitationSelector
        : F extends "RepositoryTopic"
        ? RepositoryTopicSelector
        : F extends "RepositoryVisibilityChangeDisableAuditEntry"
        ? RepositoryVisibilityChangeDisableAuditEntrySelector
        : F extends "RepositoryVisibilityChangeEnableAuditEntry"
        ? RepositoryVisibilityChangeEnableAuditEntrySelector
        : F extends "RepositoryVulnerabilityAlert"
        ? RepositoryVulnerabilityAlertSelector
        : F extends "ReviewDismissalAllowance"
        ? ReviewDismissalAllowanceSelector
        : F extends "ReviewDismissedEvent"
        ? ReviewDismissedEventSelector
        : F extends "ReviewRequest"
        ? ReviewRequestSelector
        : F extends "ReviewRequestRemovedEvent"
        ? ReviewRequestRemovedEventSelector
        : F extends "ReviewRequestedEvent"
        ? ReviewRequestedEventSelector
        : F extends "SavedReply"
        ? SavedReplySelector
        : F extends "SecurityAdvisory"
        ? SecurityAdvisorySelector
        : F extends "SponsorsListing"
        ? SponsorsListingSelector
        : F extends "SponsorsTier"
        ? SponsorsTierSelector
        : F extends "Sponsorship"
        ? SponsorshipSelector
        : F extends "Status"
        ? StatusSelector
        : F extends "StatusCheckRollup"
        ? StatusCheckRollupSelector
        : F extends "StatusContext"
        ? StatusContextSelector
        : F extends "SubscribedEvent"
        ? SubscribedEventSelector
        : F extends "Tag"
        ? TagSelector
        : F extends "Team"
        ? TeamSelector
        : F extends "TeamAddMemberAuditEntry"
        ? TeamAddMemberAuditEntrySelector
        : F extends "TeamAddRepositoryAuditEntry"
        ? TeamAddRepositoryAuditEntrySelector
        : F extends "TeamChangeParentTeamAuditEntry"
        ? TeamChangeParentTeamAuditEntrySelector
        : F extends "TeamDiscussion"
        ? TeamDiscussionSelector
        : F extends "TeamDiscussionComment"
        ? TeamDiscussionCommentSelector
        : F extends "TeamRemoveMemberAuditEntry"
        ? TeamRemoveMemberAuditEntrySelector
        : F extends "TeamRemoveRepositoryAuditEntry"
        ? TeamRemoveRepositoryAuditEntrySelector
        : F extends "Topic"
        ? TopicSelector
        : F extends "TransferredEvent"
        ? TransferredEventSelector
        : F extends "Tree"
        ? TreeSelector
        : F extends "UnassignedEvent"
        ? UnassignedEventSelector
        : F extends "UnlabeledEvent"
        ? UnlabeledEventSelector
        : F extends "UnlockedEvent"
        ? UnlockedEventSelector
        : F extends "UnmarkedAsDuplicateEvent"
        ? UnmarkedAsDuplicateEventSelector
        : F extends "UnpinnedEvent"
        ? UnpinnedEventSelector
        : F extends "UnsubscribedEvent"
        ? UnsubscribedEventSelector
        : F extends "User"
        ? UserSelector
        : F extends "UserBlockedEvent"
        ? UserBlockedEventSelector
        : F extends "UserContentEdit"
        ? UserContentEditSelector
        : F extends "UserStatus"
        ? UserStatusSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Node: NodeSelector = {
  __typename: () => new Field("__typename"),

  id: () => new Field("id"),

  on: (type, select) => {
    switch (type) {
      case "AddedToProjectEvent": {
        return new InlineFragment(
          new NamedType("AddedToProjectEvent") as any,
          new SelectionSet(select(AddedToProjectEvent as any))
        );
      }

      case "App": {
        return new InlineFragment(
          new NamedType("App") as any,
          new SelectionSet(select(App as any))
        );
      }

      case "AssignedEvent": {
        return new InlineFragment(
          new NamedType("AssignedEvent") as any,
          new SelectionSet(select(AssignedEvent as any))
        );
      }

      case "AutomaticBaseChangeFailedEvent": {
        return new InlineFragment(
          new NamedType("AutomaticBaseChangeFailedEvent") as any,
          new SelectionSet(select(AutomaticBaseChangeFailedEvent as any))
        );
      }

      case "AutomaticBaseChangeSucceededEvent": {
        return new InlineFragment(
          new NamedType("AutomaticBaseChangeSucceededEvent") as any,
          new SelectionSet(select(AutomaticBaseChangeSucceededEvent as any))
        );
      }

      case "BaseRefChangedEvent": {
        return new InlineFragment(
          new NamedType("BaseRefChangedEvent") as any,
          new SelectionSet(select(BaseRefChangedEvent as any))
        );
      }

      case "BaseRefDeletedEvent": {
        return new InlineFragment(
          new NamedType("BaseRefDeletedEvent") as any,
          new SelectionSet(select(BaseRefDeletedEvent as any))
        );
      }

      case "BaseRefForcePushedEvent": {
        return new InlineFragment(
          new NamedType("BaseRefForcePushedEvent") as any,
          new SelectionSet(select(BaseRefForcePushedEvent as any))
        );
      }

      case "Blob": {
        return new InlineFragment(
          new NamedType("Blob") as any,
          new SelectionSet(select(Blob as any))
        );
      }

      case "Bot": {
        return new InlineFragment(
          new NamedType("Bot") as any,
          new SelectionSet(select(Bot as any))
        );
      }

      case "BranchProtectionRule": {
        return new InlineFragment(
          new NamedType("BranchProtectionRule") as any,
          new SelectionSet(select(BranchProtectionRule as any))
        );
      }

      case "CheckRun": {
        return new InlineFragment(
          new NamedType("CheckRun") as any,
          new SelectionSet(select(CheckRun as any))
        );
      }

      case "CheckSuite": {
        return new InlineFragment(
          new NamedType("CheckSuite") as any,
          new SelectionSet(select(CheckSuite as any))
        );
      }

      case "ClosedEvent": {
        return new InlineFragment(
          new NamedType("ClosedEvent") as any,
          new SelectionSet(select(ClosedEvent as any))
        );
      }

      case "CodeOfConduct": {
        return new InlineFragment(
          new NamedType("CodeOfConduct") as any,
          new SelectionSet(select(CodeOfConduct as any))
        );
      }

      case "CommentDeletedEvent": {
        return new InlineFragment(
          new NamedType("CommentDeletedEvent") as any,
          new SelectionSet(select(CommentDeletedEvent as any))
        );
      }

      case "Commit": {
        return new InlineFragment(
          new NamedType("Commit") as any,
          new SelectionSet(select(Commit as any))
        );
      }

      case "CommitComment": {
        return new InlineFragment(
          new NamedType("CommitComment") as any,
          new SelectionSet(select(CommitComment as any))
        );
      }

      case "CommitCommentThread": {
        return new InlineFragment(
          new NamedType("CommitCommentThread") as any,
          new SelectionSet(select(CommitCommentThread as any))
        );
      }

      case "ConnectedEvent": {
        return new InlineFragment(
          new NamedType("ConnectedEvent") as any,
          new SelectionSet(select(ConnectedEvent as any))
        );
      }

      case "ConvertToDraftEvent": {
        return new InlineFragment(
          new NamedType("ConvertToDraftEvent") as any,
          new SelectionSet(select(ConvertToDraftEvent as any))
        );
      }

      case "ConvertedNoteToIssueEvent": {
        return new InlineFragment(
          new NamedType("ConvertedNoteToIssueEvent") as any,
          new SelectionSet(select(ConvertedNoteToIssueEvent as any))
        );
      }

      case "CrossReferencedEvent": {
        return new InlineFragment(
          new NamedType("CrossReferencedEvent") as any,
          new SelectionSet(select(CrossReferencedEvent as any))
        );
      }

      case "DemilestonedEvent": {
        return new InlineFragment(
          new NamedType("DemilestonedEvent") as any,
          new SelectionSet(select(DemilestonedEvent as any))
        );
      }

      case "DeployKey": {
        return new InlineFragment(
          new NamedType("DeployKey") as any,
          new SelectionSet(select(DeployKey as any))
        );
      }

      case "DeployedEvent": {
        return new InlineFragment(
          new NamedType("DeployedEvent") as any,
          new SelectionSet(select(DeployedEvent as any))
        );
      }

      case "Deployment": {
        return new InlineFragment(
          new NamedType("Deployment") as any,
          new SelectionSet(select(Deployment as any))
        );
      }

      case "DeploymentEnvironmentChangedEvent": {
        return new InlineFragment(
          new NamedType("DeploymentEnvironmentChangedEvent") as any,
          new SelectionSet(select(DeploymentEnvironmentChangedEvent as any))
        );
      }

      case "DeploymentStatus": {
        return new InlineFragment(
          new NamedType("DeploymentStatus") as any,
          new SelectionSet(select(DeploymentStatus as any))
        );
      }

      case "DisconnectedEvent": {
        return new InlineFragment(
          new NamedType("DisconnectedEvent") as any,
          new SelectionSet(select(DisconnectedEvent as any))
        );
      }

      case "Enterprise": {
        return new InlineFragment(
          new NamedType("Enterprise") as any,
          new SelectionSet(select(Enterprise as any))
        );
      }

      case "EnterpriseAdministratorInvitation": {
        return new InlineFragment(
          new NamedType("EnterpriseAdministratorInvitation") as any,
          new SelectionSet(select(EnterpriseAdministratorInvitation as any))
        );
      }

      case "EnterpriseIdentityProvider": {
        return new InlineFragment(
          new NamedType("EnterpriseIdentityProvider") as any,
          new SelectionSet(select(EnterpriseIdentityProvider as any))
        );
      }

      case "EnterpriseRepositoryInfo": {
        return new InlineFragment(
          new NamedType("EnterpriseRepositoryInfo") as any,
          new SelectionSet(select(EnterpriseRepositoryInfo as any))
        );
      }

      case "EnterpriseServerInstallation": {
        return new InlineFragment(
          new NamedType("EnterpriseServerInstallation") as any,
          new SelectionSet(select(EnterpriseServerInstallation as any))
        );
      }

      case "EnterpriseServerUserAccount": {
        return new InlineFragment(
          new NamedType("EnterpriseServerUserAccount") as any,
          new SelectionSet(select(EnterpriseServerUserAccount as any))
        );
      }

      case "EnterpriseServerUserAccountEmail": {
        return new InlineFragment(
          new NamedType("EnterpriseServerUserAccountEmail") as any,
          new SelectionSet(select(EnterpriseServerUserAccountEmail as any))
        );
      }

      case "EnterpriseServerUserAccountsUpload": {
        return new InlineFragment(
          new NamedType("EnterpriseServerUserAccountsUpload") as any,
          new SelectionSet(select(EnterpriseServerUserAccountsUpload as any))
        );
      }

      case "EnterpriseUserAccount": {
        return new InlineFragment(
          new NamedType("EnterpriseUserAccount") as any,
          new SelectionSet(select(EnterpriseUserAccount as any))
        );
      }

      case "ExternalIdentity": {
        return new InlineFragment(
          new NamedType("ExternalIdentity") as any,
          new SelectionSet(select(ExternalIdentity as any))
        );
      }

      case "Gist": {
        return new InlineFragment(
          new NamedType("Gist") as any,
          new SelectionSet(select(Gist as any))
        );
      }

      case "GistComment": {
        return new InlineFragment(
          new NamedType("GistComment") as any,
          new SelectionSet(select(GistComment as any))
        );
      }

      case "HeadRefDeletedEvent": {
        return new InlineFragment(
          new NamedType("HeadRefDeletedEvent") as any,
          new SelectionSet(select(HeadRefDeletedEvent as any))
        );
      }

      case "HeadRefForcePushedEvent": {
        return new InlineFragment(
          new NamedType("HeadRefForcePushedEvent") as any,
          new SelectionSet(select(HeadRefForcePushedEvent as any))
        );
      }

      case "HeadRefRestoredEvent": {
        return new InlineFragment(
          new NamedType("HeadRefRestoredEvent") as any,
          new SelectionSet(select(HeadRefRestoredEvent as any))
        );
      }

      case "IpAllowListEntry": {
        return new InlineFragment(
          new NamedType("IpAllowListEntry") as any,
          new SelectionSet(select(IpAllowListEntry as any))
        );
      }

      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "IssueComment": {
        return new InlineFragment(
          new NamedType("IssueComment") as any,
          new SelectionSet(select(IssueComment as any))
        );
      }

      case "Label": {
        return new InlineFragment(
          new NamedType("Label") as any,
          new SelectionSet(select(Label as any))
        );
      }

      case "LabeledEvent": {
        return new InlineFragment(
          new NamedType("LabeledEvent") as any,
          new SelectionSet(select(LabeledEvent as any))
        );
      }

      case "Language": {
        return new InlineFragment(
          new NamedType("Language") as any,
          new SelectionSet(select(Language as any))
        );
      }

      case "License": {
        return new InlineFragment(
          new NamedType("License") as any,
          new SelectionSet(select(License as any))
        );
      }

      case "LockedEvent": {
        return new InlineFragment(
          new NamedType("LockedEvent") as any,
          new SelectionSet(select(LockedEvent as any))
        );
      }

      case "Mannequin": {
        return new InlineFragment(
          new NamedType("Mannequin") as any,
          new SelectionSet(select(Mannequin as any))
        );
      }

      case "MarkedAsDuplicateEvent": {
        return new InlineFragment(
          new NamedType("MarkedAsDuplicateEvent") as any,
          new SelectionSet(select(MarkedAsDuplicateEvent as any))
        );
      }

      case "MarketplaceCategory": {
        return new InlineFragment(
          new NamedType("MarketplaceCategory") as any,
          new SelectionSet(select(MarketplaceCategory as any))
        );
      }

      case "MarketplaceListing": {
        return new InlineFragment(
          new NamedType("MarketplaceListing") as any,
          new SelectionSet(select(MarketplaceListing as any))
        );
      }

      case "MembersCanDeleteReposClearAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposClearAuditEntry") as any,
          new SelectionSet(select(MembersCanDeleteReposClearAuditEntry as any))
        );
      }

      case "MembersCanDeleteReposDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposDisableAuditEntry") as any,
          new SelectionSet(
            select(MembersCanDeleteReposDisableAuditEntry as any)
          )
        );
      }

      case "MembersCanDeleteReposEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposEnableAuditEntry") as any,
          new SelectionSet(select(MembersCanDeleteReposEnableAuditEntry as any))
        );
      }

      case "MentionedEvent": {
        return new InlineFragment(
          new NamedType("MentionedEvent") as any,
          new SelectionSet(select(MentionedEvent as any))
        );
      }

      case "MergedEvent": {
        return new InlineFragment(
          new NamedType("MergedEvent") as any,
          new SelectionSet(select(MergedEvent as any))
        );
      }

      case "Milestone": {
        return new InlineFragment(
          new NamedType("Milestone") as any,
          new SelectionSet(select(Milestone as any))
        );
      }

      case "MilestonedEvent": {
        return new InlineFragment(
          new NamedType("MilestonedEvent") as any,
          new SelectionSet(select(MilestonedEvent as any))
        );
      }

      case "MovedColumnsInProjectEvent": {
        return new InlineFragment(
          new NamedType("MovedColumnsInProjectEvent") as any,
          new SelectionSet(select(MovedColumnsInProjectEvent as any))
        );
      }

      case "OauthApplicationCreateAuditEntry": {
        return new InlineFragment(
          new NamedType("OauthApplicationCreateAuditEntry") as any,
          new SelectionSet(select(OauthApplicationCreateAuditEntry as any))
        );
      }

      case "OrgAddBillingManagerAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgAddBillingManagerAuditEntry") as any,
          new SelectionSet(select(OrgAddBillingManagerAuditEntry as any))
        );
      }

      case "OrgAddMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgAddMemberAuditEntry") as any,
          new SelectionSet(select(OrgAddMemberAuditEntry as any))
        );
      }

      case "OrgBlockUserAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgBlockUserAuditEntry") as any,
          new SelectionSet(select(OrgBlockUserAuditEntry as any))
        );
      }

      case "OrgConfigDisableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgConfigDisableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(OrgConfigDisableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "OrgConfigEnableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgConfigEnableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(OrgConfigEnableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "OrgCreateAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgCreateAuditEntry") as any,
          new SelectionSet(select(OrgCreateAuditEntry as any))
        );
      }

      case "OrgDisableOauthAppRestrictionsAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgDisableOauthAppRestrictionsAuditEntry") as any,
          new SelectionSet(
            select(OrgDisableOauthAppRestrictionsAuditEntry as any)
          )
        );
      }

      case "OrgDisableSamlAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgDisableSamlAuditEntry") as any,
          new SelectionSet(select(OrgDisableSamlAuditEntry as any))
        );
      }

      case "OrgDisableTwoFactorRequirementAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgDisableTwoFactorRequirementAuditEntry") as any,
          new SelectionSet(
            select(OrgDisableTwoFactorRequirementAuditEntry as any)
          )
        );
      }

      case "OrgEnableOauthAppRestrictionsAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgEnableOauthAppRestrictionsAuditEntry") as any,
          new SelectionSet(
            select(OrgEnableOauthAppRestrictionsAuditEntry as any)
          )
        );
      }

      case "OrgEnableSamlAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgEnableSamlAuditEntry") as any,
          new SelectionSet(select(OrgEnableSamlAuditEntry as any))
        );
      }

      case "OrgEnableTwoFactorRequirementAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgEnableTwoFactorRequirementAuditEntry") as any,
          new SelectionSet(
            select(OrgEnableTwoFactorRequirementAuditEntry as any)
          )
        );
      }

      case "OrgInviteMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgInviteMemberAuditEntry") as any,
          new SelectionSet(select(OrgInviteMemberAuditEntry as any))
        );
      }

      case "OrgInviteToBusinessAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgInviteToBusinessAuditEntry") as any,
          new SelectionSet(select(OrgInviteToBusinessAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessApprovedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessApprovedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessApprovedAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessDeniedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessDeniedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessDeniedAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessRequestedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessRequestedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessRequestedAuditEntry as any))
        );
      }

      case "OrgRemoveBillingManagerAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRemoveBillingManagerAuditEntry") as any,
          new SelectionSet(select(OrgRemoveBillingManagerAuditEntry as any))
        );
      }

      case "OrgRemoveMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRemoveMemberAuditEntry") as any,
          new SelectionSet(select(OrgRemoveMemberAuditEntry as any))
        );
      }

      case "OrgRemoveOutsideCollaboratorAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRemoveOutsideCollaboratorAuditEntry") as any,
          new SelectionSet(
            select(OrgRemoveOutsideCollaboratorAuditEntry as any)
          )
        );
      }

      case "OrgRestoreMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRestoreMemberAuditEntry") as any,
          new SelectionSet(select(OrgRestoreMemberAuditEntry as any))
        );
      }

      case "OrgUnblockUserAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgUnblockUserAuditEntry") as any,
          new SelectionSet(select(OrgUnblockUserAuditEntry as any))
        );
      }

      case "OrgUpdateDefaultRepositoryPermissionAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "OrgUpdateDefaultRepositoryPermissionAuditEntry"
          ) as any,
          new SelectionSet(
            select(OrgUpdateDefaultRepositoryPermissionAuditEntry as any)
          )
        );
      }

      case "OrgUpdateMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgUpdateMemberAuditEntry") as any,
          new SelectionSet(select(OrgUpdateMemberAuditEntry as any))
        );
      }

      case "OrgUpdateMemberRepositoryCreationPermissionAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
          ) as any,
          new SelectionSet(
            select(OrgUpdateMemberRepositoryCreationPermissionAuditEntry as any)
          )
        );
      }

      case "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
          ) as any,
          new SelectionSet(
            select(
              OrgUpdateMemberRepositoryInvitationPermissionAuditEntry as any
            )
          )
        );
      }

      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      case "OrganizationIdentityProvider": {
        return new InlineFragment(
          new NamedType("OrganizationIdentityProvider") as any,
          new SelectionSet(select(OrganizationIdentityProvider as any))
        );
      }

      case "OrganizationInvitation": {
        return new InlineFragment(
          new NamedType("OrganizationInvitation") as any,
          new SelectionSet(select(OrganizationInvitation as any))
        );
      }

      case "Package": {
        return new InlineFragment(
          new NamedType("Package") as any,
          new SelectionSet(select(Package as any))
        );
      }

      case "PackageFile": {
        return new InlineFragment(
          new NamedType("PackageFile") as any,
          new SelectionSet(select(PackageFile as any))
        );
      }

      case "PackageTag": {
        return new InlineFragment(
          new NamedType("PackageTag") as any,
          new SelectionSet(select(PackageTag as any))
        );
      }

      case "PackageVersion": {
        return new InlineFragment(
          new NamedType("PackageVersion") as any,
          new SelectionSet(select(PackageVersion as any))
        );
      }

      case "PinnedEvent": {
        return new InlineFragment(
          new NamedType("PinnedEvent") as any,
          new SelectionSet(select(PinnedEvent as any))
        );
      }

      case "PrivateRepositoryForkingDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("PrivateRepositoryForkingDisableAuditEntry") as any,
          new SelectionSet(
            select(PrivateRepositoryForkingDisableAuditEntry as any)
          )
        );
      }

      case "PrivateRepositoryForkingEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("PrivateRepositoryForkingEnableAuditEntry") as any,
          new SelectionSet(
            select(PrivateRepositoryForkingEnableAuditEntry as any)
          )
        );
      }

      case "Project": {
        return new InlineFragment(
          new NamedType("Project") as any,
          new SelectionSet(select(Project as any))
        );
      }

      case "ProjectCard": {
        return new InlineFragment(
          new NamedType("ProjectCard") as any,
          new SelectionSet(select(ProjectCard as any))
        );
      }

      case "ProjectColumn": {
        return new InlineFragment(
          new NamedType("ProjectColumn") as any,
          new SelectionSet(select(ProjectColumn as any))
        );
      }

      case "PublicKey": {
        return new InlineFragment(
          new NamedType("PublicKey") as any,
          new SelectionSet(select(PublicKey as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      case "PullRequestCommit": {
        return new InlineFragment(
          new NamedType("PullRequestCommit") as any,
          new SelectionSet(select(PullRequestCommit as any))
        );
      }

      case "PullRequestCommitCommentThread": {
        return new InlineFragment(
          new NamedType("PullRequestCommitCommentThread") as any,
          new SelectionSet(select(PullRequestCommitCommentThread as any))
        );
      }

      case "PullRequestReview": {
        return new InlineFragment(
          new NamedType("PullRequestReview") as any,
          new SelectionSet(select(PullRequestReview as any))
        );
      }

      case "PullRequestReviewComment": {
        return new InlineFragment(
          new NamedType("PullRequestReviewComment") as any,
          new SelectionSet(select(PullRequestReviewComment as any))
        );
      }

      case "PullRequestReviewThread": {
        return new InlineFragment(
          new NamedType("PullRequestReviewThread") as any,
          new SelectionSet(select(PullRequestReviewThread as any))
        );
      }

      case "Push": {
        return new InlineFragment(
          new NamedType("Push") as any,
          new SelectionSet(select(Push as any))
        );
      }

      case "PushAllowance": {
        return new InlineFragment(
          new NamedType("PushAllowance") as any,
          new SelectionSet(select(PushAllowance as any))
        );
      }

      case "Reaction": {
        return new InlineFragment(
          new NamedType("Reaction") as any,
          new SelectionSet(select(Reaction as any))
        );
      }

      case "ReadyForReviewEvent": {
        return new InlineFragment(
          new NamedType("ReadyForReviewEvent") as any,
          new SelectionSet(select(ReadyForReviewEvent as any))
        );
      }

      case "Ref": {
        return new InlineFragment(
          new NamedType("Ref") as any,
          new SelectionSet(select(Ref as any))
        );
      }

      case "ReferencedEvent": {
        return new InlineFragment(
          new NamedType("ReferencedEvent") as any,
          new SelectionSet(select(ReferencedEvent as any))
        );
      }

      case "Release": {
        return new InlineFragment(
          new NamedType("Release") as any,
          new SelectionSet(select(Release as any))
        );
      }

      case "ReleaseAsset": {
        return new InlineFragment(
          new NamedType("ReleaseAsset") as any,
          new SelectionSet(select(ReleaseAsset as any))
        );
      }

      case "RemovedFromProjectEvent": {
        return new InlineFragment(
          new NamedType("RemovedFromProjectEvent") as any,
          new SelectionSet(select(RemovedFromProjectEvent as any))
        );
      }

      case "RenamedTitleEvent": {
        return new InlineFragment(
          new NamedType("RenamedTitleEvent") as any,
          new SelectionSet(select(RenamedTitleEvent as any))
        );
      }

      case "ReopenedEvent": {
        return new InlineFragment(
          new NamedType("ReopenedEvent") as any,
          new SelectionSet(select(ReopenedEvent as any))
        );
      }

      case "RepoAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAccessAuditEntry") as any,
          new SelectionSet(select(RepoAccessAuditEntry as any))
        );
      }

      case "RepoAddMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAddMemberAuditEntry") as any,
          new SelectionSet(select(RepoAddMemberAuditEntry as any))
        );
      }

      case "RepoAddTopicAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAddTopicAuditEntry") as any,
          new SelectionSet(select(RepoAddTopicAuditEntry as any))
        );
      }

      case "RepoArchivedAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoArchivedAuditEntry") as any,
          new SelectionSet(select(RepoArchivedAuditEntry as any))
        );
      }

      case "RepoChangeMergeSettingAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoChangeMergeSettingAuditEntry") as any,
          new SelectionSet(select(RepoChangeMergeSettingAuditEntry as any))
        );
      }

      case "RepoConfigDisableAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableContributorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableContributorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableContributorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableSockpuppetDisallowedAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "RepoConfigDisableSockpuppetDisallowedAuditEntry"
          ) as any,
          new SelectionSet(
            select(RepoConfigDisableSockpuppetDisallowedAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableContributorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableContributorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableContributorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableSockpuppetDisallowedAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "RepoConfigEnableSockpuppetDisallowedAuditEntry"
          ) as any,
          new SelectionSet(
            select(RepoConfigEnableSockpuppetDisallowedAuditEntry as any)
          )
        );
      }

      case "RepoConfigLockAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigLockAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigLockAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigUnlockAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigUnlockAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigUnlockAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoCreateAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoCreateAuditEntry") as any,
          new SelectionSet(select(RepoCreateAuditEntry as any))
        );
      }

      case "RepoDestroyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoDestroyAuditEntry") as any,
          new SelectionSet(select(RepoDestroyAuditEntry as any))
        );
      }

      case "RepoRemoveMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoRemoveMemberAuditEntry") as any,
          new SelectionSet(select(RepoRemoveMemberAuditEntry as any))
        );
      }

      case "RepoRemoveTopicAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoRemoveTopicAuditEntry") as any,
          new SelectionSet(select(RepoRemoveTopicAuditEntry as any))
        );
      }

      case "Repository": {
        return new InlineFragment(
          new NamedType("Repository") as any,
          new SelectionSet(select(Repository as any))
        );
      }

      case "RepositoryInvitation": {
        return new InlineFragment(
          new NamedType("RepositoryInvitation") as any,
          new SelectionSet(select(RepositoryInvitation as any))
        );
      }

      case "RepositoryTopic": {
        return new InlineFragment(
          new NamedType("RepositoryTopic") as any,
          new SelectionSet(select(RepositoryTopic as any))
        );
      }

      case "RepositoryVisibilityChangeDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("RepositoryVisibilityChangeDisableAuditEntry") as any,
          new SelectionSet(
            select(RepositoryVisibilityChangeDisableAuditEntry as any)
          )
        );
      }

      case "RepositoryVisibilityChangeEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("RepositoryVisibilityChangeEnableAuditEntry") as any,
          new SelectionSet(
            select(RepositoryVisibilityChangeEnableAuditEntry as any)
          )
        );
      }

      case "RepositoryVulnerabilityAlert": {
        return new InlineFragment(
          new NamedType("RepositoryVulnerabilityAlert") as any,
          new SelectionSet(select(RepositoryVulnerabilityAlert as any))
        );
      }

      case "ReviewDismissalAllowance": {
        return new InlineFragment(
          new NamedType("ReviewDismissalAllowance") as any,
          new SelectionSet(select(ReviewDismissalAllowance as any))
        );
      }

      case "ReviewDismissedEvent": {
        return new InlineFragment(
          new NamedType("ReviewDismissedEvent") as any,
          new SelectionSet(select(ReviewDismissedEvent as any))
        );
      }

      case "ReviewRequest": {
        return new InlineFragment(
          new NamedType("ReviewRequest") as any,
          new SelectionSet(select(ReviewRequest as any))
        );
      }

      case "ReviewRequestRemovedEvent": {
        return new InlineFragment(
          new NamedType("ReviewRequestRemovedEvent") as any,
          new SelectionSet(select(ReviewRequestRemovedEvent as any))
        );
      }

      case "ReviewRequestedEvent": {
        return new InlineFragment(
          new NamedType("ReviewRequestedEvent") as any,
          new SelectionSet(select(ReviewRequestedEvent as any))
        );
      }

      case "SavedReply": {
        return new InlineFragment(
          new NamedType("SavedReply") as any,
          new SelectionSet(select(SavedReply as any))
        );
      }

      case "SecurityAdvisory": {
        return new InlineFragment(
          new NamedType("SecurityAdvisory") as any,
          new SelectionSet(select(SecurityAdvisory as any))
        );
      }

      case "SponsorsListing": {
        return new InlineFragment(
          new NamedType("SponsorsListing") as any,
          new SelectionSet(select(SponsorsListing as any))
        );
      }

      case "SponsorsTier": {
        return new InlineFragment(
          new NamedType("SponsorsTier") as any,
          new SelectionSet(select(SponsorsTier as any))
        );
      }

      case "Sponsorship": {
        return new InlineFragment(
          new NamedType("Sponsorship") as any,
          new SelectionSet(select(Sponsorship as any))
        );
      }

      case "Status": {
        return new InlineFragment(
          new NamedType("Status") as any,
          new SelectionSet(select(Status as any))
        );
      }

      case "StatusCheckRollup": {
        return new InlineFragment(
          new NamedType("StatusCheckRollup") as any,
          new SelectionSet(select(StatusCheckRollup as any))
        );
      }

      case "StatusContext": {
        return new InlineFragment(
          new NamedType("StatusContext") as any,
          new SelectionSet(select(StatusContext as any))
        );
      }

      case "SubscribedEvent": {
        return new InlineFragment(
          new NamedType("SubscribedEvent") as any,
          new SelectionSet(select(SubscribedEvent as any))
        );
      }

      case "Tag": {
        return new InlineFragment(
          new NamedType("Tag") as any,
          new SelectionSet(select(Tag as any))
        );
      }

      case "Team": {
        return new InlineFragment(
          new NamedType("Team") as any,
          new SelectionSet(select(Team as any))
        );
      }

      case "TeamAddMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamAddMemberAuditEntry") as any,
          new SelectionSet(select(TeamAddMemberAuditEntry as any))
        );
      }

      case "TeamAddRepositoryAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamAddRepositoryAuditEntry") as any,
          new SelectionSet(select(TeamAddRepositoryAuditEntry as any))
        );
      }

      case "TeamChangeParentTeamAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamChangeParentTeamAuditEntry") as any,
          new SelectionSet(select(TeamChangeParentTeamAuditEntry as any))
        );
      }

      case "TeamDiscussion": {
        return new InlineFragment(
          new NamedType("TeamDiscussion") as any,
          new SelectionSet(select(TeamDiscussion as any))
        );
      }

      case "TeamDiscussionComment": {
        return new InlineFragment(
          new NamedType("TeamDiscussionComment") as any,
          new SelectionSet(select(TeamDiscussionComment as any))
        );
      }

      case "TeamRemoveMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamRemoveMemberAuditEntry") as any,
          new SelectionSet(select(TeamRemoveMemberAuditEntry as any))
        );
      }

      case "TeamRemoveRepositoryAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamRemoveRepositoryAuditEntry") as any,
          new SelectionSet(select(TeamRemoveRepositoryAuditEntry as any))
        );
      }

      case "Topic": {
        return new InlineFragment(
          new NamedType("Topic") as any,
          new SelectionSet(select(Topic as any))
        );
      }

      case "TransferredEvent": {
        return new InlineFragment(
          new NamedType("TransferredEvent") as any,
          new SelectionSet(select(TransferredEvent as any))
        );
      }

      case "Tree": {
        return new InlineFragment(
          new NamedType("Tree") as any,
          new SelectionSet(select(Tree as any))
        );
      }

      case "UnassignedEvent": {
        return new InlineFragment(
          new NamedType("UnassignedEvent") as any,
          new SelectionSet(select(UnassignedEvent as any))
        );
      }

      case "UnlabeledEvent": {
        return new InlineFragment(
          new NamedType("UnlabeledEvent") as any,
          new SelectionSet(select(UnlabeledEvent as any))
        );
      }

      case "UnlockedEvent": {
        return new InlineFragment(
          new NamedType("UnlockedEvent") as any,
          new SelectionSet(select(UnlockedEvent as any))
        );
      }

      case "UnmarkedAsDuplicateEvent": {
        return new InlineFragment(
          new NamedType("UnmarkedAsDuplicateEvent") as any,
          new SelectionSet(select(UnmarkedAsDuplicateEvent as any))
        );
      }

      case "UnpinnedEvent": {
        return new InlineFragment(
          new NamedType("UnpinnedEvent") as any,
          new SelectionSet(select(UnpinnedEvent as any))
        );
      }

      case "UnsubscribedEvent": {
        return new InlineFragment(
          new NamedType("UnsubscribedEvent") as any,
          new SelectionSet(select(UnsubscribedEvent as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      case "UserBlockedEvent": {
        return new InlineFragment(
          new NamedType("UserBlockedEvent") as any,
          new SelectionSet(select(UserBlockedEvent as any))
        );
      }

      case "UserContentEdit": {
        return new InlineFragment(
          new NamedType("UserContentEdit") as any,
          new SelectionSet(select(UserContentEdit as any))
        );
      }

      case "UserStatus": {
        return new InlineFragment(
          new NamedType("UserStatus") as any,
          new SelectionSet(select(UserStatus as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IOauthApplicationAuditEntryData {
  __typename: string;
  oauthApplicationName: string;
  oauthApplicationResourcePath: unknown;
  oauthApplicationUrl: unknown;
}

interface OauthApplicationAuditEntryDataSelector {
  __typename: () => Field<"__typename">;

  oauthApplicationName: () => Field<"oauthApplicationName">;

  oauthApplicationResourcePath: () => Field<"oauthApplicationResourcePath">;

  oauthApplicationUrl: () => Field<"oauthApplicationUrl">;

  on: <
    T extends Array<Selection>,
    F extends
      | "OauthApplicationCreateAuditEntry"
      | "OrgOauthAppAccessApprovedAuditEntry"
      | "OrgOauthAppAccessDeniedAuditEntry"
      | "OrgOauthAppAccessRequestedAuditEntry"
  >(
    type: F,
    select: (
      t: F extends "OauthApplicationCreateAuditEntry"
        ? OauthApplicationCreateAuditEntrySelector
        : F extends "OrgOauthAppAccessApprovedAuditEntry"
        ? OrgOauthAppAccessApprovedAuditEntrySelector
        : F extends "OrgOauthAppAccessDeniedAuditEntry"
        ? OrgOauthAppAccessDeniedAuditEntrySelector
        : F extends "OrgOauthAppAccessRequestedAuditEntry"
        ? OrgOauthAppAccessRequestedAuditEntrySelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const OauthApplicationAuditEntryData: OauthApplicationAuditEntryDataSelector = {
  __typename: () => new Field("__typename"),

  oauthApplicationName: () => new Field("oauthApplicationName"),
  oauthApplicationResourcePath: () => new Field("oauthApplicationResourcePath"),
  oauthApplicationUrl: () => new Field("oauthApplicationUrl"),

  on: (type, select) => {
    switch (type) {
      case "OauthApplicationCreateAuditEntry": {
        return new InlineFragment(
          new NamedType("OauthApplicationCreateAuditEntry") as any,
          new SelectionSet(select(OauthApplicationCreateAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessApprovedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessApprovedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessApprovedAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessDeniedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessDeniedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessDeniedAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessRequestedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessRequestedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessRequestedAuditEntry as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IOauthApplicationCreateAuditEntry
  extends IAuditEntry,
    INode,
    IOauthApplicationAuditEntryData,
    IOrganizationAuditEntryData {
  __typename: "OauthApplicationCreateAuditEntry";
  applicationUrl: unknown;
  callbackUrl: unknown;
  rateLimit: number;
  state: OauthApplicationCreateAuditEntryState;
}

interface OauthApplicationCreateAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  applicationUrl: () => Field<"applicationUrl">;

  callbackUrl: () => Field<"callbackUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  oauthApplicationName: () => Field<"oauthApplicationName">;

  oauthApplicationResourcePath: () => Field<"oauthApplicationResourcePath">;

  oauthApplicationUrl: () => Field<"oauthApplicationUrl">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  rateLimit: () => Field<"rateLimit">;

  state: () => Field<"state">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOauthApplicationCreateAuditEntry = (
  object: Record<string, any>
): object is Partial<IOauthApplicationCreateAuditEntry> => {
  return object.__typename === "OauthApplicationCreateAuditEntry";
};

export const OauthApplicationCreateAuditEntry: OauthApplicationCreateAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  applicationUrl: () => new Field("applicationUrl"),
  callbackUrl: () => new Field("callbackUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  oauthApplicationName: () => new Field("oauthApplicationName"),
  oauthApplicationResourcePath: () => new Field("oauthApplicationResourcePath"),
  oauthApplicationUrl: () => new Field("oauthApplicationUrl"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),
  rateLimit: () => new Field("rateLimit"),
  state: () => new Field("state"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgAddBillingManagerAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgAddBillingManagerAuditEntry";
  invitationEmail: string;
}

interface OrgAddBillingManagerAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  invitationEmail: () => Field<"invitationEmail">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgAddBillingManagerAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgAddBillingManagerAuditEntry> => {
  return object.__typename === "OrgAddBillingManagerAuditEntry";
};

export const OrgAddBillingManagerAuditEntry: OrgAddBillingManagerAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  invitationEmail: () => new Field("invitationEmail"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgAddMemberAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgAddMemberAuditEntry";
  permission: OrgAddMemberAuditEntryPermission;
}

interface OrgAddMemberAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  permission: () => Field<"permission">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgAddMemberAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgAddMemberAuditEntry> => {
  return object.__typename === "OrgAddMemberAuditEntry";
};

export const OrgAddMemberAuditEntry: OrgAddMemberAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),
  permission: () => new Field("permission"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgBlockUserAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgBlockUserAuditEntry";
  blockedUser: IUser;
  blockedUserName: string;
  blockedUserResourcePath: unknown;
  blockedUserUrl: unknown;
}

interface OrgBlockUserAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  blockedUser: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"blockedUser", never, SelectionSet<T>>;

  blockedUserName: () => Field<"blockedUserName">;

  blockedUserResourcePath: () => Field<"blockedUserResourcePath">;

  blockedUserUrl: () => Field<"blockedUserUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgBlockUserAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgBlockUserAuditEntry> => {
  return object.__typename === "OrgBlockUserAuditEntry";
};

export const OrgBlockUserAuditEntry: OrgBlockUserAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),

  blockedUser: (select) =>
    new Field(
      "blockedUser",
      undefined as never,
      new SelectionSet(select(User))
    ),

  blockedUserName: () => new Field("blockedUserName"),
  blockedUserResourcePath: () => new Field("blockedUserResourcePath"),
  blockedUserUrl: () => new Field("blockedUserUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgConfigDisableCollaboratorsOnlyAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgConfigDisableCollaboratorsOnlyAuditEntry";
}

interface OrgConfigDisableCollaboratorsOnlyAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgConfigDisableCollaboratorsOnlyAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgConfigDisableCollaboratorsOnlyAuditEntry> => {
  return object.__typename === "OrgConfigDisableCollaboratorsOnlyAuditEntry";
};

export const OrgConfigDisableCollaboratorsOnlyAuditEntry: OrgConfigDisableCollaboratorsOnlyAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgConfigEnableCollaboratorsOnlyAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgConfigEnableCollaboratorsOnlyAuditEntry";
}

interface OrgConfigEnableCollaboratorsOnlyAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgConfigEnableCollaboratorsOnlyAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgConfigEnableCollaboratorsOnlyAuditEntry> => {
  return object.__typename === "OrgConfigEnableCollaboratorsOnlyAuditEntry";
};

export const OrgConfigEnableCollaboratorsOnlyAuditEntry: OrgConfigEnableCollaboratorsOnlyAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgCreateAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgCreateAuditEntry";
  billingPlan: OrgCreateAuditEntryBillingPlan;
}

interface OrgCreateAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  billingPlan: () => Field<"billingPlan">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgCreateAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgCreateAuditEntry> => {
  return object.__typename === "OrgCreateAuditEntry";
};

export const OrgCreateAuditEntry: OrgCreateAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  billingPlan: () => new Field("billingPlan"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgDisableOauthAppRestrictionsAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgDisableOauthAppRestrictionsAuditEntry";
}

interface OrgDisableOauthAppRestrictionsAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgDisableOauthAppRestrictionsAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgDisableOauthAppRestrictionsAuditEntry> => {
  return object.__typename === "OrgDisableOauthAppRestrictionsAuditEntry";
};

export const OrgDisableOauthAppRestrictionsAuditEntry: OrgDisableOauthAppRestrictionsAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgDisableSamlAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgDisableSamlAuditEntry";
  digestMethodUrl: unknown;
  issuerUrl: unknown;
  signatureMethodUrl: unknown;
  singleSignOnUrl: unknown;
}

interface OrgDisableSamlAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  digestMethodUrl: () => Field<"digestMethodUrl">;

  id: () => Field<"id">;

  issuerUrl: () => Field<"issuerUrl">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  signatureMethodUrl: () => Field<"signatureMethodUrl">;

  singleSignOnUrl: () => Field<"singleSignOnUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgDisableSamlAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgDisableSamlAuditEntry> => {
  return object.__typename === "OrgDisableSamlAuditEntry";
};

export const OrgDisableSamlAuditEntry: OrgDisableSamlAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  digestMethodUrl: () => new Field("digestMethodUrl"),
  id: () => new Field("id"),
  issuerUrl: () => new Field("issuerUrl"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),
  signatureMethodUrl: () => new Field("signatureMethodUrl"),
  singleSignOnUrl: () => new Field("singleSignOnUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgDisableTwoFactorRequirementAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgDisableTwoFactorRequirementAuditEntry";
}

interface OrgDisableTwoFactorRequirementAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgDisableTwoFactorRequirementAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgDisableTwoFactorRequirementAuditEntry> => {
  return object.__typename === "OrgDisableTwoFactorRequirementAuditEntry";
};

export const OrgDisableTwoFactorRequirementAuditEntry: OrgDisableTwoFactorRequirementAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgEnableOauthAppRestrictionsAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgEnableOauthAppRestrictionsAuditEntry";
}

interface OrgEnableOauthAppRestrictionsAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgEnableOauthAppRestrictionsAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgEnableOauthAppRestrictionsAuditEntry> => {
  return object.__typename === "OrgEnableOauthAppRestrictionsAuditEntry";
};

export const OrgEnableOauthAppRestrictionsAuditEntry: OrgEnableOauthAppRestrictionsAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgEnableSamlAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgEnableSamlAuditEntry";
  digestMethodUrl: unknown;
  issuerUrl: unknown;
  signatureMethodUrl: unknown;
  singleSignOnUrl: unknown;
}

interface OrgEnableSamlAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  digestMethodUrl: () => Field<"digestMethodUrl">;

  id: () => Field<"id">;

  issuerUrl: () => Field<"issuerUrl">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  signatureMethodUrl: () => Field<"signatureMethodUrl">;

  singleSignOnUrl: () => Field<"singleSignOnUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgEnableSamlAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgEnableSamlAuditEntry> => {
  return object.__typename === "OrgEnableSamlAuditEntry";
};

export const OrgEnableSamlAuditEntry: OrgEnableSamlAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  digestMethodUrl: () => new Field("digestMethodUrl"),
  id: () => new Field("id"),
  issuerUrl: () => new Field("issuerUrl"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),
  signatureMethodUrl: () => new Field("signatureMethodUrl"),
  singleSignOnUrl: () => new Field("singleSignOnUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgEnableTwoFactorRequirementAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgEnableTwoFactorRequirementAuditEntry";
}

interface OrgEnableTwoFactorRequirementAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgEnableTwoFactorRequirementAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgEnableTwoFactorRequirementAuditEntry> => {
  return object.__typename === "OrgEnableTwoFactorRequirementAuditEntry";
};

export const OrgEnableTwoFactorRequirementAuditEntry: OrgEnableTwoFactorRequirementAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgInviteMemberAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgInviteMemberAuditEntry";
  email: string;
  organizationInvitation: IOrganizationInvitation;
}

interface OrgInviteMemberAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  email: () => Field<"email">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationInvitation: <T extends Array<Selection>>(
    select: (t: OrganizationInvitationSelector) => T
  ) => Field<"organizationInvitation", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgInviteMemberAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgInviteMemberAuditEntry> => {
  return object.__typename === "OrgInviteMemberAuditEntry";
};

export const OrgInviteMemberAuditEntry: OrgInviteMemberAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  email: () => new Field("email"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationInvitation: (select) =>
    new Field(
      "organizationInvitation",
      undefined as never,
      new SelectionSet(select(OrganizationInvitation))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgInviteToBusinessAuditEntry
  extends IAuditEntry,
    IEnterpriseAuditEntryData,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgInviteToBusinessAuditEntry";
}

interface OrgInviteToBusinessAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  enterpriseResourcePath: () => Field<"enterpriseResourcePath">;

  enterpriseSlug: () => Field<"enterpriseSlug">;

  enterpriseUrl: () => Field<"enterpriseUrl">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgInviteToBusinessAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgInviteToBusinessAuditEntry> => {
  return object.__typename === "OrgInviteToBusinessAuditEntry";
};

export const OrgInviteToBusinessAuditEntry: OrgInviteToBusinessAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  enterpriseResourcePath: () => new Field("enterpriseResourcePath"),
  enterpriseSlug: () => new Field("enterpriseSlug"),
  enterpriseUrl: () => new Field("enterpriseUrl"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgOauthAppAccessApprovedAuditEntry
  extends IAuditEntry,
    INode,
    IOauthApplicationAuditEntryData,
    IOrganizationAuditEntryData {
  __typename: "OrgOauthAppAccessApprovedAuditEntry";
}

interface OrgOauthAppAccessApprovedAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  oauthApplicationName: () => Field<"oauthApplicationName">;

  oauthApplicationResourcePath: () => Field<"oauthApplicationResourcePath">;

  oauthApplicationUrl: () => Field<"oauthApplicationUrl">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgOauthAppAccessApprovedAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgOauthAppAccessApprovedAuditEntry> => {
  return object.__typename === "OrgOauthAppAccessApprovedAuditEntry";
};

export const OrgOauthAppAccessApprovedAuditEntry: OrgOauthAppAccessApprovedAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  oauthApplicationName: () => new Field("oauthApplicationName"),
  oauthApplicationResourcePath: () => new Field("oauthApplicationResourcePath"),
  oauthApplicationUrl: () => new Field("oauthApplicationUrl"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgOauthAppAccessDeniedAuditEntry
  extends IAuditEntry,
    INode,
    IOauthApplicationAuditEntryData,
    IOrganizationAuditEntryData {
  __typename: "OrgOauthAppAccessDeniedAuditEntry";
}

interface OrgOauthAppAccessDeniedAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  oauthApplicationName: () => Field<"oauthApplicationName">;

  oauthApplicationResourcePath: () => Field<"oauthApplicationResourcePath">;

  oauthApplicationUrl: () => Field<"oauthApplicationUrl">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgOauthAppAccessDeniedAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgOauthAppAccessDeniedAuditEntry> => {
  return object.__typename === "OrgOauthAppAccessDeniedAuditEntry";
};

export const OrgOauthAppAccessDeniedAuditEntry: OrgOauthAppAccessDeniedAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  oauthApplicationName: () => new Field("oauthApplicationName"),
  oauthApplicationResourcePath: () => new Field("oauthApplicationResourcePath"),
  oauthApplicationUrl: () => new Field("oauthApplicationUrl"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgOauthAppAccessRequestedAuditEntry
  extends IAuditEntry,
    INode,
    IOauthApplicationAuditEntryData,
    IOrganizationAuditEntryData {
  __typename: "OrgOauthAppAccessRequestedAuditEntry";
}

interface OrgOauthAppAccessRequestedAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  oauthApplicationName: () => Field<"oauthApplicationName">;

  oauthApplicationResourcePath: () => Field<"oauthApplicationResourcePath">;

  oauthApplicationUrl: () => Field<"oauthApplicationUrl">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgOauthAppAccessRequestedAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgOauthAppAccessRequestedAuditEntry> => {
  return object.__typename === "OrgOauthAppAccessRequestedAuditEntry";
};

export const OrgOauthAppAccessRequestedAuditEntry: OrgOauthAppAccessRequestedAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  oauthApplicationName: () => new Field("oauthApplicationName"),
  oauthApplicationResourcePath: () => new Field("oauthApplicationResourcePath"),
  oauthApplicationUrl: () => new Field("oauthApplicationUrl"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgRemoveBillingManagerAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgRemoveBillingManagerAuditEntry";
  reason: OrgRemoveBillingManagerAuditEntryReason;
}

interface OrgRemoveBillingManagerAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  reason: () => Field<"reason">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgRemoveBillingManagerAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgRemoveBillingManagerAuditEntry> => {
  return object.__typename === "OrgRemoveBillingManagerAuditEntry";
};

export const OrgRemoveBillingManagerAuditEntry: OrgRemoveBillingManagerAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),
  reason: () => new Field("reason"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgRemoveMemberAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgRemoveMemberAuditEntry";
  membershipTypes: OrgRemoveMemberAuditEntryMembershipType[];
  reason: OrgRemoveMemberAuditEntryReason;
}

interface OrgRemoveMemberAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  membershipTypes: () => Field<"membershipTypes">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  reason: () => Field<"reason">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgRemoveMemberAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgRemoveMemberAuditEntry> => {
  return object.__typename === "OrgRemoveMemberAuditEntry";
};

export const OrgRemoveMemberAuditEntry: OrgRemoveMemberAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  membershipTypes: () => new Field("membershipTypes"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),
  reason: () => new Field("reason"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgRemoveOutsideCollaboratorAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgRemoveOutsideCollaboratorAuditEntry";
  membershipTypes: OrgRemoveOutsideCollaboratorAuditEntryMembershipType[];
  reason: OrgRemoveOutsideCollaboratorAuditEntryReason;
}

interface OrgRemoveOutsideCollaboratorAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  membershipTypes: () => Field<"membershipTypes">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  reason: () => Field<"reason">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgRemoveOutsideCollaboratorAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgRemoveOutsideCollaboratorAuditEntry> => {
  return object.__typename === "OrgRemoveOutsideCollaboratorAuditEntry";
};

export const OrgRemoveOutsideCollaboratorAuditEntry: OrgRemoveOutsideCollaboratorAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  membershipTypes: () => new Field("membershipTypes"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),
  reason: () => new Field("reason"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgRestoreMemberAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgRestoreMemberAuditEntry";
  restoredCustomEmailRoutingsCount: number;
  restoredIssueAssignmentsCount: number;
  restoredMemberships: IOrgRestoreMemberAuditEntryMembership[];
  restoredMembershipsCount: number;
  restoredRepositoriesCount: number;
  restoredRepositoryStarsCount: number;
  restoredRepositoryWatchesCount: number;
}

interface OrgRestoreMemberAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  restoredCustomEmailRoutingsCount: () => Field<"restoredCustomEmailRoutingsCount">;

  restoredIssueAssignmentsCount: () => Field<"restoredIssueAssignmentsCount">;

  restoredMemberships: <T extends Array<Selection>>(
    select: (t: OrgRestoreMemberAuditEntryMembershipSelector) => T
  ) => Field<"restoredMemberships", never, SelectionSet<T>>;

  restoredMembershipsCount: () => Field<"restoredMembershipsCount">;

  restoredRepositoriesCount: () => Field<"restoredRepositoriesCount">;

  restoredRepositoryStarsCount: () => Field<"restoredRepositoryStarsCount">;

  restoredRepositoryWatchesCount: () => Field<"restoredRepositoryWatchesCount">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgRestoreMemberAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgRestoreMemberAuditEntry> => {
  return object.__typename === "OrgRestoreMemberAuditEntry";
};

export const OrgRestoreMemberAuditEntry: OrgRestoreMemberAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),
  restoredCustomEmailRoutingsCount: () =>
    new Field("restoredCustomEmailRoutingsCount"),
  restoredIssueAssignmentsCount: () =>
    new Field("restoredIssueAssignmentsCount"),

  restoredMemberships: (select) =>
    new Field(
      "restoredMemberships",
      undefined as never,
      new SelectionSet(select(OrgRestoreMemberAuditEntryMembership))
    ),

  restoredMembershipsCount: () => new Field("restoredMembershipsCount"),
  restoredRepositoriesCount: () => new Field("restoredRepositoriesCount"),
  restoredRepositoryStarsCount: () => new Field("restoredRepositoryStarsCount"),
  restoredRepositoryWatchesCount: () =>
    new Field("restoredRepositoryWatchesCount"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgRestoreMemberMembershipOrganizationAuditEntryData
  extends IOrganizationAuditEntryData {
  __typename: "OrgRestoreMemberMembershipOrganizationAuditEntryData";
}

interface OrgRestoreMemberMembershipOrganizationAuditEntryDataSelector {
  __typename: () => Field<"__typename">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;
}

export const isOrgRestoreMemberMembershipOrganizationAuditEntryData = (
  object: Record<string, any>
): object is Partial<IOrgRestoreMemberMembershipOrganizationAuditEntryData> => {
  return (
    object.__typename === "OrgRestoreMemberMembershipOrganizationAuditEntryData"
  );
};

export const OrgRestoreMemberMembershipOrganizationAuditEntryData: OrgRestoreMemberMembershipOrganizationAuditEntryDataSelector = {
  __typename: () => new Field("__typename"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),
};

export interface IOrgRestoreMemberMembershipRepositoryAuditEntryData
  extends IRepositoryAuditEntryData {
  __typename: "OrgRestoreMemberMembershipRepositoryAuditEntryData";
}

interface OrgRestoreMemberMembershipRepositoryAuditEntryDataSelector {
  __typename: () => Field<"__typename">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;
}

export const isOrgRestoreMemberMembershipRepositoryAuditEntryData = (
  object: Record<string, any>
): object is Partial<IOrgRestoreMemberMembershipRepositoryAuditEntryData> => {
  return (
    object.__typename === "OrgRestoreMemberMembershipRepositoryAuditEntryData"
  );
};

export const OrgRestoreMemberMembershipRepositoryAuditEntryData: OrgRestoreMemberMembershipRepositoryAuditEntryDataSelector = {
  __typename: () => new Field("__typename"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),
};

export interface IOrgRestoreMemberMembershipTeamAuditEntryData
  extends ITeamAuditEntryData {
  __typename: "OrgRestoreMemberMembershipTeamAuditEntryData";
}

interface OrgRestoreMemberMembershipTeamAuditEntryDataSelector {
  __typename: () => Field<"__typename">;

  team: <T extends Array<Selection>>(
    select: (t: TeamSelector) => T
  ) => Field<"team", never, SelectionSet<T>>;

  teamName: () => Field<"teamName">;

  teamResourcePath: () => Field<"teamResourcePath">;

  teamUrl: () => Field<"teamUrl">;
}

export const isOrgRestoreMemberMembershipTeamAuditEntryData = (
  object: Record<string, any>
): object is Partial<IOrgRestoreMemberMembershipTeamAuditEntryData> => {
  return object.__typename === "OrgRestoreMemberMembershipTeamAuditEntryData";
};

export const OrgRestoreMemberMembershipTeamAuditEntryData: OrgRestoreMemberMembershipTeamAuditEntryDataSelector = {
  __typename: () => new Field("__typename"),

  team: (select) =>
    new Field("team", undefined as never, new SelectionSet(select(Team))),

  teamName: () => new Field("teamName"),
  teamResourcePath: () => new Field("teamResourcePath"),
  teamUrl: () => new Field("teamUrl"),
};

export interface IOrgUnblockUserAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgUnblockUserAuditEntry";
  blockedUser: IUser;
  blockedUserName: string;
  blockedUserResourcePath: unknown;
  blockedUserUrl: unknown;
}

interface OrgUnblockUserAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  blockedUser: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"blockedUser", never, SelectionSet<T>>;

  blockedUserName: () => Field<"blockedUserName">;

  blockedUserResourcePath: () => Field<"blockedUserResourcePath">;

  blockedUserUrl: () => Field<"blockedUserUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgUnblockUserAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgUnblockUserAuditEntry> => {
  return object.__typename === "OrgUnblockUserAuditEntry";
};

export const OrgUnblockUserAuditEntry: OrgUnblockUserAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),

  blockedUser: (select) =>
    new Field(
      "blockedUser",
      undefined as never,
      new SelectionSet(select(User))
    ),

  blockedUserName: () => new Field("blockedUserName"),
  blockedUserResourcePath: () => new Field("blockedUserResourcePath"),
  blockedUserUrl: () => new Field("blockedUserUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgUpdateDefaultRepositoryPermissionAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgUpdateDefaultRepositoryPermissionAuditEntry";
  permission: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission;
  permissionWas: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission;
}

interface OrgUpdateDefaultRepositoryPermissionAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  permission: () => Field<"permission">;

  permissionWas: () => Field<"permissionWas">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgUpdateDefaultRepositoryPermissionAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgUpdateDefaultRepositoryPermissionAuditEntry> => {
  return object.__typename === "OrgUpdateDefaultRepositoryPermissionAuditEntry";
};

export const OrgUpdateDefaultRepositoryPermissionAuditEntry: OrgUpdateDefaultRepositoryPermissionAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),
  permission: () => new Field("permission"),
  permissionWas: () => new Field("permissionWas"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgUpdateMemberAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgUpdateMemberAuditEntry";
  permission: OrgUpdateMemberAuditEntryPermission;
  permissionWas: OrgUpdateMemberAuditEntryPermission;
}

interface OrgUpdateMemberAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  permission: () => Field<"permission">;

  permissionWas: () => Field<"permissionWas">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgUpdateMemberAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgUpdateMemberAuditEntry> => {
  return object.__typename === "OrgUpdateMemberAuditEntry";
};

export const OrgUpdateMemberAuditEntry: OrgUpdateMemberAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),
  permission: () => new Field("permission"),
  permissionWas: () => new Field("permissionWas"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrgUpdateMemberRepositoryCreationPermissionAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgUpdateMemberRepositoryCreationPermissionAuditEntry";
  canCreateRepositories: boolean;
  visibility: OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility;
}

interface OrgUpdateMemberRepositoryCreationPermissionAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  canCreateRepositories: () => Field<"canCreateRepositories">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;

  visibility: () => Field<"visibility">;
}

export const isOrgUpdateMemberRepositoryCreationPermissionAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgUpdateMemberRepositoryCreationPermissionAuditEntry> => {
  return (
    object.__typename ===
    "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
  );
};

export const OrgUpdateMemberRepositoryCreationPermissionAuditEntry: OrgUpdateMemberRepositoryCreationPermissionAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  canCreateRepositories: () => new Field("canCreateRepositories"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
  visibility: () => new Field("visibility"),
};

export interface IOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData {
  __typename: "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry";
  canInviteOutsideCollaboratorsToRepositories: boolean;
}

interface OrgUpdateMemberRepositoryInvitationPermissionAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  canInviteOutsideCollaboratorsToRepositories: () => Field<"canInviteOutsideCollaboratorsToRepositories">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isOrgUpdateMemberRepositoryInvitationPermissionAuditEntry = (
  object: Record<string, any>
): object is Partial<IOrgUpdateMemberRepositoryInvitationPermissionAuditEntry> => {
  return (
    object.__typename ===
    "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
  );
};

export const OrgUpdateMemberRepositoryInvitationPermissionAuditEntry: OrgUpdateMemberRepositoryInvitationPermissionAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  canInviteOutsideCollaboratorsToRepositories: () =>
    new Field("canInviteOutsideCollaboratorsToRepositories"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IOrganization
  extends IActor,
    IMemberStatusable,
    INode,
    IPackageOwner,
    IProfileOwner,
    IProjectOwner,
    IRepositoryOwner,
    ISponsorable,
    IUniformResourceLocatable {
  __typename: "Organization";
  auditLog: IOrganizationAuditEntryConnection;
  createdAt: unknown;
  databaseId: number;
  description: string;
  descriptionHTML: string;
  interactionAbility: IRepositoryInteractionAbility;
  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue;
  ipAllowListEntries: IIpAllowListEntryConnection;
  isVerified: boolean;
  membersWithRole: IOrganizationMemberConnection;
  newTeamResourcePath: unknown;
  newTeamUrl: unknown;
  organizationBillingEmail: string;
  pendingMembers: IUserConnection;
  requiresTwoFactorAuthentication: boolean;
  samlIdentityProvider: IOrganizationIdentityProvider;
  team: ITeam;
  teams: ITeamConnection;
  teamsResourcePath: unknown;
  teamsUrl: unknown;
  twitterUsername: string;
  updatedAt: unknown;
  viewerCanAdminister: boolean;
  viewerCanCreateRepositories: boolean;
  viewerCanCreateTeams: boolean;
  viewerIsAMember: boolean;
}

interface OrganizationSelector {
  __typename: () => Field<"__typename">;

  anyPinnableItems: (variables: {
    type: unknown;
  }) => Field<"anyPinnableItems", [/* @todo */]>;

  auditLog: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | AuditLogOrder;
      query?: Variable<"query"> | string;
    },
    select: (t: OrganizationAuditEntryConnectionSelector) => T
  ) => Field<
    "auditLog",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | AuditLogOrder>,
      Argument<"query", Variable<"query"> | string>
    ],
    SelectionSet<T>
  >;

  avatarUrl: (variables: {
    size: unknown;
  }) => Field<"avatarUrl", [/* @todo */]>;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  description: () => Field<"description">;

  descriptionHTML: () => Field<"descriptionHTML">;

  email: () => Field<"email">;

  hasSponsorsListing: () => Field<"hasSponsorsListing">;

  id: () => Field<"id">;

  interactionAbility: <T extends Array<Selection>>(
    select: (t: RepositoryInteractionAbilitySelector) => T
  ) => Field<"interactionAbility", never, SelectionSet<T>>;

  ipAllowListEnabledSetting: () => Field<"ipAllowListEnabledSetting">;

  ipAllowListEntries: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IpAllowListEntryOrder;
    },
    select: (t: IpAllowListEntryConnectionSelector) => T
  ) => Field<
    "ipAllowListEntries",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IpAllowListEntryOrder>
    ],
    SelectionSet<T>
  >;

  isSponsoringViewer: () => Field<"isSponsoringViewer">;

  isVerified: () => Field<"isVerified">;

  itemShowcase: <T extends Array<Selection>>(
    select: (t: ProfileItemShowcaseSelector) => T
  ) => Field<"itemShowcase", never, SelectionSet<T>>;

  location: () => Field<"location">;

  login: () => Field<"login">;

  memberStatuses: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | UserStatusOrder;
    },
    select: (t: UserStatusConnectionSelector) => T
  ) => Field<
    "memberStatuses",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | UserStatusOrder>
    ],
    SelectionSet<T>
  >;

  membersWithRole: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: OrganizationMemberConnectionSelector) => T
  ) => Field<
    "membersWithRole",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  name: () => Field<"name">;

  newTeamResourcePath: () => Field<"newTeamResourcePath">;

  newTeamUrl: () => Field<"newTeamUrl">;

  organizationBillingEmail: () => Field<"organizationBillingEmail">;

  packages: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      names?: Variable<"names"> | string;
      orderBy?: Variable<"orderBy"> | PackageOrder;
      packageType?: Variable<"packageType"> | PackageType;
      repositoryId?: Variable<"repositoryId"> | string;
    },
    select: (t: PackageConnectionSelector) => T
  ) => Field<
    "packages",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"names", Variable<"names"> | string>,
      Argument<"orderBy", Variable<"orderBy"> | PackageOrder>,
      Argument<"packageType", Variable<"packageType"> | PackageType>,
      Argument<"repositoryId", Variable<"repositoryId"> | string>
    ],
    SelectionSet<T>
  >;

  pendingMembers: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserConnectionSelector) => T
  ) => Field<
    "pendingMembers",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  pinnableItems: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      types?: Variable<"types"> | PinnableItemType;
    },
    select: (t: PinnableItemConnectionSelector) => T
  ) => Field<
    "pinnableItems",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"types", Variable<"types"> | PinnableItemType>
    ],
    SelectionSet<T>
  >;

  pinnedItems: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      types?: Variable<"types"> | PinnableItemType;
    },
    select: (t: PinnableItemConnectionSelector) => T
  ) => Field<
    "pinnedItems",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"types", Variable<"types"> | PinnableItemType>
    ],
    SelectionSet<T>
  >;

  pinnedItemsRemaining: () => Field<"pinnedItemsRemaining">;

  project: <T extends Array<Selection>>(
    variables: { number?: Variable<"number"> | number },
    select: (t: ProjectSelector) => T
  ) => Field<
    "project",
    [Argument<"number", Variable<"number"> | number>],
    SelectionSet<T>
  >;

  projects: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ProjectOrder;
      search?: Variable<"search"> | string;
      states?: Variable<"states"> | ProjectState;
    },
    select: (t: ProjectConnectionSelector) => T
  ) => Field<
    "projects",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ProjectOrder>,
      Argument<"search", Variable<"search"> | string>,
      Argument<"states", Variable<"states"> | ProjectState>
    ],
    SelectionSet<T>
  >;

  projectsResourcePath: () => Field<"projectsResourcePath">;

  projectsUrl: () => Field<"projectsUrl">;

  repositories: <T extends Array<Selection>>(
    variables: {
      affiliations?: Variable<"affiliations"> | RepositoryAffiliation;
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      isFork?: Variable<"isFork"> | boolean;
      isLocked?: Variable<"isLocked"> | boolean;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | RepositoryOrder;
      ownerAffiliations?: Variable<"ownerAffiliations"> | RepositoryAffiliation;
      privacy?: Variable<"privacy"> | RepositoryPrivacy;
    },
    select: (t: RepositoryConnectionSelector) => T
  ) => Field<
    "repositories",
    [
      Argument<
        "affiliations",
        Variable<"affiliations"> | RepositoryAffiliation
      >,
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"isFork", Variable<"isFork"> | boolean>,
      Argument<"isLocked", Variable<"isLocked"> | boolean>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | RepositoryOrder>,
      Argument<
        "ownerAffiliations",
        Variable<"ownerAffiliations"> | RepositoryAffiliation
      >,
      Argument<"privacy", Variable<"privacy"> | RepositoryPrivacy>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    variables: { name?: Variable<"name"> | string },
    select: (t: RepositorySelector) => T
  ) => Field<
    "repository",
    [Argument<"name", Variable<"name"> | string>],
    SelectionSet<T>
  >;

  requiresTwoFactorAuthentication: () => Field<"requiresTwoFactorAuthentication">;

  resourcePath: () => Field<"resourcePath">;

  samlIdentityProvider: <T extends Array<Selection>>(
    select: (t: OrganizationIdentityProviderSelector) => T
  ) => Field<"samlIdentityProvider", never, SelectionSet<T>>;

  sponsorsListing: <T extends Array<Selection>>(
    select: (t: SponsorsListingSelector) => T
  ) => Field<"sponsorsListing", never, SelectionSet<T>>;

  sponsorshipsAsMaintainer: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      includePrivate?: Variable<"includePrivate"> | boolean;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | SponsorshipOrder;
    },
    select: (t: SponsorshipConnectionSelector) => T
  ) => Field<
    "sponsorshipsAsMaintainer",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"includePrivate", Variable<"includePrivate"> | boolean>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | SponsorshipOrder>
    ],
    SelectionSet<T>
  >;

  sponsorshipsAsSponsor: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | SponsorshipOrder;
    },
    select: (t: SponsorshipConnectionSelector) => T
  ) => Field<
    "sponsorshipsAsSponsor",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | SponsorshipOrder>
    ],
    SelectionSet<T>
  >;

  team: <T extends Array<Selection>>(
    variables: { slug?: Variable<"slug"> | string },
    select: (t: TeamSelector) => T
  ) => Field<
    "team",
    [Argument<"slug", Variable<"slug"> | string>],
    SelectionSet<T>
  >;

  teams: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      ldapMapped?: Variable<"ldapMapped"> | boolean;
      orderBy?: Variable<"orderBy"> | TeamOrder;
      privacy?: Variable<"privacy"> | TeamPrivacy;
      query?: Variable<"query"> | string;
      role?: Variable<"role"> | TeamRole;
      rootTeamsOnly?: Variable<"rootTeamsOnly"> | boolean;
      userLogins?: Variable<"userLogins"> | string;
    },
    select: (t: TeamConnectionSelector) => T
  ) => Field<
    "teams",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"ldapMapped", Variable<"ldapMapped"> | boolean>,
      Argument<"orderBy", Variable<"orderBy"> | TeamOrder>,
      Argument<"privacy", Variable<"privacy"> | TeamPrivacy>,
      Argument<"query", Variable<"query"> | string>,
      Argument<"role", Variable<"role"> | TeamRole>,
      Argument<"rootTeamsOnly", Variable<"rootTeamsOnly"> | boolean>,
      Argument<"userLogins", Variable<"userLogins"> | string>
    ],
    SelectionSet<T>
  >;

  teamsResourcePath: () => Field<"teamsResourcePath">;

  teamsUrl: () => Field<"teamsUrl">;

  twitterUsername: () => Field<"twitterUsername">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  viewerCanAdminister: () => Field<"viewerCanAdminister">;

  viewerCanChangePinnedItems: () => Field<"viewerCanChangePinnedItems">;

  viewerCanCreateProjects: () => Field<"viewerCanCreateProjects">;

  viewerCanCreateRepositories: () => Field<"viewerCanCreateRepositories">;

  viewerCanCreateTeams: () => Field<"viewerCanCreateTeams">;

  viewerCanSponsor: () => Field<"viewerCanSponsor">;

  viewerIsAMember: () => Field<"viewerIsAMember">;

  viewerIsSponsoring: () => Field<"viewerIsSponsoring">;

  websiteUrl: () => Field<"websiteUrl">;
}

export const isOrganization = (
  object: Record<string, any>
): object is Partial<IOrganization> => {
  return object.__typename === "Organization";
};

export const Organization: OrganizationSelector = {
  __typename: () => new Field("__typename"),

  anyPinnableItems: (variables) => new Field("anyPinnableItems"),

  auditLog: (variables, select) =>
    new Field(
      "auditLog",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("query", variables.query),
      ],
      new SelectionSet(select(OrganizationAuditEntryConnection))
    ),

  avatarUrl: (variables) => new Field("avatarUrl"),
  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  description: () => new Field("description"),
  descriptionHTML: () => new Field("descriptionHTML"),
  email: () => new Field("email"),
  hasSponsorsListing: () => new Field("hasSponsorsListing"),
  id: () => new Field("id"),

  interactionAbility: (select) =>
    new Field(
      "interactionAbility",
      undefined as never,
      new SelectionSet(select(RepositoryInteractionAbility))
    ),

  ipAllowListEnabledSetting: () => new Field("ipAllowListEnabledSetting"),

  ipAllowListEntries: (variables, select) =>
    new Field(
      "ipAllowListEntries",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(IpAllowListEntryConnection))
    ),

  isSponsoringViewer: () => new Field("isSponsoringViewer"),
  isVerified: () => new Field("isVerified"),

  itemShowcase: (select) =>
    new Field(
      "itemShowcase",
      undefined as never,
      new SelectionSet(select(ProfileItemShowcase))
    ),

  location: () => new Field("location"),
  login: () => new Field("login"),

  memberStatuses: (variables, select) =>
    new Field(
      "memberStatuses",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(UserStatusConnection))
    ),

  membersWithRole: (variables, select) =>
    new Field(
      "membersWithRole",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(OrganizationMemberConnection))
    ),

  name: () => new Field("name"),
  newTeamResourcePath: () => new Field("newTeamResourcePath"),
  newTeamUrl: () => new Field("newTeamUrl"),
  organizationBillingEmail: () => new Field("organizationBillingEmail"),

  packages: (variables, select) =>
    new Field(
      "packages",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("names", variables.names),
        new Argument("orderBy", variables.orderBy),
        new Argument("packageType", variables.packageType, PackageType),
        new Argument("repositoryId", variables.repositoryId),
      ],
      new SelectionSet(select(PackageConnection))
    ),

  pendingMembers: (variables, select) =>
    new Field(
      "pendingMembers",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserConnection))
    ),

  pinnableItems: (variables, select) =>
    new Field(
      "pinnableItems",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("types", variables.types, PinnableItemType),
      ],
      new SelectionSet(select(PinnableItemConnection))
    ),

  pinnedItems: (variables, select) =>
    new Field(
      "pinnedItems",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("types", variables.types, PinnableItemType),
      ],
      new SelectionSet(select(PinnableItemConnection))
    ),

  pinnedItemsRemaining: () => new Field("pinnedItemsRemaining"),

  project: (variables, select) =>
    new Field(
      "project",
      [new Argument("number", variables.number)],
      new SelectionSet(select(Project))
    ),

  projects: (variables, select) =>
    new Field(
      "projects",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("search", variables.search),
        new Argument("states", variables.states, ProjectState),
      ],
      new SelectionSet(select(ProjectConnection))
    ),

  projectsResourcePath: () => new Field("projectsResourcePath"),
  projectsUrl: () => new Field("projectsUrl"),

  repositories: (variables, select) =>
    new Field(
      "repositories",
      [
        new Argument(
          "affiliations",
          variables.affiliations,
          RepositoryAffiliation
        ),
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("isFork", variables.isFork),
        new Argument("isLocked", variables.isLocked),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument(
          "ownerAffiliations",
          variables.ownerAffiliations,
          RepositoryAffiliation
        ),
        new Argument("privacy", variables.privacy, RepositoryPrivacy),
      ],
      new SelectionSet(select(RepositoryConnection))
    ),

  repository: (variables, select) =>
    new Field(
      "repository",
      [new Argument("name", variables.name)],
      new SelectionSet(select(Repository))
    ),

  requiresTwoFactorAuthentication: () =>
    new Field("requiresTwoFactorAuthentication"),
  resourcePath: () => new Field("resourcePath"),

  samlIdentityProvider: (select) =>
    new Field(
      "samlIdentityProvider",
      undefined as never,
      new SelectionSet(select(OrganizationIdentityProvider))
    ),

  sponsorsListing: (select) =>
    new Field(
      "sponsorsListing",
      undefined as never,
      new SelectionSet(select(SponsorsListing))
    ),

  sponsorshipsAsMaintainer: (variables, select) =>
    new Field(
      "sponsorshipsAsMaintainer",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("includePrivate", variables.includePrivate),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(SponsorshipConnection))
    ),

  sponsorshipsAsSponsor: (variables, select) =>
    new Field(
      "sponsorshipsAsSponsor",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(SponsorshipConnection))
    ),

  team: (variables, select) =>
    new Field(
      "team",
      [new Argument("slug", variables.slug)],
      new SelectionSet(select(Team))
    ),

  teams: (variables, select) =>
    new Field(
      "teams",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("ldapMapped", variables.ldapMapped),
        new Argument("orderBy", variables.orderBy),
        new Argument("privacy", variables.privacy, TeamPrivacy),
        new Argument("query", variables.query),
        new Argument("role", variables.role, TeamRole),
        new Argument("rootTeamsOnly", variables.rootTeamsOnly),
        new Argument("userLogins", variables.userLogins),
      ],
      new SelectionSet(select(TeamConnection))
    ),

  teamsResourcePath: () => new Field("teamsResourcePath"),
  teamsUrl: () => new Field("teamsUrl"),
  twitterUsername: () => new Field("twitterUsername"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
  viewerCanAdminister: () => new Field("viewerCanAdminister"),
  viewerCanChangePinnedItems: () => new Field("viewerCanChangePinnedItems"),
  viewerCanCreateProjects: () => new Field("viewerCanCreateProjects"),
  viewerCanCreateRepositories: () => new Field("viewerCanCreateRepositories"),
  viewerCanCreateTeams: () => new Field("viewerCanCreateTeams"),
  viewerCanSponsor: () => new Field("viewerCanSponsor"),
  viewerIsAMember: () => new Field("viewerIsAMember"),
  viewerIsSponsoring: () => new Field("viewerIsSponsoring"),
  websiteUrl: () => new Field("websiteUrl"),
};

export interface IOrganizationAuditEntryConnection {
  edges: IOrganizationAuditEntryEdge[];
  nodes: IOrganizationAuditEntry[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface OrganizationAuditEntryConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: OrganizationAuditEntryEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: OrganizationAuditEntrySelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const OrganizationAuditEntryConnection: OrganizationAuditEntryConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(OrganizationAuditEntryEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(OrganizationAuditEntry))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IOrganizationAuditEntryData {
  __typename: string;
  organization: IOrganization;
  organizationName: string;
  organizationResourcePath: unknown;
  organizationUrl: unknown;
}

interface OrganizationAuditEntryDataSelector {
  __typename: () => Field<"__typename">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  on: <
    T extends Array<Selection>,
    F extends
      | "MembersCanDeleteReposClearAuditEntry"
      | "MembersCanDeleteReposDisableAuditEntry"
      | "MembersCanDeleteReposEnableAuditEntry"
      | "OauthApplicationCreateAuditEntry"
      | "OrgAddBillingManagerAuditEntry"
      | "OrgAddMemberAuditEntry"
      | "OrgBlockUserAuditEntry"
      | "OrgConfigDisableCollaboratorsOnlyAuditEntry"
      | "OrgConfigEnableCollaboratorsOnlyAuditEntry"
      | "OrgCreateAuditEntry"
      | "OrgDisableOauthAppRestrictionsAuditEntry"
      | "OrgDisableSamlAuditEntry"
      | "OrgDisableTwoFactorRequirementAuditEntry"
      | "OrgEnableOauthAppRestrictionsAuditEntry"
      | "OrgEnableSamlAuditEntry"
      | "OrgEnableTwoFactorRequirementAuditEntry"
      | "OrgInviteMemberAuditEntry"
      | "OrgInviteToBusinessAuditEntry"
      | "OrgOauthAppAccessApprovedAuditEntry"
      | "OrgOauthAppAccessDeniedAuditEntry"
      | "OrgOauthAppAccessRequestedAuditEntry"
      | "OrgRemoveBillingManagerAuditEntry"
      | "OrgRemoveMemberAuditEntry"
      | "OrgRemoveOutsideCollaboratorAuditEntry"
      | "OrgRestoreMemberAuditEntry"
      | "OrgRestoreMemberMembershipOrganizationAuditEntryData"
      | "OrgUnblockUserAuditEntry"
      | "OrgUpdateDefaultRepositoryPermissionAuditEntry"
      | "OrgUpdateMemberAuditEntry"
      | "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
      | "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
      | "PrivateRepositoryForkingDisableAuditEntry"
      | "PrivateRepositoryForkingEnableAuditEntry"
      | "RepoAccessAuditEntry"
      | "RepoAddMemberAuditEntry"
      | "RepoAddTopicAuditEntry"
      | "RepoArchivedAuditEntry"
      | "RepoChangeMergeSettingAuditEntry"
      | "RepoConfigDisableAnonymousGitAccessAuditEntry"
      | "RepoConfigDisableCollaboratorsOnlyAuditEntry"
      | "RepoConfigDisableContributorsOnlyAuditEntry"
      | "RepoConfigDisableSockpuppetDisallowedAuditEntry"
      | "RepoConfigEnableAnonymousGitAccessAuditEntry"
      | "RepoConfigEnableCollaboratorsOnlyAuditEntry"
      | "RepoConfigEnableContributorsOnlyAuditEntry"
      | "RepoConfigEnableSockpuppetDisallowedAuditEntry"
      | "RepoConfigLockAnonymousGitAccessAuditEntry"
      | "RepoConfigUnlockAnonymousGitAccessAuditEntry"
      | "RepoCreateAuditEntry"
      | "RepoDestroyAuditEntry"
      | "RepoRemoveMemberAuditEntry"
      | "RepoRemoveTopicAuditEntry"
      | "RepositoryVisibilityChangeDisableAuditEntry"
      | "RepositoryVisibilityChangeEnableAuditEntry"
      | "TeamAddMemberAuditEntry"
      | "TeamAddRepositoryAuditEntry"
      | "TeamChangeParentTeamAuditEntry"
      | "TeamRemoveMemberAuditEntry"
      | "TeamRemoveRepositoryAuditEntry"
  >(
    type: F,
    select: (
      t: F extends "MembersCanDeleteReposClearAuditEntry"
        ? MembersCanDeleteReposClearAuditEntrySelector
        : F extends "MembersCanDeleteReposDisableAuditEntry"
        ? MembersCanDeleteReposDisableAuditEntrySelector
        : F extends "MembersCanDeleteReposEnableAuditEntry"
        ? MembersCanDeleteReposEnableAuditEntrySelector
        : F extends "OauthApplicationCreateAuditEntry"
        ? OauthApplicationCreateAuditEntrySelector
        : F extends "OrgAddBillingManagerAuditEntry"
        ? OrgAddBillingManagerAuditEntrySelector
        : F extends "OrgAddMemberAuditEntry"
        ? OrgAddMemberAuditEntrySelector
        : F extends "OrgBlockUserAuditEntry"
        ? OrgBlockUserAuditEntrySelector
        : F extends "OrgConfigDisableCollaboratorsOnlyAuditEntry"
        ? OrgConfigDisableCollaboratorsOnlyAuditEntrySelector
        : F extends "OrgConfigEnableCollaboratorsOnlyAuditEntry"
        ? OrgConfigEnableCollaboratorsOnlyAuditEntrySelector
        : F extends "OrgCreateAuditEntry"
        ? OrgCreateAuditEntrySelector
        : F extends "OrgDisableOauthAppRestrictionsAuditEntry"
        ? OrgDisableOauthAppRestrictionsAuditEntrySelector
        : F extends "OrgDisableSamlAuditEntry"
        ? OrgDisableSamlAuditEntrySelector
        : F extends "OrgDisableTwoFactorRequirementAuditEntry"
        ? OrgDisableTwoFactorRequirementAuditEntrySelector
        : F extends "OrgEnableOauthAppRestrictionsAuditEntry"
        ? OrgEnableOauthAppRestrictionsAuditEntrySelector
        : F extends "OrgEnableSamlAuditEntry"
        ? OrgEnableSamlAuditEntrySelector
        : F extends "OrgEnableTwoFactorRequirementAuditEntry"
        ? OrgEnableTwoFactorRequirementAuditEntrySelector
        : F extends "OrgInviteMemberAuditEntry"
        ? OrgInviteMemberAuditEntrySelector
        : F extends "OrgInviteToBusinessAuditEntry"
        ? OrgInviteToBusinessAuditEntrySelector
        : F extends "OrgOauthAppAccessApprovedAuditEntry"
        ? OrgOauthAppAccessApprovedAuditEntrySelector
        : F extends "OrgOauthAppAccessDeniedAuditEntry"
        ? OrgOauthAppAccessDeniedAuditEntrySelector
        : F extends "OrgOauthAppAccessRequestedAuditEntry"
        ? OrgOauthAppAccessRequestedAuditEntrySelector
        : F extends "OrgRemoveBillingManagerAuditEntry"
        ? OrgRemoveBillingManagerAuditEntrySelector
        : F extends "OrgRemoveMemberAuditEntry"
        ? OrgRemoveMemberAuditEntrySelector
        : F extends "OrgRemoveOutsideCollaboratorAuditEntry"
        ? OrgRemoveOutsideCollaboratorAuditEntrySelector
        : F extends "OrgRestoreMemberAuditEntry"
        ? OrgRestoreMemberAuditEntrySelector
        : F extends "OrgRestoreMemberMembershipOrganizationAuditEntryData"
        ? OrgRestoreMemberMembershipOrganizationAuditEntryDataSelector
        : F extends "OrgUnblockUserAuditEntry"
        ? OrgUnblockUserAuditEntrySelector
        : F extends "OrgUpdateDefaultRepositoryPermissionAuditEntry"
        ? OrgUpdateDefaultRepositoryPermissionAuditEntrySelector
        : F extends "OrgUpdateMemberAuditEntry"
        ? OrgUpdateMemberAuditEntrySelector
        : F extends "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
        ? OrgUpdateMemberRepositoryCreationPermissionAuditEntrySelector
        : F extends "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
        ? OrgUpdateMemberRepositoryInvitationPermissionAuditEntrySelector
        : F extends "PrivateRepositoryForkingDisableAuditEntry"
        ? PrivateRepositoryForkingDisableAuditEntrySelector
        : F extends "PrivateRepositoryForkingEnableAuditEntry"
        ? PrivateRepositoryForkingEnableAuditEntrySelector
        : F extends "RepoAccessAuditEntry"
        ? RepoAccessAuditEntrySelector
        : F extends "RepoAddMemberAuditEntry"
        ? RepoAddMemberAuditEntrySelector
        : F extends "RepoAddTopicAuditEntry"
        ? RepoAddTopicAuditEntrySelector
        : F extends "RepoArchivedAuditEntry"
        ? RepoArchivedAuditEntrySelector
        : F extends "RepoChangeMergeSettingAuditEntry"
        ? RepoChangeMergeSettingAuditEntrySelector
        : F extends "RepoConfigDisableAnonymousGitAccessAuditEntry"
        ? RepoConfigDisableAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigDisableCollaboratorsOnlyAuditEntry"
        ? RepoConfigDisableCollaboratorsOnlyAuditEntrySelector
        : F extends "RepoConfigDisableContributorsOnlyAuditEntry"
        ? RepoConfigDisableContributorsOnlyAuditEntrySelector
        : F extends "RepoConfigDisableSockpuppetDisallowedAuditEntry"
        ? RepoConfigDisableSockpuppetDisallowedAuditEntrySelector
        : F extends "RepoConfigEnableAnonymousGitAccessAuditEntry"
        ? RepoConfigEnableAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigEnableCollaboratorsOnlyAuditEntry"
        ? RepoConfigEnableCollaboratorsOnlyAuditEntrySelector
        : F extends "RepoConfigEnableContributorsOnlyAuditEntry"
        ? RepoConfigEnableContributorsOnlyAuditEntrySelector
        : F extends "RepoConfigEnableSockpuppetDisallowedAuditEntry"
        ? RepoConfigEnableSockpuppetDisallowedAuditEntrySelector
        : F extends "RepoConfigLockAnonymousGitAccessAuditEntry"
        ? RepoConfigLockAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigUnlockAnonymousGitAccessAuditEntry"
        ? RepoConfigUnlockAnonymousGitAccessAuditEntrySelector
        : F extends "RepoCreateAuditEntry"
        ? RepoCreateAuditEntrySelector
        : F extends "RepoDestroyAuditEntry"
        ? RepoDestroyAuditEntrySelector
        : F extends "RepoRemoveMemberAuditEntry"
        ? RepoRemoveMemberAuditEntrySelector
        : F extends "RepoRemoveTopicAuditEntry"
        ? RepoRemoveTopicAuditEntrySelector
        : F extends "RepositoryVisibilityChangeDisableAuditEntry"
        ? RepositoryVisibilityChangeDisableAuditEntrySelector
        : F extends "RepositoryVisibilityChangeEnableAuditEntry"
        ? RepositoryVisibilityChangeEnableAuditEntrySelector
        : F extends "TeamAddMemberAuditEntry"
        ? TeamAddMemberAuditEntrySelector
        : F extends "TeamAddRepositoryAuditEntry"
        ? TeamAddRepositoryAuditEntrySelector
        : F extends "TeamChangeParentTeamAuditEntry"
        ? TeamChangeParentTeamAuditEntrySelector
        : F extends "TeamRemoveMemberAuditEntry"
        ? TeamRemoveMemberAuditEntrySelector
        : F extends "TeamRemoveRepositoryAuditEntry"
        ? TeamRemoveRepositoryAuditEntrySelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const OrganizationAuditEntryData: OrganizationAuditEntryDataSelector = {
  __typename: () => new Field("__typename"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  on: (type, select) => {
    switch (type) {
      case "MembersCanDeleteReposClearAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposClearAuditEntry") as any,
          new SelectionSet(select(MembersCanDeleteReposClearAuditEntry as any))
        );
      }

      case "MembersCanDeleteReposDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposDisableAuditEntry") as any,
          new SelectionSet(
            select(MembersCanDeleteReposDisableAuditEntry as any)
          )
        );
      }

      case "MembersCanDeleteReposEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("MembersCanDeleteReposEnableAuditEntry") as any,
          new SelectionSet(select(MembersCanDeleteReposEnableAuditEntry as any))
        );
      }

      case "OauthApplicationCreateAuditEntry": {
        return new InlineFragment(
          new NamedType("OauthApplicationCreateAuditEntry") as any,
          new SelectionSet(select(OauthApplicationCreateAuditEntry as any))
        );
      }

      case "OrgAddBillingManagerAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgAddBillingManagerAuditEntry") as any,
          new SelectionSet(select(OrgAddBillingManagerAuditEntry as any))
        );
      }

      case "OrgAddMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgAddMemberAuditEntry") as any,
          new SelectionSet(select(OrgAddMemberAuditEntry as any))
        );
      }

      case "OrgBlockUserAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgBlockUserAuditEntry") as any,
          new SelectionSet(select(OrgBlockUserAuditEntry as any))
        );
      }

      case "OrgConfigDisableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgConfigDisableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(OrgConfigDisableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "OrgConfigEnableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgConfigEnableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(OrgConfigEnableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "OrgCreateAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgCreateAuditEntry") as any,
          new SelectionSet(select(OrgCreateAuditEntry as any))
        );
      }

      case "OrgDisableOauthAppRestrictionsAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgDisableOauthAppRestrictionsAuditEntry") as any,
          new SelectionSet(
            select(OrgDisableOauthAppRestrictionsAuditEntry as any)
          )
        );
      }

      case "OrgDisableSamlAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgDisableSamlAuditEntry") as any,
          new SelectionSet(select(OrgDisableSamlAuditEntry as any))
        );
      }

      case "OrgDisableTwoFactorRequirementAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgDisableTwoFactorRequirementAuditEntry") as any,
          new SelectionSet(
            select(OrgDisableTwoFactorRequirementAuditEntry as any)
          )
        );
      }

      case "OrgEnableOauthAppRestrictionsAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgEnableOauthAppRestrictionsAuditEntry") as any,
          new SelectionSet(
            select(OrgEnableOauthAppRestrictionsAuditEntry as any)
          )
        );
      }

      case "OrgEnableSamlAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgEnableSamlAuditEntry") as any,
          new SelectionSet(select(OrgEnableSamlAuditEntry as any))
        );
      }

      case "OrgEnableTwoFactorRequirementAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgEnableTwoFactorRequirementAuditEntry") as any,
          new SelectionSet(
            select(OrgEnableTwoFactorRequirementAuditEntry as any)
          )
        );
      }

      case "OrgInviteMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgInviteMemberAuditEntry") as any,
          new SelectionSet(select(OrgInviteMemberAuditEntry as any))
        );
      }

      case "OrgInviteToBusinessAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgInviteToBusinessAuditEntry") as any,
          new SelectionSet(select(OrgInviteToBusinessAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessApprovedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessApprovedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessApprovedAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessDeniedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessDeniedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessDeniedAuditEntry as any))
        );
      }

      case "OrgOauthAppAccessRequestedAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgOauthAppAccessRequestedAuditEntry") as any,
          new SelectionSet(select(OrgOauthAppAccessRequestedAuditEntry as any))
        );
      }

      case "OrgRemoveBillingManagerAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRemoveBillingManagerAuditEntry") as any,
          new SelectionSet(select(OrgRemoveBillingManagerAuditEntry as any))
        );
      }

      case "OrgRemoveMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRemoveMemberAuditEntry") as any,
          new SelectionSet(select(OrgRemoveMemberAuditEntry as any))
        );
      }

      case "OrgRemoveOutsideCollaboratorAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRemoveOutsideCollaboratorAuditEntry") as any,
          new SelectionSet(
            select(OrgRemoveOutsideCollaboratorAuditEntry as any)
          )
        );
      }

      case "OrgRestoreMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgRestoreMemberAuditEntry") as any,
          new SelectionSet(select(OrgRestoreMemberAuditEntry as any))
        );
      }

      case "OrgRestoreMemberMembershipOrganizationAuditEntryData": {
        return new InlineFragment(
          new NamedType(
            "OrgRestoreMemberMembershipOrganizationAuditEntryData"
          ) as any,
          new SelectionSet(
            select(OrgRestoreMemberMembershipOrganizationAuditEntryData as any)
          )
        );
      }

      case "OrgUnblockUserAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgUnblockUserAuditEntry") as any,
          new SelectionSet(select(OrgUnblockUserAuditEntry as any))
        );
      }

      case "OrgUpdateDefaultRepositoryPermissionAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "OrgUpdateDefaultRepositoryPermissionAuditEntry"
          ) as any,
          new SelectionSet(
            select(OrgUpdateDefaultRepositoryPermissionAuditEntry as any)
          )
        );
      }

      case "OrgUpdateMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("OrgUpdateMemberAuditEntry") as any,
          new SelectionSet(select(OrgUpdateMemberAuditEntry as any))
        );
      }

      case "OrgUpdateMemberRepositoryCreationPermissionAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "OrgUpdateMemberRepositoryCreationPermissionAuditEntry"
          ) as any,
          new SelectionSet(
            select(OrgUpdateMemberRepositoryCreationPermissionAuditEntry as any)
          )
        );
      }

      case "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry"
          ) as any,
          new SelectionSet(
            select(
              OrgUpdateMemberRepositoryInvitationPermissionAuditEntry as any
            )
          )
        );
      }

      case "PrivateRepositoryForkingDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("PrivateRepositoryForkingDisableAuditEntry") as any,
          new SelectionSet(
            select(PrivateRepositoryForkingDisableAuditEntry as any)
          )
        );
      }

      case "PrivateRepositoryForkingEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("PrivateRepositoryForkingEnableAuditEntry") as any,
          new SelectionSet(
            select(PrivateRepositoryForkingEnableAuditEntry as any)
          )
        );
      }

      case "RepoAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAccessAuditEntry") as any,
          new SelectionSet(select(RepoAccessAuditEntry as any))
        );
      }

      case "RepoAddMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAddMemberAuditEntry") as any,
          new SelectionSet(select(RepoAddMemberAuditEntry as any))
        );
      }

      case "RepoAddTopicAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAddTopicAuditEntry") as any,
          new SelectionSet(select(RepoAddTopicAuditEntry as any))
        );
      }

      case "RepoArchivedAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoArchivedAuditEntry") as any,
          new SelectionSet(select(RepoArchivedAuditEntry as any))
        );
      }

      case "RepoChangeMergeSettingAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoChangeMergeSettingAuditEntry") as any,
          new SelectionSet(select(RepoChangeMergeSettingAuditEntry as any))
        );
      }

      case "RepoConfigDisableAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableContributorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableContributorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableContributorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableSockpuppetDisallowedAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "RepoConfigDisableSockpuppetDisallowedAuditEntry"
          ) as any,
          new SelectionSet(
            select(RepoConfigDisableSockpuppetDisallowedAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableContributorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableContributorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableContributorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableSockpuppetDisallowedAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "RepoConfigEnableSockpuppetDisallowedAuditEntry"
          ) as any,
          new SelectionSet(
            select(RepoConfigEnableSockpuppetDisallowedAuditEntry as any)
          )
        );
      }

      case "RepoConfigLockAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigLockAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigLockAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigUnlockAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigUnlockAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigUnlockAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoCreateAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoCreateAuditEntry") as any,
          new SelectionSet(select(RepoCreateAuditEntry as any))
        );
      }

      case "RepoDestroyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoDestroyAuditEntry") as any,
          new SelectionSet(select(RepoDestroyAuditEntry as any))
        );
      }

      case "RepoRemoveMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoRemoveMemberAuditEntry") as any,
          new SelectionSet(select(RepoRemoveMemberAuditEntry as any))
        );
      }

      case "RepoRemoveTopicAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoRemoveTopicAuditEntry") as any,
          new SelectionSet(select(RepoRemoveTopicAuditEntry as any))
        );
      }

      case "RepositoryVisibilityChangeDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("RepositoryVisibilityChangeDisableAuditEntry") as any,
          new SelectionSet(
            select(RepositoryVisibilityChangeDisableAuditEntry as any)
          )
        );
      }

      case "RepositoryVisibilityChangeEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("RepositoryVisibilityChangeEnableAuditEntry") as any,
          new SelectionSet(
            select(RepositoryVisibilityChangeEnableAuditEntry as any)
          )
        );
      }

      case "TeamAddMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamAddMemberAuditEntry") as any,
          new SelectionSet(select(TeamAddMemberAuditEntry as any))
        );
      }

      case "TeamAddRepositoryAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamAddRepositoryAuditEntry") as any,
          new SelectionSet(select(TeamAddRepositoryAuditEntry as any))
        );
      }

      case "TeamChangeParentTeamAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamChangeParentTeamAuditEntry") as any,
          new SelectionSet(select(TeamChangeParentTeamAuditEntry as any))
        );
      }

      case "TeamRemoveMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamRemoveMemberAuditEntry") as any,
          new SelectionSet(select(TeamRemoveMemberAuditEntry as any))
        );
      }

      case "TeamRemoveRepositoryAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamRemoveRepositoryAuditEntry") as any,
          new SelectionSet(select(TeamRemoveRepositoryAuditEntry as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IOrganizationAuditEntryEdge {
  cursor: string;
  node: IOrganizationAuditEntry;
}

interface OrganizationAuditEntryEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: OrganizationAuditEntrySelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const OrganizationAuditEntryEdge: OrganizationAuditEntryEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(OrganizationAuditEntry))
    ),
};

export interface IOrganizationConnection {
  edges: IOrganizationEdge[];
  nodes: IOrganization[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface OrganizationConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: OrganizationEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const OrganizationConnection: OrganizationConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(OrganizationEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IOrganizationEdge {
  cursor: string;
  node: IOrganization;
}

interface OrganizationEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const OrganizationEdge: OrganizationEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(Organization))
    ),
};

export interface IOrganizationIdentityProvider extends INode {
  __typename: "OrganizationIdentityProvider";
  digestMethod: unknown;
  externalIdentities: IExternalIdentityConnection;
  idpCertificate: unknown;
  issuer: string;
  organization: IOrganization;
  signatureMethod: unknown;
  ssoUrl: unknown;
}

interface OrganizationIdentityProviderSelector {
  __typename: () => Field<"__typename">;

  digestMethod: () => Field<"digestMethod">;

  externalIdentities: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: ExternalIdentityConnectionSelector) => T
  ) => Field<
    "externalIdentities",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  id: () => Field<"id">;

  idpCertificate: () => Field<"idpCertificate">;

  issuer: () => Field<"issuer">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  signatureMethod: () => Field<"signatureMethod">;

  ssoUrl: () => Field<"ssoUrl">;
}

export const isOrganizationIdentityProvider = (
  object: Record<string, any>
): object is Partial<IOrganizationIdentityProvider> => {
  return object.__typename === "OrganizationIdentityProvider";
};

export const OrganizationIdentityProvider: OrganizationIdentityProviderSelector = {
  __typename: () => new Field("__typename"),

  digestMethod: () => new Field("digestMethod"),

  externalIdentities: (variables, select) =>
    new Field(
      "externalIdentities",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(ExternalIdentityConnection))
    ),

  id: () => new Field("id"),
  idpCertificate: () => new Field("idpCertificate"),
  issuer: () => new Field("issuer"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  signatureMethod: () => new Field("signatureMethod"),
  ssoUrl: () => new Field("ssoUrl"),
};

export interface IOrganizationInvitation extends INode {
  __typename: "OrganizationInvitation";
  createdAt: unknown;
  email: string;
  invitationType: OrganizationInvitationType;
  invitee: IUser;
  inviter: IUser;
  organization: IOrganization;
  role: OrganizationInvitationRole;
}

interface OrganizationInvitationSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  email: () => Field<"email">;

  id: () => Field<"id">;

  invitationType: () => Field<"invitationType">;

  invitee: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"invitee", never, SelectionSet<T>>;

  inviter: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"inviter", never, SelectionSet<T>>;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  role: () => Field<"role">;
}

export const isOrganizationInvitation = (
  object: Record<string, any>
): object is Partial<IOrganizationInvitation> => {
  return object.__typename === "OrganizationInvitation";
};

export const OrganizationInvitation: OrganizationInvitationSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),
  email: () => new Field("email"),
  id: () => new Field("id"),
  invitationType: () => new Field("invitationType"),

  invitee: (select) =>
    new Field("invitee", undefined as never, new SelectionSet(select(User))),

  inviter: (select) =>
    new Field("inviter", undefined as never, new SelectionSet(select(User))),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  role: () => new Field("role"),
};

export interface IOrganizationInvitationConnection {
  edges: IOrganizationInvitationEdge[];
  nodes: IOrganizationInvitation[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface OrganizationInvitationConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: OrganizationInvitationEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: OrganizationInvitationSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const OrganizationInvitationConnection: OrganizationInvitationConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(OrganizationInvitationEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(OrganizationInvitation))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IOrganizationInvitationEdge {
  cursor: string;
  node: IOrganizationInvitation;
}

interface OrganizationInvitationEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: OrganizationInvitationSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const OrganizationInvitationEdge: OrganizationInvitationEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(OrganizationInvitation))
    ),
};

export interface IOrganizationMemberConnection {
  edges: IOrganizationMemberEdge[];
  nodes: IUser[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface OrganizationMemberConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: OrganizationMemberEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const OrganizationMemberConnection: OrganizationMemberConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(OrganizationMemberEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(User))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IOrganizationMemberEdge {
  cursor: string;
  hasTwoFactorEnabled: boolean;
  node: IUser;
  role: OrganizationMemberRole;
}

interface OrganizationMemberEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  hasTwoFactorEnabled: () => Field<"hasTwoFactorEnabled">;

  node: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;

  role: () => Field<"role">;
}

export const OrganizationMemberEdge: OrganizationMemberEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),
  hasTwoFactorEnabled: () => new Field("hasTwoFactorEnabled"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(User))),

  role: () => new Field("role"),
};

export interface IOrganizationTeamsHovercardContext extends IHovercardContext {
  __typename: "OrganizationTeamsHovercardContext";
  relevantTeams: ITeamConnection;
  teamsResourcePath: unknown;
  teamsUrl: unknown;
  totalTeamCount: number;
}

interface OrganizationTeamsHovercardContextSelector {
  __typename: () => Field<"__typename">;

  message: () => Field<"message">;

  octicon: () => Field<"octicon">;

  relevantTeams: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: TeamConnectionSelector) => T
  ) => Field<
    "relevantTeams",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  teamsResourcePath: () => Field<"teamsResourcePath">;

  teamsUrl: () => Field<"teamsUrl">;

  totalTeamCount: () => Field<"totalTeamCount">;
}

export const isOrganizationTeamsHovercardContext = (
  object: Record<string, any>
): object is Partial<IOrganizationTeamsHovercardContext> => {
  return object.__typename === "OrganizationTeamsHovercardContext";
};

export const OrganizationTeamsHovercardContext: OrganizationTeamsHovercardContextSelector = {
  __typename: () => new Field("__typename"),

  message: () => new Field("message"),
  octicon: () => new Field("octicon"),

  relevantTeams: (variables, select) =>
    new Field(
      "relevantTeams",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(TeamConnection))
    ),

  teamsResourcePath: () => new Field("teamsResourcePath"),
  teamsUrl: () => new Field("teamsUrl"),
  totalTeamCount: () => new Field("totalTeamCount"),
};

export interface IOrganizationsHovercardContext extends IHovercardContext {
  __typename: "OrganizationsHovercardContext";
  relevantOrganizations: IOrganizationConnection;
  totalOrganizationCount: number;
}

interface OrganizationsHovercardContextSelector {
  __typename: () => Field<"__typename">;

  message: () => Field<"message">;

  octicon: () => Field<"octicon">;

  relevantOrganizations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "relevantOrganizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  totalOrganizationCount: () => Field<"totalOrganizationCount">;
}

export const isOrganizationsHovercardContext = (
  object: Record<string, any>
): object is Partial<IOrganizationsHovercardContext> => {
  return object.__typename === "OrganizationsHovercardContext";
};

export const OrganizationsHovercardContext: OrganizationsHovercardContextSelector = {
  __typename: () => new Field("__typename"),

  message: () => new Field("message"),
  octicon: () => new Field("octicon"),

  relevantOrganizations: (variables, select) =>
    new Field(
      "relevantOrganizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  totalOrganizationCount: () => new Field("totalOrganizationCount"),
};

export interface IPackage extends INode {
  __typename: "Package";
  latestVersion: IPackageVersion;
  name: string;
  packageType: PackageType;
  repository: IRepository;
  statistics: IPackageStatistics;
  version: IPackageVersion;
  versions: IPackageVersionConnection;
}

interface PackageSelector {
  __typename: () => Field<"__typename">;

  id: () => Field<"id">;

  latestVersion: <T extends Array<Selection>>(
    select: (t: PackageVersionSelector) => T
  ) => Field<"latestVersion", never, SelectionSet<T>>;

  name: () => Field<"name">;

  packageType: () => Field<"packageType">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  statistics: <T extends Array<Selection>>(
    select: (t: PackageStatisticsSelector) => T
  ) => Field<"statistics", never, SelectionSet<T>>;

  version: <T extends Array<Selection>>(
    variables: { version?: Variable<"version"> | string },
    select: (t: PackageVersionSelector) => T
  ) => Field<
    "version",
    [Argument<"version", Variable<"version"> | string>],
    SelectionSet<T>
  >;

  versions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | PackageVersionOrder;
    },
    select: (t: PackageVersionConnectionSelector) => T
  ) => Field<
    "versions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | PackageVersionOrder>
    ],
    SelectionSet<T>
  >;
}

export const isPackage = (
  object: Record<string, any>
): object is Partial<IPackage> => {
  return object.__typename === "Package";
};

export const Package: PackageSelector = {
  __typename: () => new Field("__typename"),

  id: () => new Field("id"),

  latestVersion: (select) =>
    new Field(
      "latestVersion",
      undefined as never,
      new SelectionSet(select(PackageVersion))
    ),

  name: () => new Field("name"),
  packageType: () => new Field("packageType"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  statistics: (select) =>
    new Field(
      "statistics",
      undefined as never,
      new SelectionSet(select(PackageStatistics))
    ),

  version: (variables, select) =>
    new Field(
      "version",
      [new Argument("version", variables.version)],
      new SelectionSet(select(PackageVersion))
    ),

  versions: (variables, select) =>
    new Field(
      "versions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(PackageVersionConnection))
    ),
};

export interface IPackageConnection {
  edges: IPackageEdge[];
  nodes: IPackage[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface PackageConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: PackageEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: PackageSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const PackageConnection: PackageConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(PackageEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(Package))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IPackageEdge {
  cursor: string;
  node: IPackage;
}

interface PackageEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: PackageSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const PackageEdge: PackageEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Package))),
};

export interface IPackageFile extends INode {
  __typename: "PackageFile";
  md5: string;
  name: string;
  packageVersion: IPackageVersion;
  sha1: string;
  sha256: string;
  size: number;
  updatedAt: unknown;
  url: unknown;
}

interface PackageFileSelector {
  __typename: () => Field<"__typename">;

  id: () => Field<"id">;

  md5: () => Field<"md5">;

  name: () => Field<"name">;

  packageVersion: <T extends Array<Selection>>(
    select: (t: PackageVersionSelector) => T
  ) => Field<"packageVersion", never, SelectionSet<T>>;

  sha1: () => Field<"sha1">;

  sha256: () => Field<"sha256">;

  size: () => Field<"size">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;
}

export const isPackageFile = (
  object: Record<string, any>
): object is Partial<IPackageFile> => {
  return object.__typename === "PackageFile";
};

export const PackageFile: PackageFileSelector = {
  __typename: () => new Field("__typename"),

  id: () => new Field("id"),
  md5: () => new Field("md5"),
  name: () => new Field("name"),

  packageVersion: (select) =>
    new Field(
      "packageVersion",
      undefined as never,
      new SelectionSet(select(PackageVersion))
    ),

  sha1: () => new Field("sha1"),
  sha256: () => new Field("sha256"),
  size: () => new Field("size"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
};

export interface IPackageFileConnection {
  edges: IPackageFileEdge[];
  nodes: IPackageFile[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface PackageFileConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: PackageFileEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: PackageFileSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const PackageFileConnection: PackageFileConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(PackageFileEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(PackageFile))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IPackageFileEdge {
  cursor: string;
  node: IPackageFile;
}

interface PackageFileEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: PackageFileSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const PackageFileEdge: PackageFileEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(PackageFile))
    ),
};

export interface IPackageOwner {
  __typename: string;
  id: string;
  packages: IPackageConnection;
}

interface PackageOwnerSelector {
  __typename: () => Field<"__typename">;

  id: () => Field<"id">;

  packages: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      names?: Variable<"names"> | string;
      orderBy?: Variable<"orderBy"> | PackageOrder;
      packageType?: Variable<"packageType"> | PackageType;
      repositoryId?: Variable<"repositoryId"> | string;
    },
    select: (t: PackageConnectionSelector) => T
  ) => Field<
    "packages",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"names", Variable<"names"> | string>,
      Argument<"orderBy", Variable<"orderBy"> | PackageOrder>,
      Argument<"packageType", Variable<"packageType"> | PackageType>,
      Argument<"repositoryId", Variable<"repositoryId"> | string>
    ],
    SelectionSet<T>
  >;

  on: <
    T extends Array<Selection>,
    F extends "Organization" | "Repository" | "User"
  >(
    type: F,
    select: (
      t: F extends "Organization"
        ? OrganizationSelector
        : F extends "Repository"
        ? RepositorySelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const PackageOwner: PackageOwnerSelector = {
  __typename: () => new Field("__typename"),

  id: () => new Field("id"),

  packages: (variables, select) =>
    new Field(
      "packages",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("names", variables.names),
        new Argument("orderBy", variables.orderBy),
        new Argument("packageType", variables.packageType, PackageType),
        new Argument("repositoryId", variables.repositoryId),
      ],
      new SelectionSet(select(PackageConnection))
    ),

  on: (type, select) => {
    switch (type) {
      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      case "Repository": {
        return new InlineFragment(
          new NamedType("Repository") as any,
          new SelectionSet(select(Repository as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IPackageStatistics {
  downloadsTotalCount: number;
}

interface PackageStatisticsSelector {
  __typename: () => Field<"__typename">;

  downloadsTotalCount: () => Field<"downloadsTotalCount">;
}

export const PackageStatistics: PackageStatisticsSelector = {
  __typename: () => new Field("__typename"),

  downloadsTotalCount: () => new Field("downloadsTotalCount"),
};

export interface IPackageTag extends INode {
  __typename: "PackageTag";
  name: string;
  version: IPackageVersion;
}

interface PackageTagSelector {
  __typename: () => Field<"__typename">;

  id: () => Field<"id">;

  name: () => Field<"name">;

  version: <T extends Array<Selection>>(
    select: (t: PackageVersionSelector) => T
  ) => Field<"version", never, SelectionSet<T>>;
}

export const isPackageTag = (
  object: Record<string, any>
): object is Partial<IPackageTag> => {
  return object.__typename === "PackageTag";
};

export const PackageTag: PackageTagSelector = {
  __typename: () => new Field("__typename"),

  id: () => new Field("id"),
  name: () => new Field("name"),

  version: (select) =>
    new Field(
      "version",
      undefined as never,
      new SelectionSet(select(PackageVersion))
    ),
};

export interface IPackageVersion extends INode {
  __typename: "PackageVersion";
  files: IPackageFileConnection;
  package: IPackage;
  platform: string;
  preRelease: boolean;
  readme: string;
  release: IRelease;
  statistics: IPackageVersionStatistics;
  summary: string;
  version: string;
}

interface PackageVersionSelector {
  __typename: () => Field<"__typename">;

  files: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | PackageFileOrder;
    },
    select: (t: PackageFileConnectionSelector) => T
  ) => Field<
    "files",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | PackageFileOrder>
    ],
    SelectionSet<T>
  >;

  id: () => Field<"id">;

  package: <T extends Array<Selection>>(
    select: (t: PackageSelector) => T
  ) => Field<"package", never, SelectionSet<T>>;

  platform: () => Field<"platform">;

  preRelease: () => Field<"preRelease">;

  readme: () => Field<"readme">;

  release: <T extends Array<Selection>>(
    select: (t: ReleaseSelector) => T
  ) => Field<"release", never, SelectionSet<T>>;

  statistics: <T extends Array<Selection>>(
    select: (t: PackageVersionStatisticsSelector) => T
  ) => Field<"statistics", never, SelectionSet<T>>;

  summary: () => Field<"summary">;

  version: () => Field<"version">;
}

export const isPackageVersion = (
  object: Record<string, any>
): object is Partial<IPackageVersion> => {
  return object.__typename === "PackageVersion";
};

export const PackageVersion: PackageVersionSelector = {
  __typename: () => new Field("__typename"),

  files: (variables, select) =>
    new Field(
      "files",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(PackageFileConnection))
    ),

  id: () => new Field("id"),

  package: (select) =>
    new Field("package", undefined as never, new SelectionSet(select(Package))),

  platform: () => new Field("platform"),
  preRelease: () => new Field("preRelease"),
  readme: () => new Field("readme"),

  release: (select) =>
    new Field("release", undefined as never, new SelectionSet(select(Release))),

  statistics: (select) =>
    new Field(
      "statistics",
      undefined as never,
      new SelectionSet(select(PackageVersionStatistics))
    ),

  summary: () => new Field("summary"),
  version: () => new Field("version"),
};

export interface IPackageVersionConnection {
  edges: IPackageVersionEdge[];
  nodes: IPackageVersion[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface PackageVersionConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: PackageVersionEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: PackageVersionSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const PackageVersionConnection: PackageVersionConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(PackageVersionEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(PackageVersion))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IPackageVersionEdge {
  cursor: string;
  node: IPackageVersion;
}

interface PackageVersionEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: PackageVersionSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const PackageVersionEdge: PackageVersionEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(PackageVersion))
    ),
};

export interface IPackageVersionStatistics {
  downloadsTotalCount: number;
}

interface PackageVersionStatisticsSelector {
  __typename: () => Field<"__typename">;

  downloadsTotalCount: () => Field<"downloadsTotalCount">;
}

export const PackageVersionStatistics: PackageVersionStatisticsSelector = {
  __typename: () => new Field("__typename"),

  downloadsTotalCount: () => new Field("downloadsTotalCount"),
};

export interface IPageInfo {
  endCursor: string;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
  startCursor: string;
}

interface PageInfoSelector {
  __typename: () => Field<"__typename">;

  endCursor: () => Field<"endCursor">;

  hasNextPage: () => Field<"hasNextPage">;

  hasPreviousPage: () => Field<"hasPreviousPage">;

  startCursor: () => Field<"startCursor">;
}

export const PageInfo: PageInfoSelector = {
  __typename: () => new Field("__typename"),

  endCursor: () => new Field("endCursor"),
  hasNextPage: () => new Field("hasNextPage"),
  hasPreviousPage: () => new Field("hasPreviousPage"),
  startCursor: () => new Field("startCursor"),
};

export interface IPermissionSource {
  organization: IOrganization;
  permission: DefaultRepositoryPermissionField;
  source: IPermissionGranter;
}

interface PermissionSourceSelector {
  __typename: () => Field<"__typename">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  permission: () => Field<"permission">;

  source: <T extends Array<Selection>>(
    select: (t: PermissionGranterSelector) => T
  ) => Field<"source", never, SelectionSet<T>>;
}

export const PermissionSource: PermissionSourceSelector = {
  __typename: () => new Field("__typename"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  permission: () => new Field("permission"),

  source: (select) =>
    new Field(
      "source",
      undefined as never,
      new SelectionSet(select(PermissionGranter))
    ),
};

export interface IPinnableItemConnection {
  edges: IPinnableItemEdge[];
  nodes: IPinnableItem[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface PinnableItemConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: PinnableItemEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: PinnableItemSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const PinnableItemConnection: PinnableItemConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(PinnableItemEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(PinnableItem))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IPinnableItemEdge {
  cursor: string;
  node: IPinnableItem;
}

interface PinnableItemEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: PinnableItemSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const PinnableItemEdge: PinnableItemEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(PinnableItem))
    ),
};

export interface IPinnedEvent extends INode {
  __typename: "PinnedEvent";
  actor: IActor;
  createdAt: unknown;
  issue: IIssue;
}

interface PinnedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  issue: <T extends Array<Selection>>(
    select: (t: IssueSelector) => T
  ) => Field<"issue", never, SelectionSet<T>>;
}

export const isPinnedEvent = (
  object: Record<string, any>
): object is Partial<IPinnedEvent> => {
  return object.__typename === "PinnedEvent";
};

export const PinnedEvent: PinnedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  issue: (select) =>
    new Field("issue", undefined as never, new SelectionSet(select(Issue))),
};

export interface IPrivateRepositoryForkingDisableAuditEntry
  extends IAuditEntry,
    IEnterpriseAuditEntryData,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "PrivateRepositoryForkingDisableAuditEntry";
}

interface PrivateRepositoryForkingDisableAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  enterpriseResourcePath: () => Field<"enterpriseResourcePath">;

  enterpriseSlug: () => Field<"enterpriseSlug">;

  enterpriseUrl: () => Field<"enterpriseUrl">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isPrivateRepositoryForkingDisableAuditEntry = (
  object: Record<string, any>
): object is Partial<IPrivateRepositoryForkingDisableAuditEntry> => {
  return object.__typename === "PrivateRepositoryForkingDisableAuditEntry";
};

export const PrivateRepositoryForkingDisableAuditEntry: PrivateRepositoryForkingDisableAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  enterpriseResourcePath: () => new Field("enterpriseResourcePath"),
  enterpriseSlug: () => new Field("enterpriseSlug"),
  enterpriseUrl: () => new Field("enterpriseUrl"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IPrivateRepositoryForkingEnableAuditEntry
  extends IAuditEntry,
    IEnterpriseAuditEntryData,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "PrivateRepositoryForkingEnableAuditEntry";
}

interface PrivateRepositoryForkingEnableAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  enterpriseResourcePath: () => Field<"enterpriseResourcePath">;

  enterpriseSlug: () => Field<"enterpriseSlug">;

  enterpriseUrl: () => Field<"enterpriseUrl">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isPrivateRepositoryForkingEnableAuditEntry = (
  object: Record<string, any>
): object is Partial<IPrivateRepositoryForkingEnableAuditEntry> => {
  return object.__typename === "PrivateRepositoryForkingEnableAuditEntry";
};

export const PrivateRepositoryForkingEnableAuditEntry: PrivateRepositoryForkingEnableAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  enterpriseResourcePath: () => new Field("enterpriseResourcePath"),
  enterpriseSlug: () => new Field("enterpriseSlug"),
  enterpriseUrl: () => new Field("enterpriseUrl"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IProfileItemShowcase {
  hasPinnedItems: boolean;
  items: IPinnableItemConnection;
}

interface ProfileItemShowcaseSelector {
  __typename: () => Field<"__typename">;

  hasPinnedItems: () => Field<"hasPinnedItems">;

  items: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: PinnableItemConnectionSelector) => T
  ) => Field<
    "items",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;
}

export const ProfileItemShowcase: ProfileItemShowcaseSelector = {
  __typename: () => new Field("__typename"),

  hasPinnedItems: () => new Field("hasPinnedItems"),

  items: (variables, select) =>
    new Field(
      "items",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(PinnableItemConnection))
    ),
};

export interface IProfileOwner {
  __typename: string;
  anyPinnableItems: boolean;
  email: string;
  id: string;
  itemShowcase: IProfileItemShowcase;
  location: string;
  login: string;
  name: string;
  pinnableItems: IPinnableItemConnection;
  pinnedItems: IPinnableItemConnection;
  pinnedItemsRemaining: number;
  viewerCanChangePinnedItems: boolean;
  websiteUrl: unknown;
}

interface ProfileOwnerSelector {
  __typename: () => Field<"__typename">;

  anyPinnableItems: (variables: {
    type: unknown;
  }) => Field<"anyPinnableItems", [/* @todo */]>;

  email: () => Field<"email">;

  id: () => Field<"id">;

  itemShowcase: <T extends Array<Selection>>(
    select: (t: ProfileItemShowcaseSelector) => T
  ) => Field<"itemShowcase", never, SelectionSet<T>>;

  location: () => Field<"location">;

  login: () => Field<"login">;

  name: () => Field<"name">;

  pinnableItems: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      types?: Variable<"types"> | PinnableItemType;
    },
    select: (t: PinnableItemConnectionSelector) => T
  ) => Field<
    "pinnableItems",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"types", Variable<"types"> | PinnableItemType>
    ],
    SelectionSet<T>
  >;

  pinnedItems: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      types?: Variable<"types"> | PinnableItemType;
    },
    select: (t: PinnableItemConnectionSelector) => T
  ) => Field<
    "pinnedItems",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"types", Variable<"types"> | PinnableItemType>
    ],
    SelectionSet<T>
  >;

  pinnedItemsRemaining: () => Field<"pinnedItemsRemaining">;

  viewerCanChangePinnedItems: () => Field<"viewerCanChangePinnedItems">;

  websiteUrl: () => Field<"websiteUrl">;

  on: <T extends Array<Selection>, F extends "Organization" | "User">(
    type: F,
    select: (
      t: F extends "Organization"
        ? OrganizationSelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const ProfileOwner: ProfileOwnerSelector = {
  __typename: () => new Field("__typename"),

  anyPinnableItems: (variables) => new Field("anyPinnableItems"),
  email: () => new Field("email"),
  id: () => new Field("id"),

  itemShowcase: (select) =>
    new Field(
      "itemShowcase",
      undefined as never,
      new SelectionSet(select(ProfileItemShowcase))
    ),

  location: () => new Field("location"),
  login: () => new Field("login"),
  name: () => new Field("name"),

  pinnableItems: (variables, select) =>
    new Field(
      "pinnableItems",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("types", variables.types, PinnableItemType),
      ],
      new SelectionSet(select(PinnableItemConnection))
    ),

  pinnedItems: (variables, select) =>
    new Field(
      "pinnedItems",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("types", variables.types, PinnableItemType),
      ],
      new SelectionSet(select(PinnableItemConnection))
    ),

  pinnedItemsRemaining: () => new Field("pinnedItemsRemaining"),
  viewerCanChangePinnedItems: () => new Field("viewerCanChangePinnedItems"),
  websiteUrl: () => new Field("websiteUrl"),

  on: (type, select) => {
    switch (type) {
      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IProject extends IClosable, INode, IUpdatable {
  __typename: "Project";
  body: string;
  bodyHTML: unknown;
  columns: IProjectColumnConnection;
  createdAt: unknown;
  creator: IActor;
  databaseId: number;
  name: string;
  number: number;
  owner: IProjectOwner;
  pendingCards: IProjectCardConnection;
  progress: IProjectProgress;
  resourcePath: unknown;
  state: ProjectState;
  updatedAt: unknown;
  url: unknown;
}

interface ProjectSelector {
  __typename: () => Field<"__typename">;

  body: () => Field<"body">;

  bodyHTML: () => Field<"bodyHTML">;

  closed: () => Field<"closed">;

  closedAt: () => Field<"closedAt">;

  columns: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: ProjectColumnConnectionSelector) => T
  ) => Field<
    "columns",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  createdAt: () => Field<"createdAt">;

  creator: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"creator", never, SelectionSet<T>>;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;

  name: () => Field<"name">;

  number: () => Field<"number">;

  owner: <T extends Array<Selection>>(
    select: (t: ProjectOwnerSelector) => T
  ) => Field<"owner", never, SelectionSet<T>>;

  pendingCards: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      archivedStates?: Variable<"archivedStates"> | ProjectCardArchivedState;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: ProjectCardConnectionSelector) => T
  ) => Field<
    "pendingCards",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<
        "archivedStates",
        Variable<"archivedStates"> | ProjectCardArchivedState
      >,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  progress: <T extends Array<Selection>>(
    select: (t: ProjectProgressSelector) => T
  ) => Field<"progress", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  state: () => Field<"state">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  viewerCanUpdate: () => Field<"viewerCanUpdate">;
}

export const isProject = (
  object: Record<string, any>
): object is Partial<IProject> => {
  return object.__typename === "Project";
};

export const Project: ProjectSelector = {
  __typename: () => new Field("__typename"),

  body: () => new Field("body"),
  bodyHTML: () => new Field("bodyHTML"),
  closed: () => new Field("closed"),
  closedAt: () => new Field("closedAt"),

  columns: (variables, select) =>
    new Field(
      "columns",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(ProjectColumnConnection))
    ),

  createdAt: () => new Field("createdAt"),

  creator: (select) =>
    new Field("creator", undefined as never, new SelectionSet(select(Actor))),

  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),
  name: () => new Field("name"),
  number: () => new Field("number"),

  owner: (select) =>
    new Field(
      "owner",
      undefined as never,
      new SelectionSet(select(ProjectOwner))
    ),

  pendingCards: (variables, select) =>
    new Field(
      "pendingCards",
      [
        new Argument("after", variables.after),
        new Argument(
          "archivedStates",
          variables.archivedStates,
          ProjectCardArchivedState
        ),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(ProjectCardConnection))
    ),

  progress: (select) =>
    new Field(
      "progress",
      undefined as never,
      new SelectionSet(select(ProjectProgress))
    ),

  resourcePath: () => new Field("resourcePath"),
  state: () => new Field("state"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
  viewerCanUpdate: () => new Field("viewerCanUpdate"),
};

export interface IProjectCard extends INode {
  __typename: "ProjectCard";
  column: IProjectColumn;
  content: IProjectCardItem;
  createdAt: unknown;
  creator: IActor;
  databaseId: number;
  isArchived: boolean;
  note: string;
  project: IProject;
  resourcePath: unknown;
  state: ProjectCardState;
  updatedAt: unknown;
  url: unknown;
}

interface ProjectCardSelector {
  __typename: () => Field<"__typename">;

  column: <T extends Array<Selection>>(
    select: (t: ProjectColumnSelector) => T
  ) => Field<"column", never, SelectionSet<T>>;

  content: <T extends Array<Selection>>(
    select: (t: ProjectCardItemSelector) => T
  ) => Field<"content", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  creator: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"creator", never, SelectionSet<T>>;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;

  isArchived: () => Field<"isArchived">;

  note: () => Field<"note">;

  project: <T extends Array<Selection>>(
    select: (t: ProjectSelector) => T
  ) => Field<"project", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  state: () => Field<"state">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;
}

export const isProjectCard = (
  object: Record<string, any>
): object is Partial<IProjectCard> => {
  return object.__typename === "ProjectCard";
};

export const ProjectCard: ProjectCardSelector = {
  __typename: () => new Field("__typename"),

  column: (select) =>
    new Field(
      "column",
      undefined as never,
      new SelectionSet(select(ProjectColumn))
    ),

  content: (select) =>
    new Field(
      "content",
      undefined as never,
      new SelectionSet(select(ProjectCardItem))
    ),

  createdAt: () => new Field("createdAt"),

  creator: (select) =>
    new Field("creator", undefined as never, new SelectionSet(select(Actor))),

  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),
  isArchived: () => new Field("isArchived"),
  note: () => new Field("note"),

  project: (select) =>
    new Field("project", undefined as never, new SelectionSet(select(Project))),

  resourcePath: () => new Field("resourcePath"),
  state: () => new Field("state"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
};

export interface IProjectCardConnection {
  edges: IProjectCardEdge[];
  nodes: IProjectCard[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface ProjectCardConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: ProjectCardEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: ProjectCardSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const ProjectCardConnection: ProjectCardConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(ProjectCardEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(ProjectCard))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IProjectCardEdge {
  cursor: string;
  node: IProjectCard;
}

interface ProjectCardEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: ProjectCardSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const ProjectCardEdge: ProjectCardEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(ProjectCard))
    ),
};

export interface IProjectColumn extends INode {
  __typename: "ProjectColumn";
  cards: IProjectCardConnection;
  createdAt: unknown;
  databaseId: number;
  name: string;
  project: IProject;
  purpose: ProjectColumnPurpose;
  resourcePath: unknown;
  updatedAt: unknown;
  url: unknown;
}

interface ProjectColumnSelector {
  __typename: () => Field<"__typename">;

  cards: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      archivedStates?: Variable<"archivedStates"> | ProjectCardArchivedState;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: ProjectCardConnectionSelector) => T
  ) => Field<
    "cards",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<
        "archivedStates",
        Variable<"archivedStates"> | ProjectCardArchivedState
      >,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;

  name: () => Field<"name">;

  project: <T extends Array<Selection>>(
    select: (t: ProjectSelector) => T
  ) => Field<"project", never, SelectionSet<T>>;

  purpose: () => Field<"purpose">;

  resourcePath: () => Field<"resourcePath">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;
}

export const isProjectColumn = (
  object: Record<string, any>
): object is Partial<IProjectColumn> => {
  return object.__typename === "ProjectColumn";
};

export const ProjectColumn: ProjectColumnSelector = {
  __typename: () => new Field("__typename"),

  cards: (variables, select) =>
    new Field(
      "cards",
      [
        new Argument("after", variables.after),
        new Argument(
          "archivedStates",
          variables.archivedStates,
          ProjectCardArchivedState
        ),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(ProjectCardConnection))
    ),

  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),
  name: () => new Field("name"),

  project: (select) =>
    new Field("project", undefined as never, new SelectionSet(select(Project))),

  purpose: () => new Field("purpose"),
  resourcePath: () => new Field("resourcePath"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
};

export interface IProjectColumnConnection {
  edges: IProjectColumnEdge[];
  nodes: IProjectColumn[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface ProjectColumnConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: ProjectColumnEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: ProjectColumnSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const ProjectColumnConnection: ProjectColumnConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(ProjectColumnEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(ProjectColumn))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IProjectColumnEdge {
  cursor: string;
  node: IProjectColumn;
}

interface ProjectColumnEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: ProjectColumnSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const ProjectColumnEdge: ProjectColumnEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(ProjectColumn))
    ),
};

export interface IProjectConnection {
  edges: IProjectEdge[];
  nodes: IProject[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface ProjectConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: ProjectEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: ProjectSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const ProjectConnection: ProjectConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(ProjectEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(Project))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IProjectEdge {
  cursor: string;
  node: IProject;
}

interface ProjectEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: ProjectSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const ProjectEdge: ProjectEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Project))),
};

export interface IProjectOwner {
  __typename: string;
  id: string;
  project: IProject;
  projects: IProjectConnection;
  projectsResourcePath: unknown;
  projectsUrl: unknown;
  viewerCanCreateProjects: boolean;
}

interface ProjectOwnerSelector {
  __typename: () => Field<"__typename">;

  id: () => Field<"id">;

  project: <T extends Array<Selection>>(
    variables: { number?: Variable<"number"> | number },
    select: (t: ProjectSelector) => T
  ) => Field<
    "project",
    [Argument<"number", Variable<"number"> | number>],
    SelectionSet<T>
  >;

  projects: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ProjectOrder;
      search?: Variable<"search"> | string;
      states?: Variable<"states"> | ProjectState;
    },
    select: (t: ProjectConnectionSelector) => T
  ) => Field<
    "projects",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ProjectOrder>,
      Argument<"search", Variable<"search"> | string>,
      Argument<"states", Variable<"states"> | ProjectState>
    ],
    SelectionSet<T>
  >;

  projectsResourcePath: () => Field<"projectsResourcePath">;

  projectsUrl: () => Field<"projectsUrl">;

  viewerCanCreateProjects: () => Field<"viewerCanCreateProjects">;

  on: <
    T extends Array<Selection>,
    F extends "Organization" | "Repository" | "User"
  >(
    type: F,
    select: (
      t: F extends "Organization"
        ? OrganizationSelector
        : F extends "Repository"
        ? RepositorySelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const ProjectOwner: ProjectOwnerSelector = {
  __typename: () => new Field("__typename"),

  id: () => new Field("id"),

  project: (variables, select) =>
    new Field(
      "project",
      [new Argument("number", variables.number)],
      new SelectionSet(select(Project))
    ),

  projects: (variables, select) =>
    new Field(
      "projects",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("search", variables.search),
        new Argument("states", variables.states, ProjectState),
      ],
      new SelectionSet(select(ProjectConnection))
    ),

  projectsResourcePath: () => new Field("projectsResourcePath"),
  projectsUrl: () => new Field("projectsUrl"),
  viewerCanCreateProjects: () => new Field("viewerCanCreateProjects"),

  on: (type, select) => {
    switch (type) {
      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      case "Repository": {
        return new InlineFragment(
          new NamedType("Repository") as any,
          new SelectionSet(select(Repository as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IProjectProgress {
  doneCount: number;
  donePercentage: number;
  enabled: boolean;
  inProgressCount: number;
  inProgressPercentage: number;
  todoCount: number;
  todoPercentage: number;
}

interface ProjectProgressSelector {
  __typename: () => Field<"__typename">;

  doneCount: () => Field<"doneCount">;

  donePercentage: () => Field<"donePercentage">;

  enabled: () => Field<"enabled">;

  inProgressCount: () => Field<"inProgressCount">;

  inProgressPercentage: () => Field<"inProgressPercentage">;

  todoCount: () => Field<"todoCount">;

  todoPercentage: () => Field<"todoPercentage">;
}

export const ProjectProgress: ProjectProgressSelector = {
  __typename: () => new Field("__typename"),

  doneCount: () => new Field("doneCount"),
  donePercentage: () => new Field("donePercentage"),
  enabled: () => new Field("enabled"),
  inProgressCount: () => new Field("inProgressCount"),
  inProgressPercentage: () => new Field("inProgressPercentage"),
  todoCount: () => new Field("todoCount"),
  todoPercentage: () => new Field("todoPercentage"),
};

export interface IPublicKey extends INode {
  __typename: "PublicKey";
  accessedAt: unknown;
  createdAt: unknown;
  fingerprint: string;
  isReadOnly: boolean;
  key: string;
  updatedAt: unknown;
}

interface PublicKeySelector {
  __typename: () => Field<"__typename">;

  accessedAt: () => Field<"accessedAt">;

  createdAt: () => Field<"createdAt">;

  fingerprint: () => Field<"fingerprint">;

  id: () => Field<"id">;

  isReadOnly: () => Field<"isReadOnly">;

  key: () => Field<"key">;

  updatedAt: () => Field<"updatedAt">;
}

export const isPublicKey = (
  object: Record<string, any>
): object is Partial<IPublicKey> => {
  return object.__typename === "PublicKey";
};

export const PublicKey: PublicKeySelector = {
  __typename: () => new Field("__typename"),

  accessedAt: () => new Field("accessedAt"),
  createdAt: () => new Field("createdAt"),
  fingerprint: () => new Field("fingerprint"),
  id: () => new Field("id"),
  isReadOnly: () => new Field("isReadOnly"),
  key: () => new Field("key"),
  updatedAt: () => new Field("updatedAt"),
};

export interface IPublicKeyConnection {
  edges: IPublicKeyEdge[];
  nodes: IPublicKey[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface PublicKeyConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: PublicKeyEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: PublicKeySelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const PublicKeyConnection: PublicKeyConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(PublicKeyEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(PublicKey))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IPublicKeyEdge {
  cursor: string;
  node: IPublicKey;
}

interface PublicKeyEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: PublicKeySelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const PublicKeyEdge: PublicKeyEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(PublicKey))),
};

export interface IPullRequest
  extends IAssignable,
    IClosable,
    IComment,
    ILabelable,
    ILockable,
    INode,
    IReactable,
    IRepositoryNode,
    ISubscribable,
    IUniformResourceLocatable,
    IUpdatable,
    IUpdatableComment {
  __typename: "PullRequest";
  additions: number;
  baseRef: IRef;
  baseRefName: string;
  baseRefOid: unknown;
  baseRepository: IRepository;
  changedFiles: number;
  checksResourcePath: unknown;
  checksUrl: unknown;
  comments: IIssueCommentConnection;
  commits: IPullRequestCommitConnection;
  deletions: number;
  files: IPullRequestChangedFileConnection;
  headRef: IRef;
  headRefName: string;
  headRefOid: unknown;
  headRepository: IRepository;
  headRepositoryOwner: IRepositoryOwner;
  hovercard: IHovercard;
  isCrossRepository: boolean;
  isDraft: boolean;
  isReadByViewer: boolean;
  latestOpinionatedReviews: IPullRequestReviewConnection;
  latestReviews: IPullRequestReviewConnection;
  maintainerCanModify: boolean;
  mergeCommit: ICommit;
  mergeable: MergeableState;
  merged: boolean;
  mergedAt: unknown;
  mergedBy: IActor;
  milestone: IMilestone;
  number: number;
  participants: IUserConnection;
  permalink: unknown;
  potentialMergeCommit: ICommit;
  projectCards: IProjectCardConnection;
  revertResourcePath: unknown;
  revertUrl: unknown;
  reviewDecision: PullRequestReviewDecision;
  reviewRequests: IReviewRequestConnection;
  reviewThreads: IPullRequestReviewThreadConnection;
  reviews: IPullRequestReviewConnection;
  state: PullRequestState;
  suggestedReviewers: ISuggestedReviewer[];
  timeline: IPullRequestTimelineConnection;
  timelineItems: IPullRequestTimelineItemsConnection;
  title: string;
  viewerCanApplySuggestion: boolean;
  viewerCanDeleteHeadRef: boolean;
  viewerMergeBodyText: string;
  viewerMergeHeadlineText: string;
}

interface PullRequestSelector {
  __typename: () => Field<"__typename">;

  activeLockReason: () => Field<"activeLockReason">;

  additions: () => Field<"additions">;

  assignees: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserConnectionSelector) => T
  ) => Field<
    "assignees",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  author: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"author", never, SelectionSet<T>>;

  authorAssociation: () => Field<"authorAssociation">;

  baseRef: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"baseRef", never, SelectionSet<T>>;

  baseRefName: () => Field<"baseRefName">;

  baseRefOid: () => Field<"baseRefOid">;

  baseRepository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"baseRepository", never, SelectionSet<T>>;

  body: () => Field<"body">;

  bodyHTML: () => Field<"bodyHTML">;

  bodyText: () => Field<"bodyText">;

  changedFiles: () => Field<"changedFiles">;

  checksResourcePath: () => Field<"checksResourcePath">;

  checksUrl: () => Field<"checksUrl">;

  closed: () => Field<"closed">;

  closedAt: () => Field<"closedAt">;

  comments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IssueCommentOrder;
    },
    select: (t: IssueCommentConnectionSelector) => T
  ) => Field<
    "comments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IssueCommentOrder>
    ],
    SelectionSet<T>
  >;

  commits: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: PullRequestCommitConnectionSelector) => T
  ) => Field<
    "commits",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  createdAt: () => Field<"createdAt">;

  createdViaEmail: () => Field<"createdViaEmail">;

  databaseId: () => Field<"databaseId">;

  deletions: () => Field<"deletions">;

  editor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"editor", never, SelectionSet<T>>;

  files: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: PullRequestChangedFileConnectionSelector) => T
  ) => Field<
    "files",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  headRef: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"headRef", never, SelectionSet<T>>;

  headRefName: () => Field<"headRefName">;

  headRefOid: () => Field<"headRefOid">;

  headRepository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"headRepository", never, SelectionSet<T>>;

  headRepositoryOwner: <T extends Array<Selection>>(
    select: (t: RepositoryOwnerSelector) => T
  ) => Field<"headRepositoryOwner", never, SelectionSet<T>>;

  hovercard: <T extends Array<Selection>>(
    variables: {
      includeNotificationContexts?:
        | Variable<"includeNotificationContexts">
        | boolean;
    },
    select: (t: HovercardSelector) => T
  ) => Field<
    "hovercard",
    [
      Argument<
        "includeNotificationContexts",
        Variable<"includeNotificationContexts"> | boolean
      >
    ],
    SelectionSet<T>
  >;

  id: () => Field<"id">;

  includesCreatedEdit: () => Field<"includesCreatedEdit">;

  isCrossRepository: () => Field<"isCrossRepository">;

  isDraft: () => Field<"isDraft">;

  isReadByViewer: () => Field<"isReadByViewer">;

  labels: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | LabelOrder;
    },
    select: (t: LabelConnectionSelector) => T
  ) => Field<
    "labels",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | LabelOrder>
    ],
    SelectionSet<T>
  >;

  lastEditedAt: () => Field<"lastEditedAt">;

  latestOpinionatedReviews: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      writersOnly?: Variable<"writersOnly"> | boolean;
    },
    select: (t: PullRequestReviewConnectionSelector) => T
  ) => Field<
    "latestOpinionatedReviews",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"writersOnly", Variable<"writersOnly"> | boolean>
    ],
    SelectionSet<T>
  >;

  latestReviews: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: PullRequestReviewConnectionSelector) => T
  ) => Field<
    "latestReviews",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  locked: () => Field<"locked">;

  maintainerCanModify: () => Field<"maintainerCanModify">;

  mergeCommit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"mergeCommit", never, SelectionSet<T>>;

  mergeable: () => Field<"mergeable">;

  merged: () => Field<"merged">;

  mergedAt: () => Field<"mergedAt">;

  mergedBy: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"mergedBy", never, SelectionSet<T>>;

  milestone: <T extends Array<Selection>>(
    select: (t: MilestoneSelector) => T
  ) => Field<"milestone", never, SelectionSet<T>>;

  number: () => Field<"number">;

  participants: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserConnectionSelector) => T
  ) => Field<
    "participants",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  permalink: () => Field<"permalink">;

  potentialMergeCommit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"potentialMergeCommit", never, SelectionSet<T>>;

  projectCards: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      archivedStates?: Variable<"archivedStates"> | ProjectCardArchivedState;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: ProjectCardConnectionSelector) => T
  ) => Field<
    "projectCards",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<
        "archivedStates",
        Variable<"archivedStates"> | ProjectCardArchivedState
      >,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  publishedAt: () => Field<"publishedAt">;

  reactionGroups: <T extends Array<Selection>>(
    select: (t: ReactionGroupSelector) => T
  ) => Field<"reactionGroups", never, SelectionSet<T>>;

  reactions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      content?: Variable<"content"> | ReactionContent;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ReactionOrder;
    },
    select: (t: ReactionConnectionSelector) => T
  ) => Field<
    "reactions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"content", Variable<"content"> | ReactionContent>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ReactionOrder>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  revertResourcePath: () => Field<"revertResourcePath">;

  revertUrl: () => Field<"revertUrl">;

  reviewDecision: () => Field<"reviewDecision">;

  reviewRequests: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: ReviewRequestConnectionSelector) => T
  ) => Field<
    "reviewRequests",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  reviewThreads: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: PullRequestReviewThreadConnectionSelector) => T
  ) => Field<
    "reviewThreads",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  reviews: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      author?: Variable<"author"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      states?: Variable<"states"> | PullRequestReviewState;
    },
    select: (t: PullRequestReviewConnectionSelector) => T
  ) => Field<
    "reviews",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"author", Variable<"author"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"states", Variable<"states"> | PullRequestReviewState>
    ],
    SelectionSet<T>
  >;

  state: () => Field<"state">;

  suggestedReviewers: <T extends Array<Selection>>(
    select: (t: SuggestedReviewerSelector) => T
  ) => Field<"suggestedReviewers", never, SelectionSet<T>>;

  /**
   * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.
   */

  timeline: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      since?: Variable<"since"> | unknown;
    },
    select: (t: PullRequestTimelineConnectionSelector) => T
  ) => Field<
    "timeline",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"since", Variable<"since"> | unknown>
    ],
    SelectionSet<T>
  >;

  timelineItems: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      itemTypes?: Variable<"itemTypes"> | PullRequestTimelineItemsItemType;
      last?: Variable<"last"> | number;
      since?: Variable<"since"> | unknown;
      skip?: Variable<"skip"> | number;
    },
    select: (t: PullRequestTimelineItemsConnectionSelector) => T
  ) => Field<
    "timelineItems",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<
        "itemTypes",
        Variable<"itemTypes"> | PullRequestTimelineItemsItemType
      >,
      Argument<"last", Variable<"last"> | number>,
      Argument<"since", Variable<"since"> | unknown>,
      Argument<"skip", Variable<"skip"> | number>
    ],
    SelectionSet<T>
  >;

  title: () => Field<"title">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  userContentEdits: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserContentEditConnectionSelector) => T
  ) => Field<
    "userContentEdits",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  viewerCanApplySuggestion: () => Field<"viewerCanApplySuggestion">;

  viewerCanDeleteHeadRef: () => Field<"viewerCanDeleteHeadRef">;

  viewerCanReact: () => Field<"viewerCanReact">;

  viewerCanSubscribe: () => Field<"viewerCanSubscribe">;

  viewerCanUpdate: () => Field<"viewerCanUpdate">;

  viewerCannotUpdateReasons: () => Field<"viewerCannotUpdateReasons">;

  viewerDidAuthor: () => Field<"viewerDidAuthor">;

  viewerMergeBodyText: (variables: {
    mergeType: unknown;
  }) => Field<"viewerMergeBodyText", [/* @todo */]>;

  viewerMergeHeadlineText: (variables: {
    mergeType: unknown;
  }) => Field<"viewerMergeHeadlineText", [/* @todo */]>;

  viewerSubscription: () => Field<"viewerSubscription">;
}

export const isPullRequest = (
  object: Record<string, any>
): object is Partial<IPullRequest> => {
  return object.__typename === "PullRequest";
};

export const PullRequest: PullRequestSelector = {
  __typename: () => new Field("__typename"),

  activeLockReason: () => new Field("activeLockReason"),
  additions: () => new Field("additions"),

  assignees: (variables, select) =>
    new Field(
      "assignees",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserConnection))
    ),

  author: (select) =>
    new Field("author", undefined as never, new SelectionSet(select(Actor))),

  authorAssociation: () => new Field("authorAssociation"),

  baseRef: (select) =>
    new Field("baseRef", undefined as never, new SelectionSet(select(Ref))),

  baseRefName: () => new Field("baseRefName"),
  baseRefOid: () => new Field("baseRefOid"),

  baseRepository: (select) =>
    new Field(
      "baseRepository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  body: () => new Field("body"),
  bodyHTML: () => new Field("bodyHTML"),
  bodyText: () => new Field("bodyText"),
  changedFiles: () => new Field("changedFiles"),
  checksResourcePath: () => new Field("checksResourcePath"),
  checksUrl: () => new Field("checksUrl"),
  closed: () => new Field("closed"),
  closedAt: () => new Field("closedAt"),

  comments: (variables, select) =>
    new Field(
      "comments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(IssueCommentConnection))
    ),

  commits: (variables, select) =>
    new Field(
      "commits",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(PullRequestCommitConnection))
    ),

  createdAt: () => new Field("createdAt"),
  createdViaEmail: () => new Field("createdViaEmail"),
  databaseId: () => new Field("databaseId"),
  deletions: () => new Field("deletions"),

  editor: (select) =>
    new Field("editor", undefined as never, new SelectionSet(select(Actor))),

  files: (variables, select) =>
    new Field(
      "files",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(PullRequestChangedFileConnection))
    ),

  headRef: (select) =>
    new Field("headRef", undefined as never, new SelectionSet(select(Ref))),

  headRefName: () => new Field("headRefName"),
  headRefOid: () => new Field("headRefOid"),

  headRepository: (select) =>
    new Field(
      "headRepository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  headRepositoryOwner: (select) =>
    new Field(
      "headRepositoryOwner",
      undefined as never,
      new SelectionSet(select(RepositoryOwner))
    ),

  hovercard: (variables, select) =>
    new Field(
      "hovercard",
      [
        new Argument(
          "includeNotificationContexts",
          variables.includeNotificationContexts
        ),
      ],
      new SelectionSet(select(Hovercard))
    ),

  id: () => new Field("id"),
  includesCreatedEdit: () => new Field("includesCreatedEdit"),
  isCrossRepository: () => new Field("isCrossRepository"),
  isDraft: () => new Field("isDraft"),
  isReadByViewer: () => new Field("isReadByViewer"),

  labels: (variables, select) =>
    new Field(
      "labels",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(LabelConnection))
    ),

  lastEditedAt: () => new Field("lastEditedAt"),

  latestOpinionatedReviews: (variables, select) =>
    new Field(
      "latestOpinionatedReviews",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("writersOnly", variables.writersOnly),
      ],
      new SelectionSet(select(PullRequestReviewConnection))
    ),

  latestReviews: (variables, select) =>
    new Field(
      "latestReviews",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(PullRequestReviewConnection))
    ),

  locked: () => new Field("locked"),
  maintainerCanModify: () => new Field("maintainerCanModify"),

  mergeCommit: (select) =>
    new Field(
      "mergeCommit",
      undefined as never,
      new SelectionSet(select(Commit))
    ),

  mergeable: () => new Field("mergeable"),
  merged: () => new Field("merged"),
  mergedAt: () => new Field("mergedAt"),

  mergedBy: (select) =>
    new Field("mergedBy", undefined as never, new SelectionSet(select(Actor))),

  milestone: (select) =>
    new Field(
      "milestone",
      undefined as never,
      new SelectionSet(select(Milestone))
    ),

  number: () => new Field("number"),

  participants: (variables, select) =>
    new Field(
      "participants",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserConnection))
    ),

  permalink: () => new Field("permalink"),

  potentialMergeCommit: (select) =>
    new Field(
      "potentialMergeCommit",
      undefined as never,
      new SelectionSet(select(Commit))
    ),

  projectCards: (variables, select) =>
    new Field(
      "projectCards",
      [
        new Argument("after", variables.after),
        new Argument(
          "archivedStates",
          variables.archivedStates,
          ProjectCardArchivedState
        ),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(ProjectCardConnection))
    ),

  publishedAt: () => new Field("publishedAt"),

  reactionGroups: (select) =>
    new Field(
      "reactionGroups",
      undefined as never,
      new SelectionSet(select(ReactionGroup))
    ),

  reactions: (variables, select) =>
    new Field(
      "reactions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("content", variables.content, ReactionContent),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(ReactionConnection))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  revertResourcePath: () => new Field("revertResourcePath"),
  revertUrl: () => new Field("revertUrl"),
  reviewDecision: () => new Field("reviewDecision"),

  reviewRequests: (variables, select) =>
    new Field(
      "reviewRequests",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(ReviewRequestConnection))
    ),

  reviewThreads: (variables, select) =>
    new Field(
      "reviewThreads",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(PullRequestReviewThreadConnection))
    ),

  reviews: (variables, select) =>
    new Field(
      "reviews",
      [
        new Argument("after", variables.after),
        new Argument("author", variables.author),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("states", variables.states, PullRequestReviewState),
      ],
      new SelectionSet(select(PullRequestReviewConnection))
    ),

  state: () => new Field("state"),

  suggestedReviewers: (select) =>
    new Field(
      "suggestedReviewers",
      undefined as never,
      new SelectionSet(select(SuggestedReviewer))
    ),

  /**
   * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.
   */

  timeline: (variables, select) =>
    new Field(
      "timeline",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("since", variables.since),
      ],
      new SelectionSet(select(PullRequestTimelineConnection))
    ),

  timelineItems: (variables, select) =>
    new Field(
      "timelineItems",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument(
          "itemTypes",
          variables.itemTypes,
          PullRequestTimelineItemsItemType
        ),
        new Argument("last", variables.last),
        new Argument("since", variables.since),
        new Argument("skip", variables.skip),
      ],
      new SelectionSet(select(PullRequestTimelineItemsConnection))
    ),

  title: () => new Field("title"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),

  userContentEdits: (variables, select) =>
    new Field(
      "userContentEdits",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserContentEditConnection))
    ),

  viewerCanApplySuggestion: () => new Field("viewerCanApplySuggestion"),
  viewerCanDeleteHeadRef: () => new Field("viewerCanDeleteHeadRef"),
  viewerCanReact: () => new Field("viewerCanReact"),
  viewerCanSubscribe: () => new Field("viewerCanSubscribe"),
  viewerCanUpdate: () => new Field("viewerCanUpdate"),
  viewerCannotUpdateReasons: () => new Field("viewerCannotUpdateReasons"),
  viewerDidAuthor: () => new Field("viewerDidAuthor"),
  viewerMergeBodyText: (variables) => new Field("viewerMergeBodyText"),
  viewerMergeHeadlineText: (variables) => new Field("viewerMergeHeadlineText"),
  viewerSubscription: () => new Field("viewerSubscription"),
};

export interface IPullRequestChangedFile {
  additions: number;
  deletions: number;
  path: string;
  viewerViewedState: FileViewedState;
}

interface PullRequestChangedFileSelector {
  __typename: () => Field<"__typename">;

  additions: () => Field<"additions">;

  deletions: () => Field<"deletions">;

  path: () => Field<"path">;

  viewerViewedState: () => Field<"viewerViewedState">;
}

export const PullRequestChangedFile: PullRequestChangedFileSelector = {
  __typename: () => new Field("__typename"),

  additions: () => new Field("additions"),
  deletions: () => new Field("deletions"),
  path: () => new Field("path"),
  viewerViewedState: () => new Field("viewerViewedState"),
};

export interface IPullRequestChangedFileConnection {
  edges: IPullRequestChangedFileEdge[];
  nodes: IPullRequestChangedFile[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface PullRequestChangedFileConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: PullRequestChangedFileEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: PullRequestChangedFileSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const PullRequestChangedFileConnection: PullRequestChangedFileConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(PullRequestChangedFileEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(PullRequestChangedFile))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IPullRequestChangedFileEdge {
  cursor: string;
  node: IPullRequestChangedFile;
}

interface PullRequestChangedFileEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: PullRequestChangedFileSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const PullRequestChangedFileEdge: PullRequestChangedFileEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(PullRequestChangedFile))
    ),
};

export interface IPullRequestCommit extends INode, IUniformResourceLocatable {
  __typename: "PullRequestCommit";
  commit: ICommit;
  pullRequest: IPullRequest;
}

interface PullRequestCommitSelector {
  __typename: () => Field<"__typename">;

  commit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"commit", never, SelectionSet<T>>;

  id: () => Field<"id">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;
}

export const isPullRequestCommit = (
  object: Record<string, any>
): object is Partial<IPullRequestCommit> => {
  return object.__typename === "PullRequestCommit";
};

export const PullRequestCommit: PullRequestCommitSelector = {
  __typename: () => new Field("__typename"),

  commit: (select) =>
    new Field("commit", undefined as never, new SelectionSet(select(Commit))),

  id: () => new Field("id"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),
};

export interface IPullRequestCommitCommentThread
  extends INode,
    IRepositoryNode {
  __typename: "PullRequestCommitCommentThread";
  comments: ICommitCommentConnection;
  commit: ICommit;
  path: string;
  position: number;
  pullRequest: IPullRequest;
}

interface PullRequestCommitCommentThreadSelector {
  __typename: () => Field<"__typename">;

  comments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: CommitCommentConnectionSelector) => T
  ) => Field<
    "comments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  commit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"commit", never, SelectionSet<T>>;

  id: () => Field<"id">;

  path: () => Field<"path">;

  position: () => Field<"position">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const isPullRequestCommitCommentThread = (
  object: Record<string, any>
): object is Partial<IPullRequestCommitCommentThread> => {
  return object.__typename === "PullRequestCommitCommentThread";
};

export const PullRequestCommitCommentThread: PullRequestCommitCommentThreadSelector = {
  __typename: () => new Field("__typename"),

  comments: (variables, select) =>
    new Field(
      "comments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(CommitCommentConnection))
    ),

  commit: (select) =>
    new Field("commit", undefined as never, new SelectionSet(select(Commit))),

  id: () => new Field("id"),
  path: () => new Field("path"),
  position: () => new Field("position"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface IPullRequestCommitConnection {
  edges: IPullRequestCommitEdge[];
  nodes: IPullRequestCommit[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface PullRequestCommitConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: PullRequestCommitEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: PullRequestCommitSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const PullRequestCommitConnection: PullRequestCommitConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(PullRequestCommitEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(PullRequestCommit))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IPullRequestCommitEdge {
  cursor: string;
  node: IPullRequestCommit;
}

interface PullRequestCommitEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: PullRequestCommitSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const PullRequestCommitEdge: PullRequestCommitEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(PullRequestCommit))
    ),
};

export interface IPullRequestConnection {
  edges: IPullRequestEdge[];
  nodes: IPullRequest[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface PullRequestConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: PullRequestEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const PullRequestConnection: PullRequestConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(PullRequestEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IPullRequestContributionsByRepository {
  contributions: ICreatedPullRequestContributionConnection;
  repository: IRepository;
}

interface PullRequestContributionsByRepositorySelector {
  __typename: () => Field<"__typename">;

  contributions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ContributionOrder;
    },
    select: (t: CreatedPullRequestContributionConnectionSelector) => T
  ) => Field<
    "contributions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ContributionOrder>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const PullRequestContributionsByRepository: PullRequestContributionsByRepositorySelector = {
  __typename: () => new Field("__typename"),

  contributions: (variables, select) =>
    new Field(
      "contributions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(CreatedPullRequestContributionConnection))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface IPullRequestEdge {
  cursor: string;
  node: IPullRequest;
}

interface PullRequestEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const PullRequestEdge: PullRequestEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IPullRequestReview
  extends IComment,
    IDeletable,
    INode,
    IReactable,
    IRepositoryNode,
    IUpdatable,
    IUpdatableComment {
  __typename: "PullRequestReview";
  authorCanPushToRepository: boolean;
  comments: IPullRequestReviewCommentConnection;
  commit: ICommit;
  onBehalfOf: ITeamConnection;
  pullRequest: IPullRequest;
  resourcePath: unknown;
  state: PullRequestReviewState;
  submittedAt: unknown;
  url: unknown;
}

interface PullRequestReviewSelector {
  __typename: () => Field<"__typename">;

  author: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"author", never, SelectionSet<T>>;

  authorAssociation: () => Field<"authorAssociation">;

  authorCanPushToRepository: () => Field<"authorCanPushToRepository">;

  body: () => Field<"body">;

  bodyHTML: () => Field<"bodyHTML">;

  bodyText: () => Field<"bodyText">;

  comments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: PullRequestReviewCommentConnectionSelector) => T
  ) => Field<
    "comments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  commit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"commit", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  createdViaEmail: () => Field<"createdViaEmail">;

  databaseId: () => Field<"databaseId">;

  editor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"editor", never, SelectionSet<T>>;

  id: () => Field<"id">;

  includesCreatedEdit: () => Field<"includesCreatedEdit">;

  lastEditedAt: () => Field<"lastEditedAt">;

  onBehalfOf: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: TeamConnectionSelector) => T
  ) => Field<
    "onBehalfOf",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  publishedAt: () => Field<"publishedAt">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  reactionGroups: <T extends Array<Selection>>(
    select: (t: ReactionGroupSelector) => T
  ) => Field<"reactionGroups", never, SelectionSet<T>>;

  reactions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      content?: Variable<"content"> | ReactionContent;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ReactionOrder;
    },
    select: (t: ReactionConnectionSelector) => T
  ) => Field<
    "reactions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"content", Variable<"content"> | ReactionContent>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ReactionOrder>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  state: () => Field<"state">;

  submittedAt: () => Field<"submittedAt">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  userContentEdits: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserContentEditConnectionSelector) => T
  ) => Field<
    "userContentEdits",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  viewerCanDelete: () => Field<"viewerCanDelete">;

  viewerCanReact: () => Field<"viewerCanReact">;

  viewerCanUpdate: () => Field<"viewerCanUpdate">;

  viewerCannotUpdateReasons: () => Field<"viewerCannotUpdateReasons">;

  viewerDidAuthor: () => Field<"viewerDidAuthor">;
}

export const isPullRequestReview = (
  object: Record<string, any>
): object is Partial<IPullRequestReview> => {
  return object.__typename === "PullRequestReview";
};

export const PullRequestReview: PullRequestReviewSelector = {
  __typename: () => new Field("__typename"),

  author: (select) =>
    new Field("author", undefined as never, new SelectionSet(select(Actor))),

  authorAssociation: () => new Field("authorAssociation"),
  authorCanPushToRepository: () => new Field("authorCanPushToRepository"),
  body: () => new Field("body"),
  bodyHTML: () => new Field("bodyHTML"),
  bodyText: () => new Field("bodyText"),

  comments: (variables, select) =>
    new Field(
      "comments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(PullRequestReviewCommentConnection))
    ),

  commit: (select) =>
    new Field("commit", undefined as never, new SelectionSet(select(Commit))),

  createdAt: () => new Field("createdAt"),
  createdViaEmail: () => new Field("createdViaEmail"),
  databaseId: () => new Field("databaseId"),

  editor: (select) =>
    new Field("editor", undefined as never, new SelectionSet(select(Actor))),

  id: () => new Field("id"),
  includesCreatedEdit: () => new Field("includesCreatedEdit"),
  lastEditedAt: () => new Field("lastEditedAt"),

  onBehalfOf: (variables, select) =>
    new Field(
      "onBehalfOf",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(TeamConnection))
    ),

  publishedAt: () => new Field("publishedAt"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  reactionGroups: (select) =>
    new Field(
      "reactionGroups",
      undefined as never,
      new SelectionSet(select(ReactionGroup))
    ),

  reactions: (variables, select) =>
    new Field(
      "reactions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("content", variables.content, ReactionContent),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(ReactionConnection))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  state: () => new Field("state"),
  submittedAt: () => new Field("submittedAt"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),

  userContentEdits: (variables, select) =>
    new Field(
      "userContentEdits",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserContentEditConnection))
    ),

  viewerCanDelete: () => new Field("viewerCanDelete"),
  viewerCanReact: () => new Field("viewerCanReact"),
  viewerCanUpdate: () => new Field("viewerCanUpdate"),
  viewerCannotUpdateReasons: () => new Field("viewerCannotUpdateReasons"),
  viewerDidAuthor: () => new Field("viewerDidAuthor"),
};

export interface IPullRequestReviewComment
  extends IComment,
    IDeletable,
    IMinimizable,
    INode,
    IReactable,
    IRepositoryNode,
    IUpdatable,
    IUpdatableComment {
  __typename: "PullRequestReviewComment";
  commit: ICommit;
  diffHunk: string;
  draftedAt: unknown;
  originalCommit: ICommit;
  originalPosition: number;
  outdated: boolean;
  path: string;
  position: number;
  pullRequest: IPullRequest;
  pullRequestReview: IPullRequestReview;
  replyTo: IPullRequestReviewComment;
  resourcePath: unknown;
  state: PullRequestReviewCommentState;
  url: unknown;
}

interface PullRequestReviewCommentSelector {
  __typename: () => Field<"__typename">;

  author: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"author", never, SelectionSet<T>>;

  authorAssociation: () => Field<"authorAssociation">;

  body: () => Field<"body">;

  bodyHTML: () => Field<"bodyHTML">;

  bodyText: () => Field<"bodyText">;

  commit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"commit", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  createdViaEmail: () => Field<"createdViaEmail">;

  databaseId: () => Field<"databaseId">;

  diffHunk: () => Field<"diffHunk">;

  draftedAt: () => Field<"draftedAt">;

  editor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"editor", never, SelectionSet<T>>;

  id: () => Field<"id">;

  includesCreatedEdit: () => Field<"includesCreatedEdit">;

  isMinimized: () => Field<"isMinimized">;

  lastEditedAt: () => Field<"lastEditedAt">;

  minimizedReason: () => Field<"minimizedReason">;

  originalCommit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"originalCommit", never, SelectionSet<T>>;

  originalPosition: () => Field<"originalPosition">;

  outdated: () => Field<"outdated">;

  path: () => Field<"path">;

  position: () => Field<"position">;

  publishedAt: () => Field<"publishedAt">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  pullRequestReview: <T extends Array<Selection>>(
    select: (t: PullRequestReviewSelector) => T
  ) => Field<"pullRequestReview", never, SelectionSet<T>>;

  reactionGroups: <T extends Array<Selection>>(
    select: (t: ReactionGroupSelector) => T
  ) => Field<"reactionGroups", never, SelectionSet<T>>;

  reactions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      content?: Variable<"content"> | ReactionContent;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ReactionOrder;
    },
    select: (t: ReactionConnectionSelector) => T
  ) => Field<
    "reactions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"content", Variable<"content"> | ReactionContent>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ReactionOrder>
    ],
    SelectionSet<T>
  >;

  replyTo: <T extends Array<Selection>>(
    select: (t: PullRequestReviewCommentSelector) => T
  ) => Field<"replyTo", never, SelectionSet<T>>;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  state: () => Field<"state">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  userContentEdits: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserContentEditConnectionSelector) => T
  ) => Field<
    "userContentEdits",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  viewerCanDelete: () => Field<"viewerCanDelete">;

  viewerCanMinimize: () => Field<"viewerCanMinimize">;

  viewerCanReact: () => Field<"viewerCanReact">;

  viewerCanUpdate: () => Field<"viewerCanUpdate">;

  viewerCannotUpdateReasons: () => Field<"viewerCannotUpdateReasons">;

  viewerDidAuthor: () => Field<"viewerDidAuthor">;
}

export const isPullRequestReviewComment = (
  object: Record<string, any>
): object is Partial<IPullRequestReviewComment> => {
  return object.__typename === "PullRequestReviewComment";
};

export const PullRequestReviewComment: PullRequestReviewCommentSelector = {
  __typename: () => new Field("__typename"),

  author: (select) =>
    new Field("author", undefined as never, new SelectionSet(select(Actor))),

  authorAssociation: () => new Field("authorAssociation"),
  body: () => new Field("body"),
  bodyHTML: () => new Field("bodyHTML"),
  bodyText: () => new Field("bodyText"),

  commit: (select) =>
    new Field("commit", undefined as never, new SelectionSet(select(Commit))),

  createdAt: () => new Field("createdAt"),
  createdViaEmail: () => new Field("createdViaEmail"),
  databaseId: () => new Field("databaseId"),
  diffHunk: () => new Field("diffHunk"),
  draftedAt: () => new Field("draftedAt"),

  editor: (select) =>
    new Field("editor", undefined as never, new SelectionSet(select(Actor))),

  id: () => new Field("id"),
  includesCreatedEdit: () => new Field("includesCreatedEdit"),
  isMinimized: () => new Field("isMinimized"),
  lastEditedAt: () => new Field("lastEditedAt"),
  minimizedReason: () => new Field("minimizedReason"),

  originalCommit: (select) =>
    new Field(
      "originalCommit",
      undefined as never,
      new SelectionSet(select(Commit))
    ),

  originalPosition: () => new Field("originalPosition"),
  outdated: () => new Field("outdated"),
  path: () => new Field("path"),
  position: () => new Field("position"),
  publishedAt: () => new Field("publishedAt"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  pullRequestReview: (select) =>
    new Field(
      "pullRequestReview",
      undefined as never,
      new SelectionSet(select(PullRequestReview))
    ),

  reactionGroups: (select) =>
    new Field(
      "reactionGroups",
      undefined as never,
      new SelectionSet(select(ReactionGroup))
    ),

  reactions: (variables, select) =>
    new Field(
      "reactions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("content", variables.content, ReactionContent),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(ReactionConnection))
    ),

  replyTo: (select) =>
    new Field(
      "replyTo",
      undefined as never,
      new SelectionSet(select(PullRequestReviewComment))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  state: () => new Field("state"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),

  userContentEdits: (variables, select) =>
    new Field(
      "userContentEdits",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserContentEditConnection))
    ),

  viewerCanDelete: () => new Field("viewerCanDelete"),
  viewerCanMinimize: () => new Field("viewerCanMinimize"),
  viewerCanReact: () => new Field("viewerCanReact"),
  viewerCanUpdate: () => new Field("viewerCanUpdate"),
  viewerCannotUpdateReasons: () => new Field("viewerCannotUpdateReasons"),
  viewerDidAuthor: () => new Field("viewerDidAuthor"),
};

export interface IPullRequestReviewCommentConnection {
  edges: IPullRequestReviewCommentEdge[];
  nodes: IPullRequestReviewComment[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface PullRequestReviewCommentConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: PullRequestReviewCommentEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: PullRequestReviewCommentSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const PullRequestReviewCommentConnection: PullRequestReviewCommentConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(PullRequestReviewCommentEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(PullRequestReviewComment))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IPullRequestReviewCommentEdge {
  cursor: string;
  node: IPullRequestReviewComment;
}

interface PullRequestReviewCommentEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: PullRequestReviewCommentSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const PullRequestReviewCommentEdge: PullRequestReviewCommentEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(PullRequestReviewComment))
    ),
};

export interface IPullRequestReviewConnection {
  edges: IPullRequestReviewEdge[];
  nodes: IPullRequestReview[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface PullRequestReviewConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: PullRequestReviewEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: PullRequestReviewSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const PullRequestReviewConnection: PullRequestReviewConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(PullRequestReviewEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(PullRequestReview))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IPullRequestReviewContributionsByRepository {
  contributions: ICreatedPullRequestReviewContributionConnection;
  repository: IRepository;
}

interface PullRequestReviewContributionsByRepositorySelector {
  __typename: () => Field<"__typename">;

  contributions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ContributionOrder;
    },
    select: (t: CreatedPullRequestReviewContributionConnectionSelector) => T
  ) => Field<
    "contributions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ContributionOrder>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const PullRequestReviewContributionsByRepository: PullRequestReviewContributionsByRepositorySelector = {
  __typename: () => new Field("__typename"),

  contributions: (variables, select) =>
    new Field(
      "contributions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(CreatedPullRequestReviewContributionConnection))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface IPullRequestReviewEdge {
  cursor: string;
  node: IPullRequestReview;
}

interface PullRequestReviewEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: PullRequestReviewSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const PullRequestReviewEdge: PullRequestReviewEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(PullRequestReview))
    ),
};

export interface IPullRequestReviewThread extends INode {
  __typename: "PullRequestReviewThread";
  comments: IPullRequestReviewCommentConnection;
  diffSide: DiffSide;
  isCollapsed: boolean;
  isOutdated: boolean;
  isResolved: boolean;
  line: number;
  originalLine: number;
  originalStartLine: number;
  path: string;
  pullRequest: IPullRequest;
  repository: IRepository;
  resolvedBy: IUser;
  startDiffSide: DiffSide;
  startLine: number;
  viewerCanReply: boolean;
  viewerCanResolve: boolean;
  viewerCanUnresolve: boolean;
}

interface PullRequestReviewThreadSelector {
  __typename: () => Field<"__typename">;

  comments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      skip?: Variable<"skip"> | number;
    },
    select: (t: PullRequestReviewCommentConnectionSelector) => T
  ) => Field<
    "comments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"skip", Variable<"skip"> | number>
    ],
    SelectionSet<T>
  >;

  diffSide: () => Field<"diffSide">;

  id: () => Field<"id">;

  isCollapsed: () => Field<"isCollapsed">;

  isOutdated: () => Field<"isOutdated">;

  isResolved: () => Field<"isResolved">;

  line: () => Field<"line">;

  originalLine: () => Field<"originalLine">;

  originalStartLine: () => Field<"originalStartLine">;

  path: () => Field<"path">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  resolvedBy: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"resolvedBy", never, SelectionSet<T>>;

  startDiffSide: () => Field<"startDiffSide">;

  startLine: () => Field<"startLine">;

  viewerCanReply: () => Field<"viewerCanReply">;

  viewerCanResolve: () => Field<"viewerCanResolve">;

  viewerCanUnresolve: () => Field<"viewerCanUnresolve">;
}

export const isPullRequestReviewThread = (
  object: Record<string, any>
): object is Partial<IPullRequestReviewThread> => {
  return object.__typename === "PullRequestReviewThread";
};

export const PullRequestReviewThread: PullRequestReviewThreadSelector = {
  __typename: () => new Field("__typename"),

  comments: (variables, select) =>
    new Field(
      "comments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("skip", variables.skip),
      ],
      new SelectionSet(select(PullRequestReviewCommentConnection))
    ),

  diffSide: () => new Field("diffSide"),
  id: () => new Field("id"),
  isCollapsed: () => new Field("isCollapsed"),
  isOutdated: () => new Field("isOutdated"),
  isResolved: () => new Field("isResolved"),
  line: () => new Field("line"),
  originalLine: () => new Field("originalLine"),
  originalStartLine: () => new Field("originalStartLine"),
  path: () => new Field("path"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  resolvedBy: (select) =>
    new Field("resolvedBy", undefined as never, new SelectionSet(select(User))),

  startDiffSide: () => new Field("startDiffSide"),
  startLine: () => new Field("startLine"),
  viewerCanReply: () => new Field("viewerCanReply"),
  viewerCanResolve: () => new Field("viewerCanResolve"),
  viewerCanUnresolve: () => new Field("viewerCanUnresolve"),
};

export interface IPullRequestReviewThreadConnection {
  edges: IPullRequestReviewThreadEdge[];
  nodes: IPullRequestReviewThread[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface PullRequestReviewThreadConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: PullRequestReviewThreadEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: PullRequestReviewThreadSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const PullRequestReviewThreadConnection: PullRequestReviewThreadConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(PullRequestReviewThreadEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(PullRequestReviewThread))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IPullRequestReviewThreadEdge {
  cursor: string;
  node: IPullRequestReviewThread;
}

interface PullRequestReviewThreadEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: PullRequestReviewThreadSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const PullRequestReviewThreadEdge: PullRequestReviewThreadEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(PullRequestReviewThread))
    ),
};

export interface IPullRequestRevisionMarker {
  createdAt: unknown;
  lastSeenCommit: ICommit;
  pullRequest: IPullRequest;
}

interface PullRequestRevisionMarkerSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  lastSeenCommit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"lastSeenCommit", never, SelectionSet<T>>;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const PullRequestRevisionMarker: PullRequestRevisionMarkerSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),

  lastSeenCommit: (select) =>
    new Field(
      "lastSeenCommit",
      undefined as never,
      new SelectionSet(select(Commit))
    ),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IPullRequestTimelineConnection {
  edges: IPullRequestTimelineItemEdge[];
  nodes: IPullRequestTimelineItem[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface PullRequestTimelineConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: PullRequestTimelineItemEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: PullRequestTimelineItemSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const PullRequestTimelineConnection: PullRequestTimelineConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(PullRequestTimelineItemEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(PullRequestTimelineItem))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IPullRequestTimelineItemEdge {
  cursor: string;
  node: IPullRequestTimelineItem;
}

interface PullRequestTimelineItemEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: PullRequestTimelineItemSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const PullRequestTimelineItemEdge: PullRequestTimelineItemEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(PullRequestTimelineItem))
    ),
};

export interface IPullRequestTimelineItemsConnection {
  edges: IPullRequestTimelineItemsEdge[];
  filteredCount: number;
  nodes: IPullRequestTimelineItems[];
  pageCount: number;
  pageInfo: IPageInfo;
  totalCount: number;
  updatedAt: unknown;
}

interface PullRequestTimelineItemsConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: PullRequestTimelineItemsEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  filteredCount: () => Field<"filteredCount">;

  nodes: <T extends Array<Selection>>(
    select: (t: PullRequestTimelineItemsSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageCount: () => Field<"pageCount">;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;

  updatedAt: () => Field<"updatedAt">;
}

export const PullRequestTimelineItemsConnection: PullRequestTimelineItemsConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(PullRequestTimelineItemsEdge))
    ),

  filteredCount: () => new Field("filteredCount"),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(PullRequestTimelineItems))
    ),

  pageCount: () => new Field("pageCount"),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
  updatedAt: () => new Field("updatedAt"),
};

export interface IPullRequestTimelineItemsEdge {
  cursor: string;
  node: IPullRequestTimelineItems;
}

interface PullRequestTimelineItemsEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: PullRequestTimelineItemsSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const PullRequestTimelineItemsEdge: PullRequestTimelineItemsEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(PullRequestTimelineItems))
    ),
};

export interface IPush extends INode {
  __typename: "Push";
  nextSha: unknown;
  permalink: unknown;
  previousSha: unknown;
  pusher: IUser;
  repository: IRepository;
}

interface PushSelector {
  __typename: () => Field<"__typename">;

  id: () => Field<"id">;

  nextSha: () => Field<"nextSha">;

  permalink: () => Field<"permalink">;

  previousSha: () => Field<"previousSha">;

  pusher: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"pusher", never, SelectionSet<T>>;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const isPush = (
  object: Record<string, any>
): object is Partial<IPush> => {
  return object.__typename === "Push";
};

export const Push: PushSelector = {
  __typename: () => new Field("__typename"),

  id: () => new Field("id"),
  nextSha: () => new Field("nextSha"),
  permalink: () => new Field("permalink"),
  previousSha: () => new Field("previousSha"),

  pusher: (select) =>
    new Field("pusher", undefined as never, new SelectionSet(select(User))),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface IPushAllowance extends INode {
  __typename: "PushAllowance";
  actor: IPushAllowanceActor;
  branchProtectionRule: IBranchProtectionRule;
}

interface PushAllowanceSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: PushAllowanceActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  branchProtectionRule: <T extends Array<Selection>>(
    select: (t: BranchProtectionRuleSelector) => T
  ) => Field<"branchProtectionRule", never, SelectionSet<T>>;

  id: () => Field<"id">;
}

export const isPushAllowance = (
  object: Record<string, any>
): object is Partial<IPushAllowance> => {
  return object.__typename === "PushAllowance";
};

export const PushAllowance: PushAllowanceSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(PushAllowanceActor))
    ),

  branchProtectionRule: (select) =>
    new Field(
      "branchProtectionRule",
      undefined as never,
      new SelectionSet(select(BranchProtectionRule))
    ),

  id: () => new Field("id"),
};

export interface IPushAllowanceConnection {
  edges: IPushAllowanceEdge[];
  nodes: IPushAllowance[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface PushAllowanceConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: PushAllowanceEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: PushAllowanceSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const PushAllowanceConnection: PushAllowanceConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(PushAllowanceEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(PushAllowance))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IPushAllowanceEdge {
  cursor: string;
  node: IPushAllowance;
}

interface PushAllowanceEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: PushAllowanceSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const PushAllowanceEdge: PushAllowanceEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(PushAllowance))
    ),
};

export interface IQuery {
  codeOfConduct: ICodeOfConduct;
  codesOfConduct: ICodeOfConduct[];
  enterprise: IEnterprise;
  enterpriseAdministratorInvitation: IEnterpriseAdministratorInvitation;
  enterpriseAdministratorInvitationByToken: IEnterpriseAdministratorInvitation;
  license: ILicense;
  licenses: ILicense[];
  marketplaceCategories: IMarketplaceCategory[];
  marketplaceCategory: IMarketplaceCategory;
  marketplaceListing: IMarketplaceListing;
  marketplaceListings: IMarketplaceListingConnection;
  meta: IGitHubMetadata;
  node: INode;
  nodes: INode[];
  organization: IOrganization;
  rateLimit: IRateLimit;
  relay: IQuery;
  repository: IRepository;
  repositoryOwner: IRepositoryOwner;
  resource: IUniformResourceLocatable;
  search: ISearchResultItemConnection;
  securityAdvisories: ISecurityAdvisoryConnection;
  securityAdvisory: ISecurityAdvisory;
  securityVulnerabilities: ISecurityVulnerabilityConnection;
  sponsorsListing: ISponsorsListing;
  topic: ITopic;
  user: IUser;
  viewer: IUser;
}

interface QuerySelector {
  __typename: () => Field<"__typename">;

  codeOfConduct: <T extends Array<Selection>>(
    variables: { key?: Variable<"key"> | string },
    select: (t: CodeOfConductSelector) => T
  ) => Field<
    "codeOfConduct",
    [Argument<"key", Variable<"key"> | string>],
    SelectionSet<T>
  >;

  codesOfConduct: <T extends Array<Selection>>(
    select: (t: CodeOfConductSelector) => T
  ) => Field<"codesOfConduct", never, SelectionSet<T>>;

  enterprise: <T extends Array<Selection>>(
    variables: {
      invitationToken?: Variable<"invitationToken"> | string;
      slug?: Variable<"slug"> | string;
    },
    select: (t: EnterpriseSelector) => T
  ) => Field<
    "enterprise",
    [
      Argument<"invitationToken", Variable<"invitationToken"> | string>,
      Argument<"slug", Variable<"slug"> | string>
    ],
    SelectionSet<T>
  >;

  enterpriseAdministratorInvitation: <T extends Array<Selection>>(
    variables: {
      enterpriseSlug?: Variable<"enterpriseSlug"> | string;
      role?: Variable<"role"> | EnterpriseAdministratorRole;
      userLogin?: Variable<"userLogin"> | string;
    },
    select: (t: EnterpriseAdministratorInvitationSelector) => T
  ) => Field<
    "enterpriseAdministratorInvitation",
    [
      Argument<"enterpriseSlug", Variable<"enterpriseSlug"> | string>,
      Argument<"role", Variable<"role"> | EnterpriseAdministratorRole>,
      Argument<"userLogin", Variable<"userLogin"> | string>
    ],
    SelectionSet<T>
  >;

  enterpriseAdministratorInvitationByToken: <T extends Array<Selection>>(
    variables: { invitationToken?: Variable<"invitationToken"> | string },
    select: (t: EnterpriseAdministratorInvitationSelector) => T
  ) => Field<
    "enterpriseAdministratorInvitationByToken",
    [Argument<"invitationToken", Variable<"invitationToken"> | string>],
    SelectionSet<T>
  >;

  license: <T extends Array<Selection>>(
    variables: { key?: Variable<"key"> | string },
    select: (t: LicenseSelector) => T
  ) => Field<
    "license",
    [Argument<"key", Variable<"key"> | string>],
    SelectionSet<T>
  >;

  licenses: <T extends Array<Selection>>(
    select: (t: LicenseSelector) => T
  ) => Field<"licenses", never, SelectionSet<T>>;

  marketplaceCategories: <T extends Array<Selection>>(
    variables: {
      excludeEmpty?: Variable<"excludeEmpty"> | boolean;
      excludeSubcategories?: Variable<"excludeSubcategories"> | boolean;
      includeCategories?: Variable<"includeCategories"> | string;
    },
    select: (t: MarketplaceCategorySelector) => T
  ) => Field<
    "marketplaceCategories",
    [
      Argument<"excludeEmpty", Variable<"excludeEmpty"> | boolean>,
      Argument<
        "excludeSubcategories",
        Variable<"excludeSubcategories"> | boolean
      >,
      Argument<"includeCategories", Variable<"includeCategories"> | string>
    ],
    SelectionSet<T>
  >;

  marketplaceCategory: <T extends Array<Selection>>(
    variables: {
      slug?: Variable<"slug"> | string;
      useTopicAliases?: Variable<"useTopicAliases"> | boolean;
    },
    select: (t: MarketplaceCategorySelector) => T
  ) => Field<
    "marketplaceCategory",
    [
      Argument<"slug", Variable<"slug"> | string>,
      Argument<"useTopicAliases", Variable<"useTopicAliases"> | boolean>
    ],
    SelectionSet<T>
  >;

  marketplaceListing: <T extends Array<Selection>>(
    variables: { slug?: Variable<"slug"> | string },
    select: (t: MarketplaceListingSelector) => T
  ) => Field<
    "marketplaceListing",
    [Argument<"slug", Variable<"slug"> | string>],
    SelectionSet<T>
  >;

  marketplaceListings: <T extends Array<Selection>>(
    variables: {
      adminId?: Variable<"adminId"> | string;
      after?: Variable<"after"> | string;
      allStates?: Variable<"allStates"> | boolean;
      before?: Variable<"before"> | string;
      categorySlug?: Variable<"categorySlug"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      organizationId?: Variable<"organizationId"> | string;
      primaryCategoryOnly?: Variable<"primaryCategoryOnly"> | boolean;
      slugs?: Variable<"slugs"> | string;
      useTopicAliases?: Variable<"useTopicAliases"> | boolean;
      viewerCanAdmin?: Variable<"viewerCanAdmin"> | boolean;
      withFreeTrialsOnly?: Variable<"withFreeTrialsOnly"> | boolean;
    },
    select: (t: MarketplaceListingConnectionSelector) => T
  ) => Field<
    "marketplaceListings",
    [
      Argument<"adminId", Variable<"adminId"> | string>,
      Argument<"after", Variable<"after"> | string>,
      Argument<"allStates", Variable<"allStates"> | boolean>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"categorySlug", Variable<"categorySlug"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"organizationId", Variable<"organizationId"> | string>,
      Argument<
        "primaryCategoryOnly",
        Variable<"primaryCategoryOnly"> | boolean
      >,
      Argument<"slugs", Variable<"slugs"> | string>,
      Argument<"useTopicAliases", Variable<"useTopicAliases"> | boolean>,
      Argument<"viewerCanAdmin", Variable<"viewerCanAdmin"> | boolean>,
      Argument<"withFreeTrialsOnly", Variable<"withFreeTrialsOnly"> | boolean>
    ],
    SelectionSet<T>
  >;

  meta: <T extends Array<Selection>>(
    select: (t: GitHubMetadataSelector) => T
  ) => Field<"meta", never, SelectionSet<T>>;

  node: <T extends Array<Selection>>(
    variables: { id?: Variable<"id"> | string },
    select: (t: NodeSelector) => T
  ) => Field<
    "node",
    [Argument<"id", Variable<"id"> | string>],
    SelectionSet<T>
  >;

  nodes: <T extends Array<Selection>>(
    variables: { ids?: Variable<"ids"> | string },
    select: (t: NodeSelector) => T
  ) => Field<
    "nodes",
    [Argument<"ids", Variable<"ids"> | string>],
    SelectionSet<T>
  >;

  organization: <T extends Array<Selection>>(
    variables: { login?: Variable<"login"> | string },
    select: (t: OrganizationSelector) => T
  ) => Field<
    "organization",
    [Argument<"login", Variable<"login"> | string>],
    SelectionSet<T>
  >;

  rateLimit: <T extends Array<Selection>>(
    variables: { dryRun?: Variable<"dryRun"> | boolean },
    select: (t: RateLimitSelector) => T
  ) => Field<
    "rateLimit",
    [Argument<"dryRun", Variable<"dryRun"> | boolean>],
    SelectionSet<T>
  >;

  relay: <T extends Array<Selection>>(
    select: (t: QuerySelector) => T
  ) => Field<"relay", never, SelectionSet<T>>;

  repository: <T extends Array<Selection>>(
    variables: {
      name?: Variable<"name"> | string;
      owner?: Variable<"owner"> | string;
    },
    select: (t: RepositorySelector) => T
  ) => Field<
    "repository",
    [
      Argument<"name", Variable<"name"> | string>,
      Argument<"owner", Variable<"owner"> | string>
    ],
    SelectionSet<T>
  >;

  repositoryOwner: <T extends Array<Selection>>(
    variables: { login?: Variable<"login"> | string },
    select: (t: RepositoryOwnerSelector) => T
  ) => Field<
    "repositoryOwner",
    [Argument<"login", Variable<"login"> | string>],
    SelectionSet<T>
  >;

  resource: <T extends Array<Selection>>(
    variables: { url?: Variable<"url"> | unknown },
    select: (t: UniformResourceLocatableSelector) => T
  ) => Field<
    "resource",
    [Argument<"url", Variable<"url"> | unknown>],
    SelectionSet<T>
  >;

  search: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      query?: Variable<"query"> | string;
      type?: Variable<"type"> | SearchType;
    },
    select: (t: SearchResultItemConnectionSelector) => T
  ) => Field<
    "search",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"query", Variable<"query"> | string>,
      Argument<"type", Variable<"type"> | SearchType>
    ],
    SelectionSet<T>
  >;

  securityAdvisories: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      identifier?: Variable<"identifier"> | SecurityAdvisoryIdentifierFilter;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | SecurityAdvisoryOrder;
      publishedSince?: Variable<"publishedSince"> | unknown;
      updatedSince?: Variable<"updatedSince"> | unknown;
    },
    select: (t: SecurityAdvisoryConnectionSelector) => T
  ) => Field<
    "securityAdvisories",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<
        "identifier",
        Variable<"identifier"> | SecurityAdvisoryIdentifierFilter
      >,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | SecurityAdvisoryOrder>,
      Argument<"publishedSince", Variable<"publishedSince"> | unknown>,
      Argument<"updatedSince", Variable<"updatedSince"> | unknown>
    ],
    SelectionSet<T>
  >;

  securityAdvisory: <T extends Array<Selection>>(
    variables: { ghsaId?: Variable<"ghsaId"> | string },
    select: (t: SecurityAdvisorySelector) => T
  ) => Field<
    "securityAdvisory",
    [Argument<"ghsaId", Variable<"ghsaId"> | string>],
    SelectionSet<T>
  >;

  securityVulnerabilities: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      ecosystem?: Variable<"ecosystem"> | SecurityAdvisoryEcosystem;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | SecurityVulnerabilityOrder;
      package?: Variable<"package"> | string;
      severities?: Variable<"severities"> | SecurityAdvisorySeverity;
    },
    select: (t: SecurityVulnerabilityConnectionSelector) => T
  ) => Field<
    "securityVulnerabilities",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"ecosystem", Variable<"ecosystem"> | SecurityAdvisoryEcosystem>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | SecurityVulnerabilityOrder>,
      Argument<"package", Variable<"package"> | string>,
      Argument<"severities", Variable<"severities"> | SecurityAdvisorySeverity>
    ],
    SelectionSet<T>
  >;

  /**
   * @deprecated `Query.sponsorsListing` will be removed. Use `Sponsorable.sponsorsListing` instead. Removal on 2020-04-01 UTC.
   */

  sponsorsListing: <T extends Array<Selection>>(
    variables: { slug?: Variable<"slug"> | string },
    select: (t: SponsorsListingSelector) => T
  ) => Field<
    "sponsorsListing",
    [Argument<"slug", Variable<"slug"> | string>],
    SelectionSet<T>
  >;

  topic: <T extends Array<Selection>>(
    variables: { name?: Variable<"name"> | string },
    select: (t: TopicSelector) => T
  ) => Field<
    "topic",
    [Argument<"name", Variable<"name"> | string>],
    SelectionSet<T>
  >;

  user: <T extends Array<Selection>>(
    variables: { login?: Variable<"login"> | string },
    select: (t: UserSelector) => T
  ) => Field<
    "user",
    [Argument<"login", Variable<"login"> | string>],
    SelectionSet<T>
  >;

  viewer: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"viewer", never, SelectionSet<T>>;
}

export const Query: QuerySelector = {
  __typename: () => new Field("__typename"),

  codeOfConduct: (variables, select) =>
    new Field(
      "codeOfConduct",
      [new Argument("key", variables.key)],
      new SelectionSet(select(CodeOfConduct))
    ),

  codesOfConduct: (select) =>
    new Field(
      "codesOfConduct",
      undefined as never,
      new SelectionSet(select(CodeOfConduct))
    ),

  enterprise: (variables, select) =>
    new Field(
      "enterprise",
      [
        new Argument("invitationToken", variables.invitationToken),
        new Argument("slug", variables.slug),
      ],
      new SelectionSet(select(Enterprise))
    ),

  enterpriseAdministratorInvitation: (variables, select) =>
    new Field(
      "enterpriseAdministratorInvitation",
      [
        new Argument("enterpriseSlug", variables.enterpriseSlug),
        new Argument("role", variables.role, EnterpriseAdministratorRole),
        new Argument("userLogin", variables.userLogin),
      ],
      new SelectionSet(select(EnterpriseAdministratorInvitation))
    ),

  enterpriseAdministratorInvitationByToken: (variables, select) =>
    new Field(
      "enterpriseAdministratorInvitationByToken",
      [new Argument("invitationToken", variables.invitationToken)],
      new SelectionSet(select(EnterpriseAdministratorInvitation))
    ),

  license: (variables, select) =>
    new Field(
      "license",
      [new Argument("key", variables.key)],
      new SelectionSet(select(License))
    ),

  licenses: (select) =>
    new Field(
      "licenses",
      undefined as never,
      new SelectionSet(select(License))
    ),

  marketplaceCategories: (variables, select) =>
    new Field(
      "marketplaceCategories",
      [
        new Argument("excludeEmpty", variables.excludeEmpty),
        new Argument("excludeSubcategories", variables.excludeSubcategories),
        new Argument("includeCategories", variables.includeCategories),
      ],
      new SelectionSet(select(MarketplaceCategory))
    ),

  marketplaceCategory: (variables, select) =>
    new Field(
      "marketplaceCategory",
      [
        new Argument("slug", variables.slug),
        new Argument("useTopicAliases", variables.useTopicAliases),
      ],
      new SelectionSet(select(MarketplaceCategory))
    ),

  marketplaceListing: (variables, select) =>
    new Field(
      "marketplaceListing",
      [new Argument("slug", variables.slug)],
      new SelectionSet(select(MarketplaceListing))
    ),

  marketplaceListings: (variables, select) =>
    new Field(
      "marketplaceListings",
      [
        new Argument("adminId", variables.adminId),
        new Argument("after", variables.after),
        new Argument("allStates", variables.allStates),
        new Argument("before", variables.before),
        new Argument("categorySlug", variables.categorySlug),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("organizationId", variables.organizationId),
        new Argument("primaryCategoryOnly", variables.primaryCategoryOnly),
        new Argument("slugs", variables.slugs),
        new Argument("useTopicAliases", variables.useTopicAliases),
        new Argument("viewerCanAdmin", variables.viewerCanAdmin),
        new Argument("withFreeTrialsOnly", variables.withFreeTrialsOnly),
      ],
      new SelectionSet(select(MarketplaceListingConnection))
    ),

  meta: (select) =>
    new Field(
      "meta",
      undefined as never,
      new SelectionSet(select(GitHubMetadata))
    ),

  node: (variables, select) =>
    new Field(
      "node",
      [new Argument("id", variables.id)],
      new SelectionSet(select(Node))
    ),

  nodes: (variables, select) =>
    new Field(
      "nodes",
      [new Argument("ids", variables.ids)],
      new SelectionSet(select(Node))
    ),

  organization: (variables, select) =>
    new Field(
      "organization",
      [new Argument("login", variables.login)],
      new SelectionSet(select(Organization))
    ),

  rateLimit: (variables, select) =>
    new Field(
      "rateLimit",
      [new Argument("dryRun", variables.dryRun)],
      new SelectionSet(select(RateLimit))
    ),

  relay: (select) =>
    new Field("relay", undefined as never, new SelectionSet(select(Query))),

  repository: (variables, select) =>
    new Field(
      "repository",
      [
        new Argument("name", variables.name),
        new Argument("owner", variables.owner),
      ],
      new SelectionSet(select(Repository))
    ),

  repositoryOwner: (variables, select) =>
    new Field(
      "repositoryOwner",
      [new Argument("login", variables.login)],
      new SelectionSet(select(RepositoryOwner))
    ),

  resource: (variables, select) =>
    new Field(
      "resource",
      [new Argument("url", variables.url)],
      new SelectionSet(select(UniformResourceLocatable))
    ),

  search: (variables, select) =>
    new Field(
      "search",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("query", variables.query),
        new Argument("type", variables.type, SearchType),
      ],
      new SelectionSet(select(SearchResultItemConnection))
    ),

  securityAdvisories: (variables, select) =>
    new Field(
      "securityAdvisories",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("identifier", variables.identifier),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("publishedSince", variables.publishedSince),
        new Argument("updatedSince", variables.updatedSince),
      ],
      new SelectionSet(select(SecurityAdvisoryConnection))
    ),

  securityAdvisory: (variables, select) =>
    new Field(
      "securityAdvisory",
      [new Argument("ghsaId", variables.ghsaId)],
      new SelectionSet(select(SecurityAdvisory))
    ),

  securityVulnerabilities: (variables, select) =>
    new Field(
      "securityVulnerabilities",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument(
          "ecosystem",
          variables.ecosystem,
          SecurityAdvisoryEcosystem
        ),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("package", variables.package),
        new Argument(
          "severities",
          variables.severities,
          SecurityAdvisorySeverity
        ),
      ],
      new SelectionSet(select(SecurityVulnerabilityConnection))
    ),

  /**
   * @deprecated `Query.sponsorsListing` will be removed. Use `Sponsorable.sponsorsListing` instead. Removal on 2020-04-01 UTC.
   */

  sponsorsListing: (variables, select) =>
    new Field(
      "sponsorsListing",
      [new Argument("slug", variables.slug)],
      new SelectionSet(select(SponsorsListing))
    ),

  topic: (variables, select) =>
    new Field(
      "topic",
      [new Argument("name", variables.name)],
      new SelectionSet(select(Topic))
    ),

  user: (variables, select) =>
    new Field(
      "user",
      [new Argument("login", variables.login)],
      new SelectionSet(select(User))
    ),

  viewer: (select) =>
    new Field("viewer", undefined as never, new SelectionSet(select(User))),
};

export interface IRateLimit {
  cost: number;
  limit: number;
  nodeCount: number;
  remaining: number;
  resetAt: unknown;
  used: number;
}

interface RateLimitSelector {
  __typename: () => Field<"__typename">;

  cost: () => Field<"cost">;

  limit: () => Field<"limit">;

  nodeCount: () => Field<"nodeCount">;

  remaining: () => Field<"remaining">;

  resetAt: () => Field<"resetAt">;

  used: () => Field<"used">;
}

export const RateLimit: RateLimitSelector = {
  __typename: () => new Field("__typename"),

  cost: () => new Field("cost"),
  limit: () => new Field("limit"),
  nodeCount: () => new Field("nodeCount"),
  remaining: () => new Field("remaining"),
  resetAt: () => new Field("resetAt"),
  used: () => new Field("used"),
};

export interface IReactable {
  __typename: string;
  databaseId: number;
  id: string;
  reactionGroups: IReactionGroup[];
  reactions: IReactionConnection;
  viewerCanReact: boolean;
}

interface ReactableSelector {
  __typename: () => Field<"__typename">;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;

  reactionGroups: <T extends Array<Selection>>(
    select: (t: ReactionGroupSelector) => T
  ) => Field<"reactionGroups", never, SelectionSet<T>>;

  reactions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      content?: Variable<"content"> | ReactionContent;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ReactionOrder;
    },
    select: (t: ReactionConnectionSelector) => T
  ) => Field<
    "reactions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"content", Variable<"content"> | ReactionContent>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ReactionOrder>
    ],
    SelectionSet<T>
  >;

  viewerCanReact: () => Field<"viewerCanReact">;

  on: <
    T extends Array<Selection>,
    F extends
      | "CommitComment"
      | "Issue"
      | "IssueComment"
      | "PullRequest"
      | "PullRequestReview"
      | "PullRequestReviewComment"
      | "TeamDiscussion"
      | "TeamDiscussionComment"
  >(
    type: F,
    select: (
      t: F extends "CommitComment"
        ? CommitCommentSelector
        : F extends "Issue"
        ? IssueSelector
        : F extends "IssueComment"
        ? IssueCommentSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : F extends "PullRequestReview"
        ? PullRequestReviewSelector
        : F extends "PullRequestReviewComment"
        ? PullRequestReviewCommentSelector
        : F extends "TeamDiscussion"
        ? TeamDiscussionSelector
        : F extends "TeamDiscussionComment"
        ? TeamDiscussionCommentSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Reactable: ReactableSelector = {
  __typename: () => new Field("__typename"),

  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),

  reactionGroups: (select) =>
    new Field(
      "reactionGroups",
      undefined as never,
      new SelectionSet(select(ReactionGroup))
    ),

  reactions: (variables, select) =>
    new Field(
      "reactions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("content", variables.content, ReactionContent),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(ReactionConnection))
    ),

  viewerCanReact: () => new Field("viewerCanReact"),

  on: (type, select) => {
    switch (type) {
      case "CommitComment": {
        return new InlineFragment(
          new NamedType("CommitComment") as any,
          new SelectionSet(select(CommitComment as any))
        );
      }

      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "IssueComment": {
        return new InlineFragment(
          new NamedType("IssueComment") as any,
          new SelectionSet(select(IssueComment as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      case "PullRequestReview": {
        return new InlineFragment(
          new NamedType("PullRequestReview") as any,
          new SelectionSet(select(PullRequestReview as any))
        );
      }

      case "PullRequestReviewComment": {
        return new InlineFragment(
          new NamedType("PullRequestReviewComment") as any,
          new SelectionSet(select(PullRequestReviewComment as any))
        );
      }

      case "TeamDiscussion": {
        return new InlineFragment(
          new NamedType("TeamDiscussion") as any,
          new SelectionSet(select(TeamDiscussion as any))
        );
      }

      case "TeamDiscussionComment": {
        return new InlineFragment(
          new NamedType("TeamDiscussionComment") as any,
          new SelectionSet(select(TeamDiscussionComment as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IReactingUserConnection {
  edges: IReactingUserEdge[];
  nodes: IUser[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface ReactingUserConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: ReactingUserEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const ReactingUserConnection: ReactingUserConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(ReactingUserEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(User))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IReactingUserEdge {
  cursor: string;
  node: IUser;
  reactedAt: unknown;
}

interface ReactingUserEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;

  reactedAt: () => Field<"reactedAt">;
}

export const ReactingUserEdge: ReactingUserEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(User))),

  reactedAt: () => new Field("reactedAt"),
};

export interface IReaction extends INode {
  __typename: "Reaction";
  content: ReactionContent;
  createdAt: unknown;
  databaseId: number;
  reactable: IReactable;
  user: IUser;
}

interface ReactionSelector {
  __typename: () => Field<"__typename">;

  content: () => Field<"content">;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;

  reactable: <T extends Array<Selection>>(
    select: (t: ReactableSelector) => T
  ) => Field<"reactable", never, SelectionSet<T>>;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const isReaction = (
  object: Record<string, any>
): object is Partial<IReaction> => {
  return object.__typename === "Reaction";
};

export const Reaction: ReactionSelector = {
  __typename: () => new Field("__typename"),

  content: () => new Field("content"),
  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),

  reactable: (select) =>
    new Field(
      "reactable",
      undefined as never,
      new SelectionSet(select(Reactable))
    ),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface IReactionConnection {
  edges: IReactionEdge[];
  nodes: IReaction[];
  pageInfo: IPageInfo;
  totalCount: number;
  viewerHasReacted: boolean;
}

interface ReactionConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: ReactionEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: ReactionSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;

  viewerHasReacted: () => Field<"viewerHasReacted">;
}

export const ReactionConnection: ReactionConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(ReactionEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(Reaction))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
  viewerHasReacted: () => new Field("viewerHasReacted"),
};

export interface IReactionEdge {
  cursor: string;
  node: IReaction;
}

interface ReactionEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: ReactionSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const ReactionEdge: ReactionEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Reaction))),
};

export interface IReactionGroup {
  content: ReactionContent;
  createdAt: unknown;
  subject: IReactable;
  users: IReactingUserConnection;
  viewerHasReacted: boolean;
}

interface ReactionGroupSelector {
  __typename: () => Field<"__typename">;

  content: () => Field<"content">;

  createdAt: () => Field<"createdAt">;

  subject: <T extends Array<Selection>>(
    select: (t: ReactableSelector) => T
  ) => Field<"subject", never, SelectionSet<T>>;

  users: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: ReactingUserConnectionSelector) => T
  ) => Field<
    "users",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  viewerHasReacted: () => Field<"viewerHasReacted">;
}

export const ReactionGroup: ReactionGroupSelector = {
  __typename: () => new Field("__typename"),

  content: () => new Field("content"),
  createdAt: () => new Field("createdAt"),

  subject: (select) =>
    new Field(
      "subject",
      undefined as never,
      new SelectionSet(select(Reactable))
    ),

  users: (variables, select) =>
    new Field(
      "users",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(ReactingUserConnection))
    ),

  viewerHasReacted: () => new Field("viewerHasReacted"),
};

export interface IReadyForReviewEvent extends INode, IUniformResourceLocatable {
  __typename: "ReadyForReviewEvent";
  actor: IActor;
  createdAt: unknown;
  pullRequest: IPullRequest;
}

interface ReadyForReviewEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;
}

export const isReadyForReviewEvent = (
  object: Record<string, any>
): object is Partial<IReadyForReviewEvent> => {
  return object.__typename === "ReadyForReviewEvent";
};

export const ReadyForReviewEvent: ReadyForReviewEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),
};

export interface IRef extends INode {
  __typename: "Ref";
  associatedPullRequests: IPullRequestConnection;
  branchProtectionRule: IBranchProtectionRule;
  name: string;
  prefix: string;
  refUpdateRule: IRefUpdateRule;
  repository: IRepository;
  target: IGitObject;
}

interface RefSelector {
  __typename: () => Field<"__typename">;

  associatedPullRequests: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      baseRefName?: Variable<"baseRefName"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      headRefName?: Variable<"headRefName"> | string;
      labels?: Variable<"labels"> | string;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IssueOrder;
      states?: Variable<"states"> | PullRequestState;
    },
    select: (t: PullRequestConnectionSelector) => T
  ) => Field<
    "associatedPullRequests",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"baseRefName", Variable<"baseRefName"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"headRefName", Variable<"headRefName"> | string>,
      Argument<"labels", Variable<"labels"> | string>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IssueOrder>,
      Argument<"states", Variable<"states"> | PullRequestState>
    ],
    SelectionSet<T>
  >;

  branchProtectionRule: <T extends Array<Selection>>(
    select: (t: BranchProtectionRuleSelector) => T
  ) => Field<"branchProtectionRule", never, SelectionSet<T>>;

  id: () => Field<"id">;

  name: () => Field<"name">;

  prefix: () => Field<"prefix">;

  refUpdateRule: <T extends Array<Selection>>(
    select: (t: RefUpdateRuleSelector) => T
  ) => Field<"refUpdateRule", never, SelectionSet<T>>;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  target: <T extends Array<Selection>>(
    select: (t: GitObjectSelector) => T
  ) => Field<"target", never, SelectionSet<T>>;
}

export const isRef = (object: Record<string, any>): object is Partial<IRef> => {
  return object.__typename === "Ref";
};

export const Ref: RefSelector = {
  __typename: () => new Field("__typename"),

  associatedPullRequests: (variables, select) =>
    new Field(
      "associatedPullRequests",
      [
        new Argument("after", variables.after),
        new Argument("baseRefName", variables.baseRefName),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("headRefName", variables.headRefName),
        new Argument("labels", variables.labels),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("states", variables.states, PullRequestState),
      ],
      new SelectionSet(select(PullRequestConnection))
    ),

  branchProtectionRule: (select) =>
    new Field(
      "branchProtectionRule",
      undefined as never,
      new SelectionSet(select(BranchProtectionRule))
    ),

  id: () => new Field("id"),
  name: () => new Field("name"),
  prefix: () => new Field("prefix"),

  refUpdateRule: (select) =>
    new Field(
      "refUpdateRule",
      undefined as never,
      new SelectionSet(select(RefUpdateRule))
    ),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  target: (select) =>
    new Field(
      "target",
      undefined as never,
      new SelectionSet(select(GitObject))
    ),
};

export interface IRefConnection {
  edges: IRefEdge[];
  nodes: IRef[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface RefConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: RefEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const RefConnection: RefConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field("edges", undefined as never, new SelectionSet(select(RefEdge))),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(Ref))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IRefEdge {
  cursor: string;
  node: IRef;
}

interface RefEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const RefEdge: RefEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Ref))),
};

export interface IRefUpdateRule {
  allowsDeletions: boolean;
  allowsForcePushes: boolean;
  pattern: string;
  requiredApprovingReviewCount: number;
  requiredStatusCheckContexts: string[];
  requiresLinearHistory: boolean;
  requiresSignatures: boolean;
  viewerCanPush: boolean;
}

interface RefUpdateRuleSelector {
  __typename: () => Field<"__typename">;

  allowsDeletions: () => Field<"allowsDeletions">;

  allowsForcePushes: () => Field<"allowsForcePushes">;

  pattern: () => Field<"pattern">;

  requiredApprovingReviewCount: () => Field<"requiredApprovingReviewCount">;

  requiredStatusCheckContexts: () => Field<"requiredStatusCheckContexts">;

  requiresLinearHistory: () => Field<"requiresLinearHistory">;

  requiresSignatures: () => Field<"requiresSignatures">;

  viewerCanPush: () => Field<"viewerCanPush">;
}

export const RefUpdateRule: RefUpdateRuleSelector = {
  __typename: () => new Field("__typename"),

  allowsDeletions: () => new Field("allowsDeletions"),
  allowsForcePushes: () => new Field("allowsForcePushes"),
  pattern: () => new Field("pattern"),
  requiredApprovingReviewCount: () => new Field("requiredApprovingReviewCount"),
  requiredStatusCheckContexts: () => new Field("requiredStatusCheckContexts"),
  requiresLinearHistory: () => new Field("requiresLinearHistory"),
  requiresSignatures: () => new Field("requiresSignatures"),
  viewerCanPush: () => new Field("viewerCanPush"),
};

export interface IReferencedEvent extends INode {
  __typename: "ReferencedEvent";
  actor: IActor;
  commit: ICommit;
  commitRepository: IRepository;
  createdAt: unknown;
  isCrossRepository: boolean;
  isDirectReference: boolean;
  subject: IReferencedSubject;
}

interface ReferencedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  commit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"commit", never, SelectionSet<T>>;

  commitRepository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"commitRepository", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  isCrossRepository: () => Field<"isCrossRepository">;

  isDirectReference: () => Field<"isDirectReference">;

  subject: <T extends Array<Selection>>(
    select: (t: ReferencedSubjectSelector) => T
  ) => Field<"subject", never, SelectionSet<T>>;
}

export const isReferencedEvent = (
  object: Record<string, any>
): object is Partial<IReferencedEvent> => {
  return object.__typename === "ReferencedEvent";
};

export const ReferencedEvent: ReferencedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  commit: (select) =>
    new Field("commit", undefined as never, new SelectionSet(select(Commit))),

  commitRepository: (select) =>
    new Field(
      "commitRepository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  isCrossRepository: () => new Field("isCrossRepository"),
  isDirectReference: () => new Field("isDirectReference"),

  subject: (select) =>
    new Field(
      "subject",
      undefined as never,
      new SelectionSet(select(ReferencedSubject))
    ),
};

export interface IRegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  clientMutationId: string;
  identityProvider: IEnterpriseIdentityProvider;
}

interface RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  identityProvider: <T extends Array<Selection>>(
    select: (t: EnterpriseIdentityProviderSelector) => T
  ) => Field<"identityProvider", never, SelectionSet<T>>;
}

export const RegenerateEnterpriseIdentityProviderRecoveryCodesPayload: RegenerateEnterpriseIdentityProviderRecoveryCodesPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  identityProvider: (select) =>
    new Field(
      "identityProvider",
      undefined as never,
      new SelectionSet(select(EnterpriseIdentityProvider))
    ),
};

export interface IRelease extends INode, IUniformResourceLocatable {
  __typename: "Release";
  author: IUser;
  createdAt: unknown;
  description: string;
  descriptionHTML: unknown;
  isDraft: boolean;
  isPrerelease: boolean;
  name: string;
  publishedAt: unknown;
  releaseAssets: IReleaseAssetConnection;
  shortDescriptionHTML: unknown;
  tag: IRef;
  tagName: string;
  updatedAt: unknown;
}

interface ReleaseSelector {
  __typename: () => Field<"__typename">;

  author: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"author", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  description: () => Field<"description">;

  descriptionHTML: () => Field<"descriptionHTML">;

  id: () => Field<"id">;

  isDraft: () => Field<"isDraft">;

  isPrerelease: () => Field<"isPrerelease">;

  name: () => Field<"name">;

  publishedAt: () => Field<"publishedAt">;

  releaseAssets: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      name?: Variable<"name"> | string;
    },
    select: (t: ReleaseAssetConnectionSelector) => T
  ) => Field<
    "releaseAssets",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"name", Variable<"name"> | string>
    ],
    SelectionSet<T>
  >;

  resourcePath: () => Field<"resourcePath">;

  shortDescriptionHTML: (variables: {
    limit: unknown;
  }) => Field<"shortDescriptionHTML", [/* @todo */]>;

  tag: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"tag", never, SelectionSet<T>>;

  tagName: () => Field<"tagName">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;
}

export const isRelease = (
  object: Record<string, any>
): object is Partial<IRelease> => {
  return object.__typename === "Release";
};

export const Release: ReleaseSelector = {
  __typename: () => new Field("__typename"),

  author: (select) =>
    new Field("author", undefined as never, new SelectionSet(select(User))),

  createdAt: () => new Field("createdAt"),
  description: () => new Field("description"),
  descriptionHTML: () => new Field("descriptionHTML"),
  id: () => new Field("id"),
  isDraft: () => new Field("isDraft"),
  isPrerelease: () => new Field("isPrerelease"),
  name: () => new Field("name"),
  publishedAt: () => new Field("publishedAt"),

  releaseAssets: (variables, select) =>
    new Field(
      "releaseAssets",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("name", variables.name),
      ],
      new SelectionSet(select(ReleaseAssetConnection))
    ),

  resourcePath: () => new Field("resourcePath"),
  shortDescriptionHTML: (variables) => new Field("shortDescriptionHTML"),

  tag: (select) =>
    new Field("tag", undefined as never, new SelectionSet(select(Ref))),

  tagName: () => new Field("tagName"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
};

export interface IReleaseAsset extends INode {
  __typename: "ReleaseAsset";
  contentType: string;
  createdAt: unknown;
  downloadCount: number;
  downloadUrl: unknown;
  name: string;
  release: IRelease;
  size: number;
  updatedAt: unknown;
  uploadedBy: IUser;
  url: unknown;
}

interface ReleaseAssetSelector {
  __typename: () => Field<"__typename">;

  contentType: () => Field<"contentType">;

  createdAt: () => Field<"createdAt">;

  downloadCount: () => Field<"downloadCount">;

  downloadUrl: () => Field<"downloadUrl">;

  id: () => Field<"id">;

  name: () => Field<"name">;

  release: <T extends Array<Selection>>(
    select: (t: ReleaseSelector) => T
  ) => Field<"release", never, SelectionSet<T>>;

  size: () => Field<"size">;

  updatedAt: () => Field<"updatedAt">;

  uploadedBy: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"uploadedBy", never, SelectionSet<T>>;

  url: () => Field<"url">;
}

export const isReleaseAsset = (
  object: Record<string, any>
): object is Partial<IReleaseAsset> => {
  return object.__typename === "ReleaseAsset";
};

export const ReleaseAsset: ReleaseAssetSelector = {
  __typename: () => new Field("__typename"),

  contentType: () => new Field("contentType"),
  createdAt: () => new Field("createdAt"),
  downloadCount: () => new Field("downloadCount"),
  downloadUrl: () => new Field("downloadUrl"),
  id: () => new Field("id"),
  name: () => new Field("name"),

  release: (select) =>
    new Field("release", undefined as never, new SelectionSet(select(Release))),

  size: () => new Field("size"),
  updatedAt: () => new Field("updatedAt"),

  uploadedBy: (select) =>
    new Field("uploadedBy", undefined as never, new SelectionSet(select(User))),

  url: () => new Field("url"),
};

export interface IReleaseAssetConnection {
  edges: IReleaseAssetEdge[];
  nodes: IReleaseAsset[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface ReleaseAssetConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: ReleaseAssetEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: ReleaseAssetSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const ReleaseAssetConnection: ReleaseAssetConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(ReleaseAssetEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(ReleaseAsset))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IReleaseAssetEdge {
  cursor: string;
  node: IReleaseAsset;
}

interface ReleaseAssetEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: ReleaseAssetSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const ReleaseAssetEdge: ReleaseAssetEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(ReleaseAsset))
    ),
};

export interface IReleaseConnection {
  edges: IReleaseEdge[];
  nodes: IRelease[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface ReleaseConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: ReleaseEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: ReleaseSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const ReleaseConnection: ReleaseConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(ReleaseEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(Release))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IReleaseEdge {
  cursor: string;
  node: IRelease;
}

interface ReleaseEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: ReleaseSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const ReleaseEdge: ReleaseEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Release))),
};

export interface IRemoveAssigneesFromAssignablePayload {
  assignable: IAssignable;
  clientMutationId: string;
}

interface RemoveAssigneesFromAssignablePayloadSelector {
  __typename: () => Field<"__typename">;

  assignable: <T extends Array<Selection>>(
    select: (t: AssignableSelector) => T
  ) => Field<"assignable", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;
}

export const RemoveAssigneesFromAssignablePayload: RemoveAssigneesFromAssignablePayloadSelector = {
  __typename: () => new Field("__typename"),

  assignable: (select) =>
    new Field(
      "assignable",
      undefined as never,
      new SelectionSet(select(Assignable))
    ),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface IRemoveEnterpriseAdminPayload {
  admin: IUser;
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
  viewer: IUser;
}

interface RemoveEnterpriseAdminPayloadSelector {
  __typename: () => Field<"__typename">;

  admin: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"admin", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;

  viewer: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"viewer", never, SelectionSet<T>>;
}

export const RemoveEnterpriseAdminPayload: RemoveEnterpriseAdminPayloadSelector = {
  __typename: () => new Field("__typename"),

  admin: (select) =>
    new Field("admin", undefined as never, new SelectionSet(select(User))),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),

  viewer: (select) =>
    new Field("viewer", undefined as never, new SelectionSet(select(User))),
};

export interface IRemoveEnterpriseIdentityProviderPayload {
  clientMutationId: string;
  identityProvider: IEnterpriseIdentityProvider;
}

interface RemoveEnterpriseIdentityProviderPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  identityProvider: <T extends Array<Selection>>(
    select: (t: EnterpriseIdentityProviderSelector) => T
  ) => Field<"identityProvider", never, SelectionSet<T>>;
}

export const RemoveEnterpriseIdentityProviderPayload: RemoveEnterpriseIdentityProviderPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  identityProvider: (select) =>
    new Field(
      "identityProvider",
      undefined as never,
      new SelectionSet(select(EnterpriseIdentityProvider))
    ),
};

export interface IRemoveEnterpriseOrganizationPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  organization: IOrganization;
  viewer: IUser;
}

interface RemoveEnterpriseOrganizationPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  viewer: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"viewer", never, SelectionSet<T>>;
}

export const RemoveEnterpriseOrganizationPayload: RemoveEnterpriseOrganizationPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  viewer: (select) =>
    new Field("viewer", undefined as never, new SelectionSet(select(User))),
};

export interface IRemoveLabelsFromLabelablePayload {
  clientMutationId: string;
  labelable: ILabelable;
}

interface RemoveLabelsFromLabelablePayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  labelable: <T extends Array<Selection>>(
    select: (t: LabelableSelector) => T
  ) => Field<"labelable", never, SelectionSet<T>>;
}

export const RemoveLabelsFromLabelablePayload: RemoveLabelsFromLabelablePayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  labelable: (select) =>
    new Field(
      "labelable",
      undefined as never,
      new SelectionSet(select(Labelable))
    ),
};

export interface IRemoveOutsideCollaboratorPayload {
  clientMutationId: string;
  removedUser: IUser;
}

interface RemoveOutsideCollaboratorPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  removedUser: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"removedUser", never, SelectionSet<T>>;
}

export const RemoveOutsideCollaboratorPayload: RemoveOutsideCollaboratorPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  removedUser: (select) =>
    new Field(
      "removedUser",
      undefined as never,
      new SelectionSet(select(User))
    ),
};

export interface IRemoveReactionPayload {
  clientMutationId: string;
  reaction: IReaction;
  subject: IReactable;
}

interface RemoveReactionPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  reaction: <T extends Array<Selection>>(
    select: (t: ReactionSelector) => T
  ) => Field<"reaction", never, SelectionSet<T>>;

  subject: <T extends Array<Selection>>(
    select: (t: ReactableSelector) => T
  ) => Field<"subject", never, SelectionSet<T>>;
}

export const RemoveReactionPayload: RemoveReactionPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  reaction: (select) =>
    new Field(
      "reaction",
      undefined as never,
      new SelectionSet(select(Reaction))
    ),

  subject: (select) =>
    new Field(
      "subject",
      undefined as never,
      new SelectionSet(select(Reactable))
    ),
};

export interface IRemoveStarPayload {
  clientMutationId: string;
  starrable: IStarrable;
}

interface RemoveStarPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  starrable: <T extends Array<Selection>>(
    select: (t: StarrableSelector) => T
  ) => Field<"starrable", never, SelectionSet<T>>;
}

export const RemoveStarPayload: RemoveStarPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  starrable: (select) =>
    new Field(
      "starrable",
      undefined as never,
      new SelectionSet(select(Starrable))
    ),
};

export interface IRemovedFromProjectEvent extends INode {
  __typename: "RemovedFromProjectEvent";
  actor: IActor;
  createdAt: unknown;
  databaseId: number;
}

interface RemovedFromProjectEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;
}

export const isRemovedFromProjectEvent = (
  object: Record<string, any>
): object is Partial<IRemovedFromProjectEvent> => {
  return object.__typename === "RemovedFromProjectEvent";
};

export const RemovedFromProjectEvent: RemovedFromProjectEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),
};

export interface IRenamedTitleEvent extends INode {
  __typename: "RenamedTitleEvent";
  actor: IActor;
  createdAt: unknown;
  currentTitle: string;
  previousTitle: string;
  subject: IRenamedTitleSubject;
}

interface RenamedTitleEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  currentTitle: () => Field<"currentTitle">;

  id: () => Field<"id">;

  previousTitle: () => Field<"previousTitle">;

  subject: <T extends Array<Selection>>(
    select: (t: RenamedTitleSubjectSelector) => T
  ) => Field<"subject", never, SelectionSet<T>>;
}

export const isRenamedTitleEvent = (
  object: Record<string, any>
): object is Partial<IRenamedTitleEvent> => {
  return object.__typename === "RenamedTitleEvent";
};

export const RenamedTitleEvent: RenamedTitleEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  currentTitle: () => new Field("currentTitle"),
  id: () => new Field("id"),
  previousTitle: () => new Field("previousTitle"),

  subject: (select) =>
    new Field(
      "subject",
      undefined as never,
      new SelectionSet(select(RenamedTitleSubject))
    ),
};

export interface IReopenIssuePayload {
  clientMutationId: string;
  issue: IIssue;
}

interface ReopenIssuePayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  issue: <T extends Array<Selection>>(
    select: (t: IssueSelector) => T
  ) => Field<"issue", never, SelectionSet<T>>;
}

export const ReopenIssuePayload: ReopenIssuePayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  issue: (select) =>
    new Field("issue", undefined as never, new SelectionSet(select(Issue))),
};

export interface IReopenPullRequestPayload {
  clientMutationId: string;
  pullRequest: IPullRequest;
}

interface ReopenPullRequestPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const ReopenPullRequestPayload: ReopenPullRequestPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IReopenedEvent extends INode {
  __typename: "ReopenedEvent";
  actor: IActor;
  closable: IClosable;
  createdAt: unknown;
}

interface ReopenedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  closable: <T extends Array<Selection>>(
    select: (t: ClosableSelector) => T
  ) => Field<"closable", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;
}

export const isReopenedEvent = (
  object: Record<string, any>
): object is Partial<IReopenedEvent> => {
  return object.__typename === "ReopenedEvent";
};

export const ReopenedEvent: ReopenedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  closable: (select) =>
    new Field(
      "closable",
      undefined as never,
      new SelectionSet(select(Closable))
    ),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
};

export interface IRepoAccessAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoAccessAuditEntry";
  visibility: RepoAccessAuditEntryVisibility;
}

interface RepoAccessAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;

  visibility: () => Field<"visibility">;
}

export const isRepoAccessAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoAccessAuditEntry> => {
  return object.__typename === "RepoAccessAuditEntry";
};

export const RepoAccessAuditEntry: RepoAccessAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
  visibility: () => new Field("visibility"),
};

export interface IRepoAddMemberAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoAddMemberAuditEntry";
  visibility: RepoAddMemberAuditEntryVisibility;
}

interface RepoAddMemberAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;

  visibility: () => Field<"visibility">;
}

export const isRepoAddMemberAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoAddMemberAuditEntry> => {
  return object.__typename === "RepoAddMemberAuditEntry";
};

export const RepoAddMemberAuditEntry: RepoAddMemberAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
  visibility: () => new Field("visibility"),
};

export interface IRepoAddTopicAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData,
    ITopicAuditEntryData {
  __typename: "RepoAddTopicAuditEntry";
}

interface RepoAddTopicAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  topic: <T extends Array<Selection>>(
    select: (t: TopicSelector) => T
  ) => Field<"topic", never, SelectionSet<T>>;

  topicName: () => Field<"topicName">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepoAddTopicAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoAddTopicAuditEntry> => {
  return object.__typename === "RepoAddTopicAuditEntry";
};

export const RepoAddTopicAuditEntry: RepoAddTopicAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  topic: (select) =>
    new Field("topic", undefined as never, new SelectionSet(select(Topic))),

  topicName: () => new Field("topicName"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepoArchivedAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoArchivedAuditEntry";
  visibility: RepoArchivedAuditEntryVisibility;
}

interface RepoArchivedAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;

  visibility: () => Field<"visibility">;
}

export const isRepoArchivedAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoArchivedAuditEntry> => {
  return object.__typename === "RepoArchivedAuditEntry";
};

export const RepoArchivedAuditEntry: RepoArchivedAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
  visibility: () => new Field("visibility"),
};

export interface IRepoChangeMergeSettingAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoChangeMergeSettingAuditEntry";
  isEnabled: boolean;
  mergeType: RepoChangeMergeSettingAuditEntryMergeType;
}

interface RepoChangeMergeSettingAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  isEnabled: () => Field<"isEnabled">;

  mergeType: () => Field<"mergeType">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepoChangeMergeSettingAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoChangeMergeSettingAuditEntry> => {
  return object.__typename === "RepoChangeMergeSettingAuditEntry";
};

export const RepoChangeMergeSettingAuditEntry: RepoChangeMergeSettingAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  isEnabled: () => new Field("isEnabled"),
  mergeType: () => new Field("mergeType"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepoConfigDisableAnonymousGitAccessAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoConfigDisableAnonymousGitAccessAuditEntry";
}

interface RepoConfigDisableAnonymousGitAccessAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepoConfigDisableAnonymousGitAccessAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoConfigDisableAnonymousGitAccessAuditEntry> => {
  return object.__typename === "RepoConfigDisableAnonymousGitAccessAuditEntry";
};

export const RepoConfigDisableAnonymousGitAccessAuditEntry: RepoConfigDisableAnonymousGitAccessAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepoConfigDisableCollaboratorsOnlyAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoConfigDisableCollaboratorsOnlyAuditEntry";
}

interface RepoConfigDisableCollaboratorsOnlyAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepoConfigDisableCollaboratorsOnlyAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoConfigDisableCollaboratorsOnlyAuditEntry> => {
  return object.__typename === "RepoConfigDisableCollaboratorsOnlyAuditEntry";
};

export const RepoConfigDisableCollaboratorsOnlyAuditEntry: RepoConfigDisableCollaboratorsOnlyAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepoConfigDisableContributorsOnlyAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoConfigDisableContributorsOnlyAuditEntry";
}

interface RepoConfigDisableContributorsOnlyAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepoConfigDisableContributorsOnlyAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoConfigDisableContributorsOnlyAuditEntry> => {
  return object.__typename === "RepoConfigDisableContributorsOnlyAuditEntry";
};

export const RepoConfigDisableContributorsOnlyAuditEntry: RepoConfigDisableContributorsOnlyAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepoConfigDisableSockpuppetDisallowedAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoConfigDisableSockpuppetDisallowedAuditEntry";
}

interface RepoConfigDisableSockpuppetDisallowedAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepoConfigDisableSockpuppetDisallowedAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoConfigDisableSockpuppetDisallowedAuditEntry> => {
  return (
    object.__typename === "RepoConfigDisableSockpuppetDisallowedAuditEntry"
  );
};

export const RepoConfigDisableSockpuppetDisallowedAuditEntry: RepoConfigDisableSockpuppetDisallowedAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepoConfigEnableAnonymousGitAccessAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoConfigEnableAnonymousGitAccessAuditEntry";
}

interface RepoConfigEnableAnonymousGitAccessAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepoConfigEnableAnonymousGitAccessAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoConfigEnableAnonymousGitAccessAuditEntry> => {
  return object.__typename === "RepoConfigEnableAnonymousGitAccessAuditEntry";
};

export const RepoConfigEnableAnonymousGitAccessAuditEntry: RepoConfigEnableAnonymousGitAccessAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepoConfigEnableCollaboratorsOnlyAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoConfigEnableCollaboratorsOnlyAuditEntry";
}

interface RepoConfigEnableCollaboratorsOnlyAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepoConfigEnableCollaboratorsOnlyAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoConfigEnableCollaboratorsOnlyAuditEntry> => {
  return object.__typename === "RepoConfigEnableCollaboratorsOnlyAuditEntry";
};

export const RepoConfigEnableCollaboratorsOnlyAuditEntry: RepoConfigEnableCollaboratorsOnlyAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepoConfigEnableContributorsOnlyAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoConfigEnableContributorsOnlyAuditEntry";
}

interface RepoConfigEnableContributorsOnlyAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepoConfigEnableContributorsOnlyAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoConfigEnableContributorsOnlyAuditEntry> => {
  return object.__typename === "RepoConfigEnableContributorsOnlyAuditEntry";
};

export const RepoConfigEnableContributorsOnlyAuditEntry: RepoConfigEnableContributorsOnlyAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepoConfigEnableSockpuppetDisallowedAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoConfigEnableSockpuppetDisallowedAuditEntry";
}

interface RepoConfigEnableSockpuppetDisallowedAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepoConfigEnableSockpuppetDisallowedAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoConfigEnableSockpuppetDisallowedAuditEntry> => {
  return object.__typename === "RepoConfigEnableSockpuppetDisallowedAuditEntry";
};

export const RepoConfigEnableSockpuppetDisallowedAuditEntry: RepoConfigEnableSockpuppetDisallowedAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepoConfigLockAnonymousGitAccessAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoConfigLockAnonymousGitAccessAuditEntry";
}

interface RepoConfigLockAnonymousGitAccessAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepoConfigLockAnonymousGitAccessAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoConfigLockAnonymousGitAccessAuditEntry> => {
  return object.__typename === "RepoConfigLockAnonymousGitAccessAuditEntry";
};

export const RepoConfigLockAnonymousGitAccessAuditEntry: RepoConfigLockAnonymousGitAccessAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepoConfigUnlockAnonymousGitAccessAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoConfigUnlockAnonymousGitAccessAuditEntry";
}

interface RepoConfigUnlockAnonymousGitAccessAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepoConfigUnlockAnonymousGitAccessAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoConfigUnlockAnonymousGitAccessAuditEntry> => {
  return object.__typename === "RepoConfigUnlockAnonymousGitAccessAuditEntry";
};

export const RepoConfigUnlockAnonymousGitAccessAuditEntry: RepoConfigUnlockAnonymousGitAccessAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepoCreateAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoCreateAuditEntry";
  forkParentName: string;
  forkSourceName: string;
  visibility: RepoCreateAuditEntryVisibility;
}

interface RepoCreateAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  forkParentName: () => Field<"forkParentName">;

  forkSourceName: () => Field<"forkSourceName">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;

  visibility: () => Field<"visibility">;
}

export const isRepoCreateAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoCreateAuditEntry> => {
  return object.__typename === "RepoCreateAuditEntry";
};

export const RepoCreateAuditEntry: RepoCreateAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  forkParentName: () => new Field("forkParentName"),
  forkSourceName: () => new Field("forkSourceName"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
  visibility: () => new Field("visibility"),
};

export interface IRepoDestroyAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoDestroyAuditEntry";
  visibility: RepoDestroyAuditEntryVisibility;
}

interface RepoDestroyAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;

  visibility: () => Field<"visibility">;
}

export const isRepoDestroyAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoDestroyAuditEntry> => {
  return object.__typename === "RepoDestroyAuditEntry";
};

export const RepoDestroyAuditEntry: RepoDestroyAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
  visibility: () => new Field("visibility"),
};

export interface IRepoRemoveMemberAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData {
  __typename: "RepoRemoveMemberAuditEntry";
  visibility: RepoRemoveMemberAuditEntryVisibility;
}

interface RepoRemoveMemberAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;

  visibility: () => Field<"visibility">;
}

export const isRepoRemoveMemberAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoRemoveMemberAuditEntry> => {
  return object.__typename === "RepoRemoveMemberAuditEntry";
};

export const RepoRemoveMemberAuditEntry: RepoRemoveMemberAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
  visibility: () => new Field("visibility"),
};

export interface IRepoRemoveTopicAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData,
    ITopicAuditEntryData {
  __typename: "RepoRemoveTopicAuditEntry";
}

interface RepoRemoveTopicAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  topic: <T extends Array<Selection>>(
    select: (t: TopicSelector) => T
  ) => Field<"topic", never, SelectionSet<T>>;

  topicName: () => Field<"topicName">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepoRemoveTopicAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepoRemoveTopicAuditEntry> => {
  return object.__typename === "RepoRemoveTopicAuditEntry";
};

export const RepoRemoveTopicAuditEntry: RepoRemoveTopicAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  topic: (select) =>
    new Field("topic", undefined as never, new SelectionSet(select(Topic))),

  topicName: () => new Field("topicName"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepository
  extends INode,
    IPackageOwner,
    IProjectOwner,
    IRepositoryInfo,
    IStarrable,
    ISubscribable,
    IUniformResourceLocatable {
  __typename: "Repository";
  assignableUsers: IUserConnection;
  branchProtectionRules: IBranchProtectionRuleConnection;
  codeOfConduct: ICodeOfConduct;
  collaborators: IRepositoryCollaboratorConnection;
  commitComments: ICommitCommentConnection;
  contactLinks: IRepositoryContactLink[];
  databaseId: number;
  defaultBranchRef: IRef;
  deleteBranchOnMerge: boolean;
  deployKeys: IDeployKeyConnection;
  deployments: IDeploymentConnection;
  diskUsage: number;
  forks: IRepositoryConnection;
  fundingLinks: IFundingLink[];
  interactionAbility: IRepositoryInteractionAbility;
  isBlankIssuesEnabled: boolean;
  isDisabled: boolean;
  isEmpty: boolean;
  isSecurityPolicyEnabled: boolean;
  isUserConfigurationRepository: boolean;
  issue: IIssue;
  issueOrPullRequest: IIssueOrPullRequest;
  issueTemplates: IIssueTemplate[];
  issues: IIssueConnection;
  label: ILabel;
  labels: ILabelConnection;
  languages: ILanguageConnection;
  mentionableUsers: IUserConnection;
  mergeCommitAllowed: boolean;
  milestone: IMilestone;
  milestones: IMilestoneConnection;
  object: IGitObject;
  parent: IRepository;
  primaryLanguage: ILanguage;
  pullRequest: IPullRequest;
  pullRequests: IPullRequestConnection;
  rebaseMergeAllowed: boolean;
  ref: IRef;
  refs: IRefConnection;
  release: IRelease;
  releases: IReleaseConnection;
  repositoryTopics: IRepositoryTopicConnection;
  securityPolicyUrl: unknown;
  squashMergeAllowed: boolean;
  sshUrl: unknown;
  submodules: ISubmoduleConnection;
  tempCloneToken: string;
  templateRepository: IRepository;
  viewerCanAdminister: boolean;
  viewerCanUpdateTopics: boolean;
  viewerDefaultCommitEmail: string;
  viewerDefaultMergeMethod: PullRequestMergeMethod;
  viewerPermission: RepositoryPermission;
  viewerPossibleCommitEmails: string[];
  vulnerabilityAlerts: IRepositoryVulnerabilityAlertConnection;
  watchers: IUserConnection;
}

interface RepositorySelector {
  __typename: () => Field<"__typename">;

  assignableUsers: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      query?: Variable<"query"> | string;
    },
    select: (t: UserConnectionSelector) => T
  ) => Field<
    "assignableUsers",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"query", Variable<"query"> | string>
    ],
    SelectionSet<T>
  >;

  branchProtectionRules: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: BranchProtectionRuleConnectionSelector) => T
  ) => Field<
    "branchProtectionRules",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  codeOfConduct: <T extends Array<Selection>>(
    select: (t: CodeOfConductSelector) => T
  ) => Field<"codeOfConduct", never, SelectionSet<T>>;

  collaborators: <T extends Array<Selection>>(
    variables: {
      affiliation?: Variable<"affiliation"> | CollaboratorAffiliation;
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      query?: Variable<"query"> | string;
    },
    select: (t: RepositoryCollaboratorConnectionSelector) => T
  ) => Field<
    "collaborators",
    [
      Argument<
        "affiliation",
        Variable<"affiliation"> | CollaboratorAffiliation
      >,
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"query", Variable<"query"> | string>
    ],
    SelectionSet<T>
  >;

  commitComments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: CommitCommentConnectionSelector) => T
  ) => Field<
    "commitComments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  contactLinks: <T extends Array<Selection>>(
    select: (t: RepositoryContactLinkSelector) => T
  ) => Field<"contactLinks", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  defaultBranchRef: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"defaultBranchRef", never, SelectionSet<T>>;

  deleteBranchOnMerge: () => Field<"deleteBranchOnMerge">;

  deployKeys: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: DeployKeyConnectionSelector) => T
  ) => Field<
    "deployKeys",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  deployments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      environments?: Variable<"environments"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | DeploymentOrder;
    },
    select: (t: DeploymentConnectionSelector) => T
  ) => Field<
    "deployments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"environments", Variable<"environments"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | DeploymentOrder>
    ],
    SelectionSet<T>
  >;

  description: () => Field<"description">;

  descriptionHTML: () => Field<"descriptionHTML">;

  diskUsage: () => Field<"diskUsage">;

  forkCount: () => Field<"forkCount">;

  forks: <T extends Array<Selection>>(
    variables: {
      affiliations?: Variable<"affiliations"> | RepositoryAffiliation;
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      isLocked?: Variable<"isLocked"> | boolean;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | RepositoryOrder;
      ownerAffiliations?: Variable<"ownerAffiliations"> | RepositoryAffiliation;
      privacy?: Variable<"privacy"> | RepositoryPrivacy;
    },
    select: (t: RepositoryConnectionSelector) => T
  ) => Field<
    "forks",
    [
      Argument<
        "affiliations",
        Variable<"affiliations"> | RepositoryAffiliation
      >,
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"isLocked", Variable<"isLocked"> | boolean>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | RepositoryOrder>,
      Argument<
        "ownerAffiliations",
        Variable<"ownerAffiliations"> | RepositoryAffiliation
      >,
      Argument<"privacy", Variable<"privacy"> | RepositoryPrivacy>
    ],
    SelectionSet<T>
  >;

  fundingLinks: <T extends Array<Selection>>(
    select: (t: FundingLinkSelector) => T
  ) => Field<"fundingLinks", never, SelectionSet<T>>;

  hasIssuesEnabled: () => Field<"hasIssuesEnabled">;

  hasProjectsEnabled: () => Field<"hasProjectsEnabled">;

  hasWikiEnabled: () => Field<"hasWikiEnabled">;

  homepageUrl: () => Field<"homepageUrl">;

  id: () => Field<"id">;

  interactionAbility: <T extends Array<Selection>>(
    select: (t: RepositoryInteractionAbilitySelector) => T
  ) => Field<"interactionAbility", never, SelectionSet<T>>;

  isArchived: () => Field<"isArchived">;

  isBlankIssuesEnabled: () => Field<"isBlankIssuesEnabled">;

  isDisabled: () => Field<"isDisabled">;

  isEmpty: () => Field<"isEmpty">;

  isFork: () => Field<"isFork">;

  isInOrganization: () => Field<"isInOrganization">;

  isLocked: () => Field<"isLocked">;

  isMirror: () => Field<"isMirror">;

  isPrivate: () => Field<"isPrivate">;

  isSecurityPolicyEnabled: () => Field<"isSecurityPolicyEnabled">;

  isTemplate: () => Field<"isTemplate">;

  isUserConfigurationRepository: () => Field<"isUserConfigurationRepository">;

  issue: <T extends Array<Selection>>(
    variables: { number?: Variable<"number"> | number },
    select: (t: IssueSelector) => T
  ) => Field<
    "issue",
    [Argument<"number", Variable<"number"> | number>],
    SelectionSet<T>
  >;

  issueOrPullRequest: <T extends Array<Selection>>(
    variables: { number?: Variable<"number"> | number },
    select: (t: IssueOrPullRequestSelector) => T
  ) => Field<
    "issueOrPullRequest",
    [Argument<"number", Variable<"number"> | number>],
    SelectionSet<T>
  >;

  issueTemplates: <T extends Array<Selection>>(
    select: (t: IssueTemplateSelector) => T
  ) => Field<"issueTemplates", never, SelectionSet<T>>;

  issues: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      filterBy?: Variable<"filterBy"> | IssueFilters;
      first?: Variable<"first"> | number;
      labels?: Variable<"labels"> | string;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IssueOrder;
      states?: Variable<"states"> | IssueState;
    },
    select: (t: IssueConnectionSelector) => T
  ) => Field<
    "issues",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"filterBy", Variable<"filterBy"> | IssueFilters>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"labels", Variable<"labels"> | string>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IssueOrder>,
      Argument<"states", Variable<"states"> | IssueState>
    ],
    SelectionSet<T>
  >;

  label: <T extends Array<Selection>>(
    variables: { name?: Variable<"name"> | string },
    select: (t: LabelSelector) => T
  ) => Field<
    "label",
    [Argument<"name", Variable<"name"> | string>],
    SelectionSet<T>
  >;

  labels: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | LabelOrder;
      query?: Variable<"query"> | string;
    },
    select: (t: LabelConnectionSelector) => T
  ) => Field<
    "labels",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | LabelOrder>,
      Argument<"query", Variable<"query"> | string>
    ],
    SelectionSet<T>
  >;

  languages: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | LanguageOrder;
    },
    select: (t: LanguageConnectionSelector) => T
  ) => Field<
    "languages",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | LanguageOrder>
    ],
    SelectionSet<T>
  >;

  licenseInfo: <T extends Array<Selection>>(
    select: (t: LicenseSelector) => T
  ) => Field<"licenseInfo", never, SelectionSet<T>>;

  lockReason: () => Field<"lockReason">;

  mentionableUsers: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      query?: Variable<"query"> | string;
    },
    select: (t: UserConnectionSelector) => T
  ) => Field<
    "mentionableUsers",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"query", Variable<"query"> | string>
    ],
    SelectionSet<T>
  >;

  mergeCommitAllowed: () => Field<"mergeCommitAllowed">;

  milestone: <T extends Array<Selection>>(
    variables: { number?: Variable<"number"> | number },
    select: (t: MilestoneSelector) => T
  ) => Field<
    "milestone",
    [Argument<"number", Variable<"number"> | number>],
    SelectionSet<T>
  >;

  milestones: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | MilestoneOrder;
      query?: Variable<"query"> | string;
      states?: Variable<"states"> | MilestoneState;
    },
    select: (t: MilestoneConnectionSelector) => T
  ) => Field<
    "milestones",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | MilestoneOrder>,
      Argument<"query", Variable<"query"> | string>,
      Argument<"states", Variable<"states"> | MilestoneState>
    ],
    SelectionSet<T>
  >;

  mirrorUrl: () => Field<"mirrorUrl">;

  name: () => Field<"name">;

  nameWithOwner: () => Field<"nameWithOwner">;

  object: <T extends Array<Selection>>(
    variables: {
      expression?: Variable<"expression"> | string;
      oid?: Variable<"oid"> | unknown;
    },
    select: (t: GitObjectSelector) => T
  ) => Field<
    "object",
    [
      Argument<"expression", Variable<"expression"> | string>,
      Argument<"oid", Variable<"oid"> | unknown>
    ],
    SelectionSet<T>
  >;

  openGraphImageUrl: () => Field<"openGraphImageUrl">;

  owner: <T extends Array<Selection>>(
    select: (t: RepositoryOwnerSelector) => T
  ) => Field<"owner", never, SelectionSet<T>>;

  packages: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      names?: Variable<"names"> | string;
      orderBy?: Variable<"orderBy"> | PackageOrder;
      packageType?: Variable<"packageType"> | PackageType;
      repositoryId?: Variable<"repositoryId"> | string;
    },
    select: (t: PackageConnectionSelector) => T
  ) => Field<
    "packages",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"names", Variable<"names"> | string>,
      Argument<"orderBy", Variable<"orderBy"> | PackageOrder>,
      Argument<"packageType", Variable<"packageType"> | PackageType>,
      Argument<"repositoryId", Variable<"repositoryId"> | string>
    ],
    SelectionSet<T>
  >;

  parent: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"parent", never, SelectionSet<T>>;

  primaryLanguage: <T extends Array<Selection>>(
    select: (t: LanguageSelector) => T
  ) => Field<"primaryLanguage", never, SelectionSet<T>>;

  project: <T extends Array<Selection>>(
    variables: { number?: Variable<"number"> | number },
    select: (t: ProjectSelector) => T
  ) => Field<
    "project",
    [Argument<"number", Variable<"number"> | number>],
    SelectionSet<T>
  >;

  projects: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ProjectOrder;
      search?: Variable<"search"> | string;
      states?: Variable<"states"> | ProjectState;
    },
    select: (t: ProjectConnectionSelector) => T
  ) => Field<
    "projects",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ProjectOrder>,
      Argument<"search", Variable<"search"> | string>,
      Argument<"states", Variable<"states"> | ProjectState>
    ],
    SelectionSet<T>
  >;

  projectsResourcePath: () => Field<"projectsResourcePath">;

  projectsUrl: () => Field<"projectsUrl">;

  pullRequest: <T extends Array<Selection>>(
    variables: { number?: Variable<"number"> | number },
    select: (t: PullRequestSelector) => T
  ) => Field<
    "pullRequest",
    [Argument<"number", Variable<"number"> | number>],
    SelectionSet<T>
  >;

  pullRequests: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      baseRefName?: Variable<"baseRefName"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      headRefName?: Variable<"headRefName"> | string;
      labels?: Variable<"labels"> | string;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IssueOrder;
      states?: Variable<"states"> | PullRequestState;
    },
    select: (t: PullRequestConnectionSelector) => T
  ) => Field<
    "pullRequests",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"baseRefName", Variable<"baseRefName"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"headRefName", Variable<"headRefName"> | string>,
      Argument<"labels", Variable<"labels"> | string>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IssueOrder>,
      Argument<"states", Variable<"states"> | PullRequestState>
    ],
    SelectionSet<T>
  >;

  pushedAt: () => Field<"pushedAt">;

  rebaseMergeAllowed: () => Field<"rebaseMergeAllowed">;

  ref: <T extends Array<Selection>>(
    variables: { qualifiedName?: Variable<"qualifiedName"> | string },
    select: (t: RefSelector) => T
  ) => Field<
    "ref",
    [Argument<"qualifiedName", Variable<"qualifiedName"> | string>],
    SelectionSet<T>
  >;

  refs: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      direction?: Variable<"direction"> | OrderDirection;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | RefOrder;
      query?: Variable<"query"> | string;
      refPrefix?: Variable<"refPrefix"> | string;
    },
    select: (t: RefConnectionSelector) => T
  ) => Field<
    "refs",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"direction", Variable<"direction"> | OrderDirection>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | RefOrder>,
      Argument<"query", Variable<"query"> | string>,
      Argument<"refPrefix", Variable<"refPrefix"> | string>
    ],
    SelectionSet<T>
  >;

  release: <T extends Array<Selection>>(
    variables: { tagName?: Variable<"tagName"> | string },
    select: (t: ReleaseSelector) => T
  ) => Field<
    "release",
    [Argument<"tagName", Variable<"tagName"> | string>],
    SelectionSet<T>
  >;

  releases: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ReleaseOrder;
    },
    select: (t: ReleaseConnectionSelector) => T
  ) => Field<
    "releases",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ReleaseOrder>
    ],
    SelectionSet<T>
  >;

  repositoryTopics: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: RepositoryTopicConnectionSelector) => T
  ) => Field<
    "repositoryTopics",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  resourcePath: () => Field<"resourcePath">;

  securityPolicyUrl: () => Field<"securityPolicyUrl">;

  shortDescriptionHTML: (variables: {
    limit: unknown;
  }) => Field<"shortDescriptionHTML", [/* @todo */]>;

  squashMergeAllowed: () => Field<"squashMergeAllowed">;

  sshUrl: () => Field<"sshUrl">;

  stargazerCount: () => Field<"stargazerCount">;

  stargazers: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | StarOrder;
    },
    select: (t: StargazerConnectionSelector) => T
  ) => Field<
    "stargazers",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | StarOrder>
    ],
    SelectionSet<T>
  >;

  submodules: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: SubmoduleConnectionSelector) => T
  ) => Field<
    "submodules",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  tempCloneToken: () => Field<"tempCloneToken">;

  templateRepository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"templateRepository", never, SelectionSet<T>>;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  usesCustomOpenGraphImage: () => Field<"usesCustomOpenGraphImage">;

  viewerCanAdminister: () => Field<"viewerCanAdminister">;

  viewerCanCreateProjects: () => Field<"viewerCanCreateProjects">;

  viewerCanSubscribe: () => Field<"viewerCanSubscribe">;

  viewerCanUpdateTopics: () => Field<"viewerCanUpdateTopics">;

  viewerDefaultCommitEmail: () => Field<"viewerDefaultCommitEmail">;

  viewerDefaultMergeMethod: () => Field<"viewerDefaultMergeMethod">;

  viewerHasStarred: () => Field<"viewerHasStarred">;

  viewerPermission: () => Field<"viewerPermission">;

  viewerPossibleCommitEmails: () => Field<"viewerPossibleCommitEmails">;

  viewerSubscription: () => Field<"viewerSubscription">;

  vulnerabilityAlerts: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: RepositoryVulnerabilityAlertConnectionSelector) => T
  ) => Field<
    "vulnerabilityAlerts",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  watchers: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserConnectionSelector) => T
  ) => Field<
    "watchers",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;
}

export const isRepository = (
  object: Record<string, any>
): object is Partial<IRepository> => {
  return object.__typename === "Repository";
};

export const Repository: RepositorySelector = {
  __typename: () => new Field("__typename"),

  assignableUsers: (variables, select) =>
    new Field(
      "assignableUsers",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("query", variables.query),
      ],
      new SelectionSet(select(UserConnection))
    ),

  branchProtectionRules: (variables, select) =>
    new Field(
      "branchProtectionRules",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(BranchProtectionRuleConnection))
    ),

  codeOfConduct: (select) =>
    new Field(
      "codeOfConduct",
      undefined as never,
      new SelectionSet(select(CodeOfConduct))
    ),

  collaborators: (variables, select) =>
    new Field(
      "collaborators",
      [
        new Argument(
          "affiliation",
          variables.affiliation,
          CollaboratorAffiliation
        ),
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("query", variables.query),
      ],
      new SelectionSet(select(RepositoryCollaboratorConnection))
    ),

  commitComments: (variables, select) =>
    new Field(
      "commitComments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(CommitCommentConnection))
    ),

  contactLinks: (select) =>
    new Field(
      "contactLinks",
      undefined as never,
      new SelectionSet(select(RepositoryContactLink))
    ),

  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),

  defaultBranchRef: (select) =>
    new Field(
      "defaultBranchRef",
      undefined as never,
      new SelectionSet(select(Ref))
    ),

  deleteBranchOnMerge: () => new Field("deleteBranchOnMerge"),

  deployKeys: (variables, select) =>
    new Field(
      "deployKeys",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(DeployKeyConnection))
    ),

  deployments: (variables, select) =>
    new Field(
      "deployments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("environments", variables.environments),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(DeploymentConnection))
    ),

  description: () => new Field("description"),
  descriptionHTML: () => new Field("descriptionHTML"),
  diskUsage: () => new Field("diskUsage"),
  forkCount: () => new Field("forkCount"),

  forks: (variables, select) =>
    new Field(
      "forks",
      [
        new Argument(
          "affiliations",
          variables.affiliations,
          RepositoryAffiliation
        ),
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("isLocked", variables.isLocked),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument(
          "ownerAffiliations",
          variables.ownerAffiliations,
          RepositoryAffiliation
        ),
        new Argument("privacy", variables.privacy, RepositoryPrivacy),
      ],
      new SelectionSet(select(RepositoryConnection))
    ),

  fundingLinks: (select) =>
    new Field(
      "fundingLinks",
      undefined as never,
      new SelectionSet(select(FundingLink))
    ),

  hasIssuesEnabled: () => new Field("hasIssuesEnabled"),
  hasProjectsEnabled: () => new Field("hasProjectsEnabled"),
  hasWikiEnabled: () => new Field("hasWikiEnabled"),
  homepageUrl: () => new Field("homepageUrl"),
  id: () => new Field("id"),

  interactionAbility: (select) =>
    new Field(
      "interactionAbility",
      undefined as never,
      new SelectionSet(select(RepositoryInteractionAbility))
    ),

  isArchived: () => new Field("isArchived"),
  isBlankIssuesEnabled: () => new Field("isBlankIssuesEnabled"),
  isDisabled: () => new Field("isDisabled"),
  isEmpty: () => new Field("isEmpty"),
  isFork: () => new Field("isFork"),
  isInOrganization: () => new Field("isInOrganization"),
  isLocked: () => new Field("isLocked"),
  isMirror: () => new Field("isMirror"),
  isPrivate: () => new Field("isPrivate"),
  isSecurityPolicyEnabled: () => new Field("isSecurityPolicyEnabled"),
  isTemplate: () => new Field("isTemplate"),
  isUserConfigurationRepository: () =>
    new Field("isUserConfigurationRepository"),

  issue: (variables, select) =>
    new Field(
      "issue",
      [new Argument("number", variables.number)],
      new SelectionSet(select(Issue))
    ),

  issueOrPullRequest: (variables, select) =>
    new Field(
      "issueOrPullRequest",
      [new Argument("number", variables.number)],
      new SelectionSet(select(IssueOrPullRequest))
    ),

  issueTemplates: (select) =>
    new Field(
      "issueTemplates",
      undefined as never,
      new SelectionSet(select(IssueTemplate))
    ),

  issues: (variables, select) =>
    new Field(
      "issues",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("filterBy", variables.filterBy),
        new Argument("first", variables.first),
        new Argument("labels", variables.labels),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("states", variables.states, IssueState),
      ],
      new SelectionSet(select(IssueConnection))
    ),

  label: (variables, select) =>
    new Field(
      "label",
      [new Argument("name", variables.name)],
      new SelectionSet(select(Label))
    ),

  labels: (variables, select) =>
    new Field(
      "labels",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("query", variables.query),
      ],
      new SelectionSet(select(LabelConnection))
    ),

  languages: (variables, select) =>
    new Field(
      "languages",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(LanguageConnection))
    ),

  licenseInfo: (select) =>
    new Field(
      "licenseInfo",
      undefined as never,
      new SelectionSet(select(License))
    ),

  lockReason: () => new Field("lockReason"),

  mentionableUsers: (variables, select) =>
    new Field(
      "mentionableUsers",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("query", variables.query),
      ],
      new SelectionSet(select(UserConnection))
    ),

  mergeCommitAllowed: () => new Field("mergeCommitAllowed"),

  milestone: (variables, select) =>
    new Field(
      "milestone",
      [new Argument("number", variables.number)],
      new SelectionSet(select(Milestone))
    ),

  milestones: (variables, select) =>
    new Field(
      "milestones",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("query", variables.query),
        new Argument("states", variables.states, MilestoneState),
      ],
      new SelectionSet(select(MilestoneConnection))
    ),

  mirrorUrl: () => new Field("mirrorUrl"),
  name: () => new Field("name"),
  nameWithOwner: () => new Field("nameWithOwner"),

  object: (variables, select) =>
    new Field(
      "object",
      [
        new Argument("expression", variables.expression),
        new Argument("oid", variables.oid),
      ],
      new SelectionSet(select(GitObject))
    ),

  openGraphImageUrl: () => new Field("openGraphImageUrl"),

  owner: (select) =>
    new Field(
      "owner",
      undefined as never,
      new SelectionSet(select(RepositoryOwner))
    ),

  packages: (variables, select) =>
    new Field(
      "packages",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("names", variables.names),
        new Argument("orderBy", variables.orderBy),
        new Argument("packageType", variables.packageType, PackageType),
        new Argument("repositoryId", variables.repositoryId),
      ],
      new SelectionSet(select(PackageConnection))
    ),

  parent: (select) =>
    new Field(
      "parent",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  primaryLanguage: (select) =>
    new Field(
      "primaryLanguage",
      undefined as never,
      new SelectionSet(select(Language))
    ),

  project: (variables, select) =>
    new Field(
      "project",
      [new Argument("number", variables.number)],
      new SelectionSet(select(Project))
    ),

  projects: (variables, select) =>
    new Field(
      "projects",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("search", variables.search),
        new Argument("states", variables.states, ProjectState),
      ],
      new SelectionSet(select(ProjectConnection))
    ),

  projectsResourcePath: () => new Field("projectsResourcePath"),
  projectsUrl: () => new Field("projectsUrl"),

  pullRequest: (variables, select) =>
    new Field(
      "pullRequest",
      [new Argument("number", variables.number)],
      new SelectionSet(select(PullRequest))
    ),

  pullRequests: (variables, select) =>
    new Field(
      "pullRequests",
      [
        new Argument("after", variables.after),
        new Argument("baseRefName", variables.baseRefName),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("headRefName", variables.headRefName),
        new Argument("labels", variables.labels),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("states", variables.states, PullRequestState),
      ],
      new SelectionSet(select(PullRequestConnection))
    ),

  pushedAt: () => new Field("pushedAt"),
  rebaseMergeAllowed: () => new Field("rebaseMergeAllowed"),

  ref: (variables, select) =>
    new Field(
      "ref",
      [new Argument("qualifiedName", variables.qualifiedName)],
      new SelectionSet(select(Ref))
    ),

  refs: (variables, select) =>
    new Field(
      "refs",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("direction", variables.direction, OrderDirection),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("query", variables.query),
        new Argument("refPrefix", variables.refPrefix),
      ],
      new SelectionSet(select(RefConnection))
    ),

  release: (variables, select) =>
    new Field(
      "release",
      [new Argument("tagName", variables.tagName)],
      new SelectionSet(select(Release))
    ),

  releases: (variables, select) =>
    new Field(
      "releases",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(ReleaseConnection))
    ),

  repositoryTopics: (variables, select) =>
    new Field(
      "repositoryTopics",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(RepositoryTopicConnection))
    ),

  resourcePath: () => new Field("resourcePath"),
  securityPolicyUrl: () => new Field("securityPolicyUrl"),
  shortDescriptionHTML: (variables) => new Field("shortDescriptionHTML"),
  squashMergeAllowed: () => new Field("squashMergeAllowed"),
  sshUrl: () => new Field("sshUrl"),
  stargazerCount: () => new Field("stargazerCount"),

  stargazers: (variables, select) =>
    new Field(
      "stargazers",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(StargazerConnection))
    ),

  submodules: (variables, select) =>
    new Field(
      "submodules",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(SubmoduleConnection))
    ),

  tempCloneToken: () => new Field("tempCloneToken"),

  templateRepository: (select) =>
    new Field(
      "templateRepository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
  usesCustomOpenGraphImage: () => new Field("usesCustomOpenGraphImage"),
  viewerCanAdminister: () => new Field("viewerCanAdminister"),
  viewerCanCreateProjects: () => new Field("viewerCanCreateProjects"),
  viewerCanSubscribe: () => new Field("viewerCanSubscribe"),
  viewerCanUpdateTopics: () => new Field("viewerCanUpdateTopics"),
  viewerDefaultCommitEmail: () => new Field("viewerDefaultCommitEmail"),
  viewerDefaultMergeMethod: () => new Field("viewerDefaultMergeMethod"),
  viewerHasStarred: () => new Field("viewerHasStarred"),
  viewerPermission: () => new Field("viewerPermission"),
  viewerPossibleCommitEmails: () => new Field("viewerPossibleCommitEmails"),
  viewerSubscription: () => new Field("viewerSubscription"),

  vulnerabilityAlerts: (variables, select) =>
    new Field(
      "vulnerabilityAlerts",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(RepositoryVulnerabilityAlertConnection))
    ),

  watchers: (variables, select) =>
    new Field(
      "watchers",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserConnection))
    ),
};

export interface IRepositoryAuditEntryData {
  __typename: string;
  repository: IRepository;
  repositoryName: string;
  repositoryResourcePath: unknown;
  repositoryUrl: unknown;
}

interface RepositoryAuditEntryDataSelector {
  __typename: () => Field<"__typename">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  on: <
    T extends Array<Selection>,
    F extends
      | "OrgRestoreMemberMembershipRepositoryAuditEntryData"
      | "PrivateRepositoryForkingDisableAuditEntry"
      | "PrivateRepositoryForkingEnableAuditEntry"
      | "RepoAccessAuditEntry"
      | "RepoAddMemberAuditEntry"
      | "RepoAddTopicAuditEntry"
      | "RepoArchivedAuditEntry"
      | "RepoChangeMergeSettingAuditEntry"
      | "RepoConfigDisableAnonymousGitAccessAuditEntry"
      | "RepoConfigDisableCollaboratorsOnlyAuditEntry"
      | "RepoConfigDisableContributorsOnlyAuditEntry"
      | "RepoConfigDisableSockpuppetDisallowedAuditEntry"
      | "RepoConfigEnableAnonymousGitAccessAuditEntry"
      | "RepoConfigEnableCollaboratorsOnlyAuditEntry"
      | "RepoConfigEnableContributorsOnlyAuditEntry"
      | "RepoConfigEnableSockpuppetDisallowedAuditEntry"
      | "RepoConfigLockAnonymousGitAccessAuditEntry"
      | "RepoConfigUnlockAnonymousGitAccessAuditEntry"
      | "RepoCreateAuditEntry"
      | "RepoDestroyAuditEntry"
      | "RepoRemoveMemberAuditEntry"
      | "RepoRemoveTopicAuditEntry"
      | "TeamAddRepositoryAuditEntry"
      | "TeamRemoveRepositoryAuditEntry"
  >(
    type: F,
    select: (
      t: F extends "OrgRestoreMemberMembershipRepositoryAuditEntryData"
        ? OrgRestoreMemberMembershipRepositoryAuditEntryDataSelector
        : F extends "PrivateRepositoryForkingDisableAuditEntry"
        ? PrivateRepositoryForkingDisableAuditEntrySelector
        : F extends "PrivateRepositoryForkingEnableAuditEntry"
        ? PrivateRepositoryForkingEnableAuditEntrySelector
        : F extends "RepoAccessAuditEntry"
        ? RepoAccessAuditEntrySelector
        : F extends "RepoAddMemberAuditEntry"
        ? RepoAddMemberAuditEntrySelector
        : F extends "RepoAddTopicAuditEntry"
        ? RepoAddTopicAuditEntrySelector
        : F extends "RepoArchivedAuditEntry"
        ? RepoArchivedAuditEntrySelector
        : F extends "RepoChangeMergeSettingAuditEntry"
        ? RepoChangeMergeSettingAuditEntrySelector
        : F extends "RepoConfigDisableAnonymousGitAccessAuditEntry"
        ? RepoConfigDisableAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigDisableCollaboratorsOnlyAuditEntry"
        ? RepoConfigDisableCollaboratorsOnlyAuditEntrySelector
        : F extends "RepoConfigDisableContributorsOnlyAuditEntry"
        ? RepoConfigDisableContributorsOnlyAuditEntrySelector
        : F extends "RepoConfigDisableSockpuppetDisallowedAuditEntry"
        ? RepoConfigDisableSockpuppetDisallowedAuditEntrySelector
        : F extends "RepoConfigEnableAnonymousGitAccessAuditEntry"
        ? RepoConfigEnableAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigEnableCollaboratorsOnlyAuditEntry"
        ? RepoConfigEnableCollaboratorsOnlyAuditEntrySelector
        : F extends "RepoConfigEnableContributorsOnlyAuditEntry"
        ? RepoConfigEnableContributorsOnlyAuditEntrySelector
        : F extends "RepoConfigEnableSockpuppetDisallowedAuditEntry"
        ? RepoConfigEnableSockpuppetDisallowedAuditEntrySelector
        : F extends "RepoConfigLockAnonymousGitAccessAuditEntry"
        ? RepoConfigLockAnonymousGitAccessAuditEntrySelector
        : F extends "RepoConfigUnlockAnonymousGitAccessAuditEntry"
        ? RepoConfigUnlockAnonymousGitAccessAuditEntrySelector
        : F extends "RepoCreateAuditEntry"
        ? RepoCreateAuditEntrySelector
        : F extends "RepoDestroyAuditEntry"
        ? RepoDestroyAuditEntrySelector
        : F extends "RepoRemoveMemberAuditEntry"
        ? RepoRemoveMemberAuditEntrySelector
        : F extends "RepoRemoveTopicAuditEntry"
        ? RepoRemoveTopicAuditEntrySelector
        : F extends "TeamAddRepositoryAuditEntry"
        ? TeamAddRepositoryAuditEntrySelector
        : F extends "TeamRemoveRepositoryAuditEntry"
        ? TeamRemoveRepositoryAuditEntrySelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const RepositoryAuditEntryData: RepositoryAuditEntryDataSelector = {
  __typename: () => new Field("__typename"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  on: (type, select) => {
    switch (type) {
      case "OrgRestoreMemberMembershipRepositoryAuditEntryData": {
        return new InlineFragment(
          new NamedType(
            "OrgRestoreMemberMembershipRepositoryAuditEntryData"
          ) as any,
          new SelectionSet(
            select(OrgRestoreMemberMembershipRepositoryAuditEntryData as any)
          )
        );
      }

      case "PrivateRepositoryForkingDisableAuditEntry": {
        return new InlineFragment(
          new NamedType("PrivateRepositoryForkingDisableAuditEntry") as any,
          new SelectionSet(
            select(PrivateRepositoryForkingDisableAuditEntry as any)
          )
        );
      }

      case "PrivateRepositoryForkingEnableAuditEntry": {
        return new InlineFragment(
          new NamedType("PrivateRepositoryForkingEnableAuditEntry") as any,
          new SelectionSet(
            select(PrivateRepositoryForkingEnableAuditEntry as any)
          )
        );
      }

      case "RepoAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAccessAuditEntry") as any,
          new SelectionSet(select(RepoAccessAuditEntry as any))
        );
      }

      case "RepoAddMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAddMemberAuditEntry") as any,
          new SelectionSet(select(RepoAddMemberAuditEntry as any))
        );
      }

      case "RepoAddTopicAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAddTopicAuditEntry") as any,
          new SelectionSet(select(RepoAddTopicAuditEntry as any))
        );
      }

      case "RepoArchivedAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoArchivedAuditEntry") as any,
          new SelectionSet(select(RepoArchivedAuditEntry as any))
        );
      }

      case "RepoChangeMergeSettingAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoChangeMergeSettingAuditEntry") as any,
          new SelectionSet(select(RepoChangeMergeSettingAuditEntry as any))
        );
      }

      case "RepoConfigDisableAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableContributorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigDisableContributorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigDisableContributorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigDisableSockpuppetDisallowedAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "RepoConfigDisableSockpuppetDisallowedAuditEntry"
          ) as any,
          new SelectionSet(
            select(RepoConfigDisableSockpuppetDisallowedAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableCollaboratorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableCollaboratorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableCollaboratorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableContributorsOnlyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigEnableContributorsOnlyAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigEnableContributorsOnlyAuditEntry as any)
          )
        );
      }

      case "RepoConfigEnableSockpuppetDisallowedAuditEntry": {
        return new InlineFragment(
          new NamedType(
            "RepoConfigEnableSockpuppetDisallowedAuditEntry"
          ) as any,
          new SelectionSet(
            select(RepoConfigEnableSockpuppetDisallowedAuditEntry as any)
          )
        );
      }

      case "RepoConfigLockAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigLockAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigLockAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoConfigUnlockAnonymousGitAccessAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoConfigUnlockAnonymousGitAccessAuditEntry") as any,
          new SelectionSet(
            select(RepoConfigUnlockAnonymousGitAccessAuditEntry as any)
          )
        );
      }

      case "RepoCreateAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoCreateAuditEntry") as any,
          new SelectionSet(select(RepoCreateAuditEntry as any))
        );
      }

      case "RepoDestroyAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoDestroyAuditEntry") as any,
          new SelectionSet(select(RepoDestroyAuditEntry as any))
        );
      }

      case "RepoRemoveMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoRemoveMemberAuditEntry") as any,
          new SelectionSet(select(RepoRemoveMemberAuditEntry as any))
        );
      }

      case "RepoRemoveTopicAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoRemoveTopicAuditEntry") as any,
          new SelectionSet(select(RepoRemoveTopicAuditEntry as any))
        );
      }

      case "TeamAddRepositoryAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamAddRepositoryAuditEntry") as any,
          new SelectionSet(select(TeamAddRepositoryAuditEntry as any))
        );
      }

      case "TeamRemoveRepositoryAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamRemoveRepositoryAuditEntry") as any,
          new SelectionSet(select(TeamRemoveRepositoryAuditEntry as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IRepositoryCollaboratorConnection {
  edges: IRepositoryCollaboratorEdge[];
  nodes: IUser[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface RepositoryCollaboratorConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: RepositoryCollaboratorEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const RepositoryCollaboratorConnection: RepositoryCollaboratorConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(RepositoryCollaboratorEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(User))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IRepositoryCollaboratorEdge {
  cursor: string;
  node: IUser;
  permission: RepositoryPermission;
  permissionSources: IPermissionSource[];
}

interface RepositoryCollaboratorEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;

  permission: () => Field<"permission">;

  permissionSources: <T extends Array<Selection>>(
    select: (t: PermissionSourceSelector) => T
  ) => Field<"permissionSources", never, SelectionSet<T>>;
}

export const RepositoryCollaboratorEdge: RepositoryCollaboratorEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(User))),

  permission: () => new Field("permission"),

  permissionSources: (select) =>
    new Field(
      "permissionSources",
      undefined as never,
      new SelectionSet(select(PermissionSource))
    ),
};

export interface IRepositoryConnection {
  edges: IRepositoryEdge[];
  nodes: IRepository[];
  pageInfo: IPageInfo;
  totalCount: number;
  totalDiskUsage: number;
}

interface RepositoryConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: RepositoryEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;

  totalDiskUsage: () => Field<"totalDiskUsage">;
}

export const RepositoryConnection: RepositoryConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(RepositoryEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
  totalDiskUsage: () => new Field("totalDiskUsage"),
};

export interface IRepositoryContactLink {
  about: string;
  name: string;
  url: unknown;
}

interface RepositoryContactLinkSelector {
  __typename: () => Field<"__typename">;

  about: () => Field<"about">;

  name: () => Field<"name">;

  url: () => Field<"url">;
}

export const RepositoryContactLink: RepositoryContactLinkSelector = {
  __typename: () => new Field("__typename"),

  about: () => new Field("about"),
  name: () => new Field("name"),
  url: () => new Field("url"),
};

export interface IRepositoryEdge {
  cursor: string;
  node: IRepository;
}

interface RepositoryEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const RepositoryEdge: RepositoryEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Repository))),
};

export interface IRepositoryInfo {
  __typename: string;
  createdAt: unknown;
  description: string;
  descriptionHTML: unknown;
  forkCount: number;
  hasIssuesEnabled: boolean;
  hasProjectsEnabled: boolean;
  hasWikiEnabled: boolean;
  homepageUrl: unknown;
  isArchived: boolean;
  isFork: boolean;
  isInOrganization: boolean;
  isLocked: boolean;
  isMirror: boolean;
  isPrivate: boolean;
  isTemplate: boolean;
  licenseInfo: ILicense;
  lockReason: RepositoryLockReason;
  mirrorUrl: unknown;
  name: string;
  nameWithOwner: string;
  openGraphImageUrl: unknown;
  owner: IRepositoryOwner;
  pushedAt: unknown;
  resourcePath: unknown;
  shortDescriptionHTML: unknown;
  updatedAt: unknown;
  url: unknown;
  usesCustomOpenGraphImage: boolean;
}

interface RepositoryInfoSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  description: () => Field<"description">;

  descriptionHTML: () => Field<"descriptionHTML">;

  forkCount: () => Field<"forkCount">;

  hasIssuesEnabled: () => Field<"hasIssuesEnabled">;

  hasProjectsEnabled: () => Field<"hasProjectsEnabled">;

  hasWikiEnabled: () => Field<"hasWikiEnabled">;

  homepageUrl: () => Field<"homepageUrl">;

  isArchived: () => Field<"isArchived">;

  isFork: () => Field<"isFork">;

  isInOrganization: () => Field<"isInOrganization">;

  isLocked: () => Field<"isLocked">;

  isMirror: () => Field<"isMirror">;

  isPrivate: () => Field<"isPrivate">;

  isTemplate: () => Field<"isTemplate">;

  licenseInfo: <T extends Array<Selection>>(
    select: (t: LicenseSelector) => T
  ) => Field<"licenseInfo", never, SelectionSet<T>>;

  lockReason: () => Field<"lockReason">;

  mirrorUrl: () => Field<"mirrorUrl">;

  name: () => Field<"name">;

  nameWithOwner: () => Field<"nameWithOwner">;

  openGraphImageUrl: () => Field<"openGraphImageUrl">;

  owner: <T extends Array<Selection>>(
    select: (t: RepositoryOwnerSelector) => T
  ) => Field<"owner", never, SelectionSet<T>>;

  pushedAt: () => Field<"pushedAt">;

  resourcePath: () => Field<"resourcePath">;

  shortDescriptionHTML: (variables: {
    limit: unknown;
  }) => Field<"shortDescriptionHTML", [/* @todo */]>;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  usesCustomOpenGraphImage: () => Field<"usesCustomOpenGraphImage">;

  on: <T extends Array<Selection>, F extends "Repository">(
    type: F,
    select: (t: RepositorySelector) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const RepositoryInfo: RepositoryInfoSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),
  description: () => new Field("description"),
  descriptionHTML: () => new Field("descriptionHTML"),
  forkCount: () => new Field("forkCount"),
  hasIssuesEnabled: () => new Field("hasIssuesEnabled"),
  hasProjectsEnabled: () => new Field("hasProjectsEnabled"),
  hasWikiEnabled: () => new Field("hasWikiEnabled"),
  homepageUrl: () => new Field("homepageUrl"),
  isArchived: () => new Field("isArchived"),
  isFork: () => new Field("isFork"),
  isInOrganization: () => new Field("isInOrganization"),
  isLocked: () => new Field("isLocked"),
  isMirror: () => new Field("isMirror"),
  isPrivate: () => new Field("isPrivate"),
  isTemplate: () => new Field("isTemplate"),

  licenseInfo: (select) =>
    new Field(
      "licenseInfo",
      undefined as never,
      new SelectionSet(select(License))
    ),

  lockReason: () => new Field("lockReason"),
  mirrorUrl: () => new Field("mirrorUrl"),
  name: () => new Field("name"),
  nameWithOwner: () => new Field("nameWithOwner"),
  openGraphImageUrl: () => new Field("openGraphImageUrl"),

  owner: (select) =>
    new Field(
      "owner",
      undefined as never,
      new SelectionSet(select(RepositoryOwner))
    ),

  pushedAt: () => new Field("pushedAt"),
  resourcePath: () => new Field("resourcePath"),
  shortDescriptionHTML: (variables) => new Field("shortDescriptionHTML"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
  usesCustomOpenGraphImage: () => new Field("usesCustomOpenGraphImage"),

  on: (type, select) => {
    switch (type) {
      case "Repository": {
        return new InlineFragment(
          new NamedType("Repository") as any,
          new SelectionSet(select(Repository as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IRepositoryInteractionAbility {
  expiresAt: unknown;
  limit: RepositoryInteractionLimit;
  origin: RepositoryInteractionLimitOrigin;
}

interface RepositoryInteractionAbilitySelector {
  __typename: () => Field<"__typename">;

  expiresAt: () => Field<"expiresAt">;

  limit: () => Field<"limit">;

  origin: () => Field<"origin">;
}

export const RepositoryInteractionAbility: RepositoryInteractionAbilitySelector = {
  __typename: () => new Field("__typename"),

  expiresAt: () => new Field("expiresAt"),
  limit: () => new Field("limit"),
  origin: () => new Field("origin"),
};

export interface IRepositoryInvitation extends INode {
  __typename: "RepositoryInvitation";
  email: string;
  invitee: IUser;
  inviter: IUser;
  permalink: unknown;
  permission: RepositoryPermission;
  repository: IRepositoryInfo;
}

interface RepositoryInvitationSelector {
  __typename: () => Field<"__typename">;

  email: () => Field<"email">;

  id: () => Field<"id">;

  invitee: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"invitee", never, SelectionSet<T>>;

  inviter: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"inviter", never, SelectionSet<T>>;

  permalink: () => Field<"permalink">;

  permission: () => Field<"permission">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositoryInfoSelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const isRepositoryInvitation = (
  object: Record<string, any>
): object is Partial<IRepositoryInvitation> => {
  return object.__typename === "RepositoryInvitation";
};

export const RepositoryInvitation: RepositoryInvitationSelector = {
  __typename: () => new Field("__typename"),

  email: () => new Field("email"),
  id: () => new Field("id"),

  invitee: (select) =>
    new Field("invitee", undefined as never, new SelectionSet(select(User))),

  inviter: (select) =>
    new Field("inviter", undefined as never, new SelectionSet(select(User))),

  permalink: () => new Field("permalink"),
  permission: () => new Field("permission"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(RepositoryInfo))
    ),
};

export interface IRepositoryInvitationConnection {
  edges: IRepositoryInvitationEdge[];
  nodes: IRepositoryInvitation[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface RepositoryInvitationConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: RepositoryInvitationEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: RepositoryInvitationSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const RepositoryInvitationConnection: RepositoryInvitationConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(RepositoryInvitationEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(RepositoryInvitation))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IRepositoryInvitationEdge {
  cursor: string;
  node: IRepositoryInvitation;
}

interface RepositoryInvitationEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: RepositoryInvitationSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const RepositoryInvitationEdge: RepositoryInvitationEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(RepositoryInvitation))
    ),
};

export interface IRepositoryNode {
  __typename: string;
  repository: IRepository;
}

interface RepositoryNodeSelector {
  __typename: () => Field<"__typename">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  on: <
    T extends Array<Selection>,
    F extends
      | "CommitComment"
      | "CommitCommentThread"
      | "Issue"
      | "IssueComment"
      | "PullRequest"
      | "PullRequestCommitCommentThread"
      | "PullRequestReview"
      | "PullRequestReviewComment"
      | "RepositoryVulnerabilityAlert"
  >(
    type: F,
    select: (
      t: F extends "CommitComment"
        ? CommitCommentSelector
        : F extends "CommitCommentThread"
        ? CommitCommentThreadSelector
        : F extends "Issue"
        ? IssueSelector
        : F extends "IssueComment"
        ? IssueCommentSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : F extends "PullRequestCommitCommentThread"
        ? PullRequestCommitCommentThreadSelector
        : F extends "PullRequestReview"
        ? PullRequestReviewSelector
        : F extends "PullRequestReviewComment"
        ? PullRequestReviewCommentSelector
        : F extends "RepositoryVulnerabilityAlert"
        ? RepositoryVulnerabilityAlertSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const RepositoryNode: RepositoryNodeSelector = {
  __typename: () => new Field("__typename"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  on: (type, select) => {
    switch (type) {
      case "CommitComment": {
        return new InlineFragment(
          new NamedType("CommitComment") as any,
          new SelectionSet(select(CommitComment as any))
        );
      }

      case "CommitCommentThread": {
        return new InlineFragment(
          new NamedType("CommitCommentThread") as any,
          new SelectionSet(select(CommitCommentThread as any))
        );
      }

      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "IssueComment": {
        return new InlineFragment(
          new NamedType("IssueComment") as any,
          new SelectionSet(select(IssueComment as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      case "PullRequestCommitCommentThread": {
        return new InlineFragment(
          new NamedType("PullRequestCommitCommentThread") as any,
          new SelectionSet(select(PullRequestCommitCommentThread as any))
        );
      }

      case "PullRequestReview": {
        return new InlineFragment(
          new NamedType("PullRequestReview") as any,
          new SelectionSet(select(PullRequestReview as any))
        );
      }

      case "PullRequestReviewComment": {
        return new InlineFragment(
          new NamedType("PullRequestReviewComment") as any,
          new SelectionSet(select(PullRequestReviewComment as any))
        );
      }

      case "RepositoryVulnerabilityAlert": {
        return new InlineFragment(
          new NamedType("RepositoryVulnerabilityAlert") as any,
          new SelectionSet(select(RepositoryVulnerabilityAlert as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IRepositoryOwner {
  __typename: string;
  avatarUrl: unknown;
  id: string;
  login: string;
  repositories: IRepositoryConnection;
  repository: IRepository;
  resourcePath: unknown;
  url: unknown;
}

interface RepositoryOwnerSelector {
  __typename: () => Field<"__typename">;

  avatarUrl: (variables: {
    size: unknown;
  }) => Field<"avatarUrl", [/* @todo */]>;

  id: () => Field<"id">;

  login: () => Field<"login">;

  repositories: <T extends Array<Selection>>(
    variables: {
      affiliations?: Variable<"affiliations"> | RepositoryAffiliation;
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      isFork?: Variable<"isFork"> | boolean;
      isLocked?: Variable<"isLocked"> | boolean;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | RepositoryOrder;
      ownerAffiliations?: Variable<"ownerAffiliations"> | RepositoryAffiliation;
      privacy?: Variable<"privacy"> | RepositoryPrivacy;
    },
    select: (t: RepositoryConnectionSelector) => T
  ) => Field<
    "repositories",
    [
      Argument<
        "affiliations",
        Variable<"affiliations"> | RepositoryAffiliation
      >,
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"isFork", Variable<"isFork"> | boolean>,
      Argument<"isLocked", Variable<"isLocked"> | boolean>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | RepositoryOrder>,
      Argument<
        "ownerAffiliations",
        Variable<"ownerAffiliations"> | RepositoryAffiliation
      >,
      Argument<"privacy", Variable<"privacy"> | RepositoryPrivacy>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    variables: { name?: Variable<"name"> | string },
    select: (t: RepositorySelector) => T
  ) => Field<
    "repository",
    [Argument<"name", Variable<"name"> | string>],
    SelectionSet<T>
  >;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;

  on: <T extends Array<Selection>, F extends "Organization" | "User">(
    type: F,
    select: (
      t: F extends "Organization"
        ? OrganizationSelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const RepositoryOwner: RepositoryOwnerSelector = {
  __typename: () => new Field("__typename"),

  avatarUrl: (variables) => new Field("avatarUrl"),
  id: () => new Field("id"),
  login: () => new Field("login"),

  repositories: (variables, select) =>
    new Field(
      "repositories",
      [
        new Argument(
          "affiliations",
          variables.affiliations,
          RepositoryAffiliation
        ),
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("isFork", variables.isFork),
        new Argument("isLocked", variables.isLocked),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument(
          "ownerAffiliations",
          variables.ownerAffiliations,
          RepositoryAffiliation
        ),
        new Argument("privacy", variables.privacy, RepositoryPrivacy),
      ],
      new SelectionSet(select(RepositoryConnection))
    ),

  repository: (variables, select) =>
    new Field(
      "repository",
      [new Argument("name", variables.name)],
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),

  on: (type, select) => {
    switch (type) {
      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IRepositoryTopic extends INode, IUniformResourceLocatable {
  __typename: "RepositoryTopic";
  topic: ITopic;
}

interface RepositoryTopicSelector {
  __typename: () => Field<"__typename">;

  id: () => Field<"id">;

  resourcePath: () => Field<"resourcePath">;

  topic: <T extends Array<Selection>>(
    select: (t: TopicSelector) => T
  ) => Field<"topic", never, SelectionSet<T>>;

  url: () => Field<"url">;
}

export const isRepositoryTopic = (
  object: Record<string, any>
): object is Partial<IRepositoryTopic> => {
  return object.__typename === "RepositoryTopic";
};

export const RepositoryTopic: RepositoryTopicSelector = {
  __typename: () => new Field("__typename"),

  id: () => new Field("id"),
  resourcePath: () => new Field("resourcePath"),

  topic: (select) =>
    new Field("topic", undefined as never, new SelectionSet(select(Topic))),

  url: () => new Field("url"),
};

export interface IRepositoryTopicConnection {
  edges: IRepositoryTopicEdge[];
  nodes: IRepositoryTopic[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface RepositoryTopicConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: RepositoryTopicEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: RepositoryTopicSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const RepositoryTopicConnection: RepositoryTopicConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(RepositoryTopicEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(RepositoryTopic))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IRepositoryTopicEdge {
  cursor: string;
  node: IRepositoryTopic;
}

interface RepositoryTopicEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: RepositoryTopicSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const RepositoryTopicEdge: RepositoryTopicEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(RepositoryTopic))
    ),
};

export interface IRepositoryVisibilityChangeDisableAuditEntry
  extends IAuditEntry,
    IEnterpriseAuditEntryData,
    INode,
    IOrganizationAuditEntryData {
  __typename: "RepositoryVisibilityChangeDisableAuditEntry";
}

interface RepositoryVisibilityChangeDisableAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  enterpriseResourcePath: () => Field<"enterpriseResourcePath">;

  enterpriseSlug: () => Field<"enterpriseSlug">;

  enterpriseUrl: () => Field<"enterpriseUrl">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepositoryVisibilityChangeDisableAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepositoryVisibilityChangeDisableAuditEntry> => {
  return object.__typename === "RepositoryVisibilityChangeDisableAuditEntry";
};

export const RepositoryVisibilityChangeDisableAuditEntry: RepositoryVisibilityChangeDisableAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  enterpriseResourcePath: () => new Field("enterpriseResourcePath"),
  enterpriseSlug: () => new Field("enterpriseSlug"),
  enterpriseUrl: () => new Field("enterpriseUrl"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepositoryVisibilityChangeEnableAuditEntry
  extends IAuditEntry,
    IEnterpriseAuditEntryData,
    INode,
    IOrganizationAuditEntryData {
  __typename: "RepositoryVisibilityChangeEnableAuditEntry";
}

interface RepositoryVisibilityChangeEnableAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  enterpriseResourcePath: () => Field<"enterpriseResourcePath">;

  enterpriseSlug: () => Field<"enterpriseSlug">;

  enterpriseUrl: () => Field<"enterpriseUrl">;

  id: () => Field<"id">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isRepositoryVisibilityChangeEnableAuditEntry = (
  object: Record<string, any>
): object is Partial<IRepositoryVisibilityChangeEnableAuditEntry> => {
  return object.__typename === "RepositoryVisibilityChangeEnableAuditEntry";
};

export const RepositoryVisibilityChangeEnableAuditEntry: RepositoryVisibilityChangeEnableAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  enterpriseResourcePath: () => new Field("enterpriseResourcePath"),
  enterpriseSlug: () => new Field("enterpriseSlug"),
  enterpriseUrl: () => new Field("enterpriseUrl"),
  id: () => new Field("id"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface IRepositoryVulnerabilityAlert extends INode, IRepositoryNode {
  __typename: "RepositoryVulnerabilityAlert";
  createdAt: unknown;
  dismissReason: string;
  dismissedAt: unknown;
  dismisser: IUser;
  securityAdvisory: ISecurityAdvisory;
  securityVulnerability: ISecurityVulnerability;
  vulnerableManifestFilename: string;
  vulnerableManifestPath: string;
  vulnerableRequirements: string;
}

interface RepositoryVulnerabilityAlertSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  dismissReason: () => Field<"dismissReason">;

  dismissedAt: () => Field<"dismissedAt">;

  dismisser: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"dismisser", never, SelectionSet<T>>;

  id: () => Field<"id">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  securityAdvisory: <T extends Array<Selection>>(
    select: (t: SecurityAdvisorySelector) => T
  ) => Field<"securityAdvisory", never, SelectionSet<T>>;

  securityVulnerability: <T extends Array<Selection>>(
    select: (t: SecurityVulnerabilitySelector) => T
  ) => Field<"securityVulnerability", never, SelectionSet<T>>;

  vulnerableManifestFilename: () => Field<"vulnerableManifestFilename">;

  vulnerableManifestPath: () => Field<"vulnerableManifestPath">;

  vulnerableRequirements: () => Field<"vulnerableRequirements">;
}

export const isRepositoryVulnerabilityAlert = (
  object: Record<string, any>
): object is Partial<IRepositoryVulnerabilityAlert> => {
  return object.__typename === "RepositoryVulnerabilityAlert";
};

export const RepositoryVulnerabilityAlert: RepositoryVulnerabilityAlertSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),
  dismissReason: () => new Field("dismissReason"),
  dismissedAt: () => new Field("dismissedAt"),

  dismisser: (select) =>
    new Field("dismisser", undefined as never, new SelectionSet(select(User))),

  id: () => new Field("id"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  securityAdvisory: (select) =>
    new Field(
      "securityAdvisory",
      undefined as never,
      new SelectionSet(select(SecurityAdvisory))
    ),

  securityVulnerability: (select) =>
    new Field(
      "securityVulnerability",
      undefined as never,
      new SelectionSet(select(SecurityVulnerability))
    ),

  vulnerableManifestFilename: () => new Field("vulnerableManifestFilename"),
  vulnerableManifestPath: () => new Field("vulnerableManifestPath"),
  vulnerableRequirements: () => new Field("vulnerableRequirements"),
};

export interface IRepositoryVulnerabilityAlertConnection {
  edges: IRepositoryVulnerabilityAlertEdge[];
  nodes: IRepositoryVulnerabilityAlert[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface RepositoryVulnerabilityAlertConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: RepositoryVulnerabilityAlertEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: RepositoryVulnerabilityAlertSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const RepositoryVulnerabilityAlertConnection: RepositoryVulnerabilityAlertConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(RepositoryVulnerabilityAlertEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(RepositoryVulnerabilityAlert))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IRepositoryVulnerabilityAlertEdge {
  cursor: string;
  node: IRepositoryVulnerabilityAlert;
}

interface RepositoryVulnerabilityAlertEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: RepositoryVulnerabilityAlertSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const RepositoryVulnerabilityAlertEdge: RepositoryVulnerabilityAlertEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(RepositoryVulnerabilityAlert))
    ),
};

export interface IRequestReviewsPayload {
  actor: IActor;
  clientMutationId: string;
  pullRequest: IPullRequest;
  requestedReviewersEdge: IUserEdge;
}

interface RequestReviewsPayloadSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  requestedReviewersEdge: <T extends Array<Selection>>(
    select: (t: UserEdgeSelector) => T
  ) => Field<"requestedReviewersEdge", never, SelectionSet<T>>;
}

export const RequestReviewsPayload: RequestReviewsPayloadSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  requestedReviewersEdge: (select) =>
    new Field(
      "requestedReviewersEdge",
      undefined as never,
      new SelectionSet(select(UserEdge))
    ),
};

export interface IRerequestCheckSuitePayload {
  checkSuite: ICheckSuite;
  clientMutationId: string;
}

interface RerequestCheckSuitePayloadSelector {
  __typename: () => Field<"__typename">;

  checkSuite: <T extends Array<Selection>>(
    select: (t: CheckSuiteSelector) => T
  ) => Field<"checkSuite", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;
}

export const RerequestCheckSuitePayload: RerequestCheckSuitePayloadSelector = {
  __typename: () => new Field("__typename"),

  checkSuite: (select) =>
    new Field(
      "checkSuite",
      undefined as never,
      new SelectionSet(select(CheckSuite))
    ),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface IResolveReviewThreadPayload {
  clientMutationId: string;
  thread: IPullRequestReviewThread;
}

interface ResolveReviewThreadPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  thread: <T extends Array<Selection>>(
    select: (t: PullRequestReviewThreadSelector) => T
  ) => Field<"thread", never, SelectionSet<T>>;
}

export const ResolveReviewThreadPayload: ResolveReviewThreadPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  thread: (select) =>
    new Field(
      "thread",
      undefined as never,
      new SelectionSet(select(PullRequestReviewThread))
    ),
};

export interface IRestrictedContribution extends IContribution {
  __typename: "RestrictedContribution";
}

interface RestrictedContributionSelector {
  __typename: () => Field<"__typename">;

  isRestricted: () => Field<"isRestricted">;

  occurredAt: () => Field<"occurredAt">;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const isRestrictedContribution = (
  object: Record<string, any>
): object is Partial<IRestrictedContribution> => {
  return object.__typename === "RestrictedContribution";
};

export const RestrictedContribution: RestrictedContributionSelector = {
  __typename: () => new Field("__typename"),

  isRestricted: () => new Field("isRestricted"),
  occurredAt: () => new Field("occurredAt"),
  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface IReviewDismissalAllowance extends INode {
  __typename: "ReviewDismissalAllowance";
  actor: IReviewDismissalAllowanceActor;
  branchProtectionRule: IBranchProtectionRule;
}

interface ReviewDismissalAllowanceSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ReviewDismissalAllowanceActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  branchProtectionRule: <T extends Array<Selection>>(
    select: (t: BranchProtectionRuleSelector) => T
  ) => Field<"branchProtectionRule", never, SelectionSet<T>>;

  id: () => Field<"id">;
}

export const isReviewDismissalAllowance = (
  object: Record<string, any>
): object is Partial<IReviewDismissalAllowance> => {
  return object.__typename === "ReviewDismissalAllowance";
};

export const ReviewDismissalAllowance: ReviewDismissalAllowanceSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(ReviewDismissalAllowanceActor))
    ),

  branchProtectionRule: (select) =>
    new Field(
      "branchProtectionRule",
      undefined as never,
      new SelectionSet(select(BranchProtectionRule))
    ),

  id: () => new Field("id"),
};

export interface IReviewDismissalAllowanceConnection {
  edges: IReviewDismissalAllowanceEdge[];
  nodes: IReviewDismissalAllowance[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface ReviewDismissalAllowanceConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: ReviewDismissalAllowanceEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: ReviewDismissalAllowanceSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const ReviewDismissalAllowanceConnection: ReviewDismissalAllowanceConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(ReviewDismissalAllowanceEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(ReviewDismissalAllowance))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IReviewDismissalAllowanceEdge {
  cursor: string;
  node: IReviewDismissalAllowance;
}

interface ReviewDismissalAllowanceEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: ReviewDismissalAllowanceSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const ReviewDismissalAllowanceEdge: ReviewDismissalAllowanceEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(ReviewDismissalAllowance))
    ),
};

export interface IReviewDismissedEvent
  extends INode,
    IUniformResourceLocatable {
  __typename: "ReviewDismissedEvent";
  actor: IActor;
  createdAt: unknown;
  databaseId: number;
  dismissalMessage: string;
  dismissalMessageHTML: string;
  previousReviewState: PullRequestReviewState;
  pullRequest: IPullRequest;
  pullRequestCommit: IPullRequestCommit;
  review: IPullRequestReview;
}

interface ReviewDismissedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  dismissalMessage: () => Field<"dismissalMessage">;

  dismissalMessageHTML: () => Field<"dismissalMessageHTML">;

  id: () => Field<"id">;

  previousReviewState: () => Field<"previousReviewState">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  pullRequestCommit: <T extends Array<Selection>>(
    select: (t: PullRequestCommitSelector) => T
  ) => Field<"pullRequestCommit", never, SelectionSet<T>>;

  resourcePath: () => Field<"resourcePath">;

  review: <T extends Array<Selection>>(
    select: (t: PullRequestReviewSelector) => T
  ) => Field<"review", never, SelectionSet<T>>;

  url: () => Field<"url">;
}

export const isReviewDismissedEvent = (
  object: Record<string, any>
): object is Partial<IReviewDismissedEvent> => {
  return object.__typename === "ReviewDismissedEvent";
};

export const ReviewDismissedEvent: ReviewDismissedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  dismissalMessage: () => new Field("dismissalMessage"),
  dismissalMessageHTML: () => new Field("dismissalMessageHTML"),
  id: () => new Field("id"),
  previousReviewState: () => new Field("previousReviewState"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  pullRequestCommit: (select) =>
    new Field(
      "pullRequestCommit",
      undefined as never,
      new SelectionSet(select(PullRequestCommit))
    ),

  resourcePath: () => new Field("resourcePath"),

  review: (select) =>
    new Field(
      "review",
      undefined as never,
      new SelectionSet(select(PullRequestReview))
    ),

  url: () => new Field("url"),
};

export interface IReviewRequest extends INode {
  __typename: "ReviewRequest";
  asCodeOwner: boolean;
  databaseId: number;
  pullRequest: IPullRequest;
  requestedReviewer: IRequestedReviewer;
}

interface ReviewRequestSelector {
  __typename: () => Field<"__typename">;

  asCodeOwner: () => Field<"asCodeOwner">;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  requestedReviewer: <T extends Array<Selection>>(
    select: (t: RequestedReviewerSelector) => T
  ) => Field<"requestedReviewer", never, SelectionSet<T>>;
}

export const isReviewRequest = (
  object: Record<string, any>
): object is Partial<IReviewRequest> => {
  return object.__typename === "ReviewRequest";
};

export const ReviewRequest: ReviewRequestSelector = {
  __typename: () => new Field("__typename"),

  asCodeOwner: () => new Field("asCodeOwner"),
  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  requestedReviewer: (select) =>
    new Field(
      "requestedReviewer",
      undefined as never,
      new SelectionSet(select(RequestedReviewer))
    ),
};

export interface IReviewRequestConnection {
  edges: IReviewRequestEdge[];
  nodes: IReviewRequest[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface ReviewRequestConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: ReviewRequestEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: ReviewRequestSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const ReviewRequestConnection: ReviewRequestConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(ReviewRequestEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(ReviewRequest))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IReviewRequestEdge {
  cursor: string;
  node: IReviewRequest;
}

interface ReviewRequestEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: ReviewRequestSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const ReviewRequestEdge: ReviewRequestEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(ReviewRequest))
    ),
};

export interface IReviewRequestRemovedEvent extends INode {
  __typename: "ReviewRequestRemovedEvent";
  actor: IActor;
  createdAt: unknown;
  pullRequest: IPullRequest;
  requestedReviewer: IRequestedReviewer;
}

interface ReviewRequestRemovedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  requestedReviewer: <T extends Array<Selection>>(
    select: (t: RequestedReviewerSelector) => T
  ) => Field<"requestedReviewer", never, SelectionSet<T>>;
}

export const isReviewRequestRemovedEvent = (
  object: Record<string, any>
): object is Partial<IReviewRequestRemovedEvent> => {
  return object.__typename === "ReviewRequestRemovedEvent";
};

export const ReviewRequestRemovedEvent: ReviewRequestRemovedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  requestedReviewer: (select) =>
    new Field(
      "requestedReviewer",
      undefined as never,
      new SelectionSet(select(RequestedReviewer))
    ),
};

export interface IReviewRequestedEvent extends INode {
  __typename: "ReviewRequestedEvent";
  actor: IActor;
  createdAt: unknown;
  pullRequest: IPullRequest;
  requestedReviewer: IRequestedReviewer;
}

interface ReviewRequestedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;

  requestedReviewer: <T extends Array<Selection>>(
    select: (t: RequestedReviewerSelector) => T
  ) => Field<"requestedReviewer", never, SelectionSet<T>>;
}

export const isReviewRequestedEvent = (
  object: Record<string, any>
): object is Partial<IReviewRequestedEvent> => {
  return object.__typename === "ReviewRequestedEvent";
};

export const ReviewRequestedEvent: ReviewRequestedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),

  requestedReviewer: (select) =>
    new Field(
      "requestedReviewer",
      undefined as never,
      new SelectionSet(select(RequestedReviewer))
    ),
};

export interface IReviewStatusHovercardContext extends IHovercardContext {
  __typename: "ReviewStatusHovercardContext";
  reviewDecision: PullRequestReviewDecision;
}

interface ReviewStatusHovercardContextSelector {
  __typename: () => Field<"__typename">;

  message: () => Field<"message">;

  octicon: () => Field<"octicon">;

  reviewDecision: () => Field<"reviewDecision">;
}

export const isReviewStatusHovercardContext = (
  object: Record<string, any>
): object is Partial<IReviewStatusHovercardContext> => {
  return object.__typename === "ReviewStatusHovercardContext";
};

export const ReviewStatusHovercardContext: ReviewStatusHovercardContextSelector = {
  __typename: () => new Field("__typename"),

  message: () => new Field("message"),
  octicon: () => new Field("octicon"),
  reviewDecision: () => new Field("reviewDecision"),
};

export interface ISavedReply extends INode {
  __typename: "SavedReply";
  body: string;
  bodyHTML: unknown;
  databaseId: number;
  title: string;
  user: IActor;
}

interface SavedReplySelector {
  __typename: () => Field<"__typename">;

  body: () => Field<"body">;

  bodyHTML: () => Field<"bodyHTML">;

  databaseId: () => Field<"databaseId">;

  id: () => Field<"id">;

  title: () => Field<"title">;

  user: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const isSavedReply = (
  object: Record<string, any>
): object is Partial<ISavedReply> => {
  return object.__typename === "SavedReply";
};

export const SavedReply: SavedReplySelector = {
  __typename: () => new Field("__typename"),

  body: () => new Field("body"),
  bodyHTML: () => new Field("bodyHTML"),
  databaseId: () => new Field("databaseId"),
  id: () => new Field("id"),
  title: () => new Field("title"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(Actor))),
};

export interface ISavedReplyConnection {
  edges: ISavedReplyEdge[];
  nodes: ISavedReply[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface SavedReplyConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: SavedReplyEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: SavedReplySelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const SavedReplyConnection: SavedReplyConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(SavedReplyEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(SavedReply))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ISavedReplyEdge {
  cursor: string;
  node: ISavedReply;
}

interface SavedReplyEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: SavedReplySelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const SavedReplyEdge: SavedReplyEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(SavedReply))),
};

export interface ISearchResultItemConnection {
  codeCount: number;
  edges: ISearchResultItemEdge[];
  issueCount: number;
  nodes: ISearchResultItem[];
  pageInfo: IPageInfo;
  repositoryCount: number;
  userCount: number;
  wikiCount: number;
}

interface SearchResultItemConnectionSelector {
  __typename: () => Field<"__typename">;

  codeCount: () => Field<"codeCount">;

  edges: <T extends Array<Selection>>(
    select: (t: SearchResultItemEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  issueCount: () => Field<"issueCount">;

  nodes: <T extends Array<Selection>>(
    select: (t: SearchResultItemSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  repositoryCount: () => Field<"repositoryCount">;

  userCount: () => Field<"userCount">;

  wikiCount: () => Field<"wikiCount">;
}

export const SearchResultItemConnection: SearchResultItemConnectionSelector = {
  __typename: () => new Field("__typename"),

  codeCount: () => new Field("codeCount"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(SearchResultItemEdge))
    ),

  issueCount: () => new Field("issueCount"),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(SearchResultItem))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  repositoryCount: () => new Field("repositoryCount"),
  userCount: () => new Field("userCount"),
  wikiCount: () => new Field("wikiCount"),
};

export interface ISearchResultItemEdge {
  cursor: string;
  node: ISearchResultItem;
  textMatches: ITextMatch[];
}

interface SearchResultItemEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: SearchResultItemSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;

  textMatches: <T extends Array<Selection>>(
    select: (t: TextMatchSelector) => T
  ) => Field<"textMatches", never, SelectionSet<T>>;
}

export const SearchResultItemEdge: SearchResultItemEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(SearchResultItem))
    ),

  textMatches: (select) =>
    new Field(
      "textMatches",
      undefined as never,
      new SelectionSet(select(TextMatch))
    ),
};

export interface ISecurityAdvisory extends INode {
  __typename: "SecurityAdvisory";
  databaseId: number;
  description: string;
  ghsaId: string;
  identifiers: ISecurityAdvisoryIdentifier[];
  origin: string;
  permalink: unknown;
  publishedAt: unknown;
  references: ISecurityAdvisoryReference[];
  severity: SecurityAdvisorySeverity;
  summary: string;
  updatedAt: unknown;
  vulnerabilities: ISecurityVulnerabilityConnection;
  withdrawnAt: unknown;
}

interface SecurityAdvisorySelector {
  __typename: () => Field<"__typename">;

  databaseId: () => Field<"databaseId">;

  description: () => Field<"description">;

  ghsaId: () => Field<"ghsaId">;

  id: () => Field<"id">;

  identifiers: <T extends Array<Selection>>(
    select: (t: SecurityAdvisoryIdentifierSelector) => T
  ) => Field<"identifiers", never, SelectionSet<T>>;

  origin: () => Field<"origin">;

  permalink: () => Field<"permalink">;

  publishedAt: () => Field<"publishedAt">;

  references: <T extends Array<Selection>>(
    select: (t: SecurityAdvisoryReferenceSelector) => T
  ) => Field<"references", never, SelectionSet<T>>;

  severity: () => Field<"severity">;

  summary: () => Field<"summary">;

  updatedAt: () => Field<"updatedAt">;

  vulnerabilities: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      ecosystem?: Variable<"ecosystem"> | SecurityAdvisoryEcosystem;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | SecurityVulnerabilityOrder;
      package?: Variable<"package"> | string;
      severities?: Variable<"severities"> | SecurityAdvisorySeverity;
    },
    select: (t: SecurityVulnerabilityConnectionSelector) => T
  ) => Field<
    "vulnerabilities",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"ecosystem", Variable<"ecosystem"> | SecurityAdvisoryEcosystem>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | SecurityVulnerabilityOrder>,
      Argument<"package", Variable<"package"> | string>,
      Argument<"severities", Variable<"severities"> | SecurityAdvisorySeverity>
    ],
    SelectionSet<T>
  >;

  withdrawnAt: () => Field<"withdrawnAt">;
}

export const isSecurityAdvisory = (
  object: Record<string, any>
): object is Partial<ISecurityAdvisory> => {
  return object.__typename === "SecurityAdvisory";
};

export const SecurityAdvisory: SecurityAdvisorySelector = {
  __typename: () => new Field("__typename"),

  databaseId: () => new Field("databaseId"),
  description: () => new Field("description"),
  ghsaId: () => new Field("ghsaId"),
  id: () => new Field("id"),

  identifiers: (select) =>
    new Field(
      "identifiers",
      undefined as never,
      new SelectionSet(select(SecurityAdvisoryIdentifier))
    ),

  origin: () => new Field("origin"),
  permalink: () => new Field("permalink"),
  publishedAt: () => new Field("publishedAt"),

  references: (select) =>
    new Field(
      "references",
      undefined as never,
      new SelectionSet(select(SecurityAdvisoryReference))
    ),

  severity: () => new Field("severity"),
  summary: () => new Field("summary"),
  updatedAt: () => new Field("updatedAt"),

  vulnerabilities: (variables, select) =>
    new Field(
      "vulnerabilities",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument(
          "ecosystem",
          variables.ecosystem,
          SecurityAdvisoryEcosystem
        ),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("package", variables.package),
        new Argument(
          "severities",
          variables.severities,
          SecurityAdvisorySeverity
        ),
      ],
      new SelectionSet(select(SecurityVulnerabilityConnection))
    ),

  withdrawnAt: () => new Field("withdrawnAt"),
};

export interface ISecurityAdvisoryConnection {
  edges: ISecurityAdvisoryEdge[];
  nodes: ISecurityAdvisory[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface SecurityAdvisoryConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: SecurityAdvisoryEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: SecurityAdvisorySelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const SecurityAdvisoryConnection: SecurityAdvisoryConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(SecurityAdvisoryEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(SecurityAdvisory))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ISecurityAdvisoryEdge {
  cursor: string;
  node: ISecurityAdvisory;
}

interface SecurityAdvisoryEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: SecurityAdvisorySelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const SecurityAdvisoryEdge: SecurityAdvisoryEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(SecurityAdvisory))
    ),
};

export interface ISecurityAdvisoryIdentifier {
  type: string;
  value: string;
}

interface SecurityAdvisoryIdentifierSelector {
  __typename: () => Field<"__typename">;

  type: () => Field<"type">;

  value: () => Field<"value">;
}

export const SecurityAdvisoryIdentifier: SecurityAdvisoryIdentifierSelector = {
  __typename: () => new Field("__typename"),

  type: () => new Field("type"),
  value: () => new Field("value"),
};

export interface ISecurityAdvisoryPackage {
  ecosystem: SecurityAdvisoryEcosystem;
  name: string;
}

interface SecurityAdvisoryPackageSelector {
  __typename: () => Field<"__typename">;

  ecosystem: () => Field<"ecosystem">;

  name: () => Field<"name">;
}

export const SecurityAdvisoryPackage: SecurityAdvisoryPackageSelector = {
  __typename: () => new Field("__typename"),

  ecosystem: () => new Field("ecosystem"),
  name: () => new Field("name"),
};

export interface ISecurityAdvisoryPackageVersion {
  identifier: string;
}

interface SecurityAdvisoryPackageVersionSelector {
  __typename: () => Field<"__typename">;

  identifier: () => Field<"identifier">;
}

export const SecurityAdvisoryPackageVersion: SecurityAdvisoryPackageVersionSelector = {
  __typename: () => new Field("__typename"),

  identifier: () => new Field("identifier"),
};

export interface ISecurityAdvisoryReference {
  url: unknown;
}

interface SecurityAdvisoryReferenceSelector {
  __typename: () => Field<"__typename">;

  url: () => Field<"url">;
}

export const SecurityAdvisoryReference: SecurityAdvisoryReferenceSelector = {
  __typename: () => new Field("__typename"),

  url: () => new Field("url"),
};

export interface ISecurityVulnerability {
  advisory: ISecurityAdvisory;
  firstPatchedVersion: ISecurityAdvisoryPackageVersion;
  package: ISecurityAdvisoryPackage;
  severity: SecurityAdvisorySeverity;
  updatedAt: unknown;
  vulnerableVersionRange: string;
}

interface SecurityVulnerabilitySelector {
  __typename: () => Field<"__typename">;

  advisory: <T extends Array<Selection>>(
    select: (t: SecurityAdvisorySelector) => T
  ) => Field<"advisory", never, SelectionSet<T>>;

  firstPatchedVersion: <T extends Array<Selection>>(
    select: (t: SecurityAdvisoryPackageVersionSelector) => T
  ) => Field<"firstPatchedVersion", never, SelectionSet<T>>;

  package: <T extends Array<Selection>>(
    select: (t: SecurityAdvisoryPackageSelector) => T
  ) => Field<"package", never, SelectionSet<T>>;

  severity: () => Field<"severity">;

  updatedAt: () => Field<"updatedAt">;

  vulnerableVersionRange: () => Field<"vulnerableVersionRange">;
}

export const SecurityVulnerability: SecurityVulnerabilitySelector = {
  __typename: () => new Field("__typename"),

  advisory: (select) =>
    new Field(
      "advisory",
      undefined as never,
      new SelectionSet(select(SecurityAdvisory))
    ),

  firstPatchedVersion: (select) =>
    new Field(
      "firstPatchedVersion",
      undefined as never,
      new SelectionSet(select(SecurityAdvisoryPackageVersion))
    ),

  package: (select) =>
    new Field(
      "package",
      undefined as never,
      new SelectionSet(select(SecurityAdvisoryPackage))
    ),

  severity: () => new Field("severity"),
  updatedAt: () => new Field("updatedAt"),
  vulnerableVersionRange: () => new Field("vulnerableVersionRange"),
};

export interface ISecurityVulnerabilityConnection {
  edges: ISecurityVulnerabilityEdge[];
  nodes: ISecurityVulnerability[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface SecurityVulnerabilityConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: SecurityVulnerabilityEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: SecurityVulnerabilitySelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const SecurityVulnerabilityConnection: SecurityVulnerabilityConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(SecurityVulnerabilityEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(SecurityVulnerability))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ISecurityVulnerabilityEdge {
  cursor: string;
  node: ISecurityVulnerability;
}

interface SecurityVulnerabilityEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: SecurityVulnerabilitySelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const SecurityVulnerabilityEdge: SecurityVulnerabilityEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(SecurityVulnerability))
    ),
};

export interface ISetEnterpriseIdentityProviderPayload {
  clientMutationId: string;
  identityProvider: IEnterpriseIdentityProvider;
}

interface SetEnterpriseIdentityProviderPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  identityProvider: <T extends Array<Selection>>(
    select: (t: EnterpriseIdentityProviderSelector) => T
  ) => Field<"identityProvider", never, SelectionSet<T>>;
}

export const SetEnterpriseIdentityProviderPayload: SetEnterpriseIdentityProviderPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  identityProvider: (select) =>
    new Field(
      "identityProvider",
      undefined as never,
      new SelectionSet(select(EnterpriseIdentityProvider))
    ),
};

export interface ISetOrganizationInteractionLimitPayload {
  clientMutationId: string;
  organization: IOrganization;
}

interface SetOrganizationInteractionLimitPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;
}

export const SetOrganizationInteractionLimitPayload: SetOrganizationInteractionLimitPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),
};

export interface ISetRepositoryInteractionLimitPayload {
  clientMutationId: string;
  repository: IRepository;
}

interface SetRepositoryInteractionLimitPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const SetRepositoryInteractionLimitPayload: SetRepositoryInteractionLimitPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface ISetUserInteractionLimitPayload {
  clientMutationId: string;
  user: IUser;
}

interface SetUserInteractionLimitPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const SetUserInteractionLimitPayload: SetUserInteractionLimitPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface ISmimeSignature extends IGitSignature {
  __typename: "SmimeSignature";
}

interface SmimeSignatureSelector {
  __typename: () => Field<"__typename">;

  email: () => Field<"email">;

  isValid: () => Field<"isValid">;

  payload: () => Field<"payload">;

  signature: () => Field<"signature">;

  signer: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"signer", never, SelectionSet<T>>;

  state: () => Field<"state">;

  wasSignedByGitHub: () => Field<"wasSignedByGitHub">;
}

export const isSmimeSignature = (
  object: Record<string, any>
): object is Partial<ISmimeSignature> => {
  return object.__typename === "SmimeSignature";
};

export const SmimeSignature: SmimeSignatureSelector = {
  __typename: () => new Field("__typename"),

  email: () => new Field("email"),
  isValid: () => new Field("isValid"),
  payload: () => new Field("payload"),
  signature: () => new Field("signature"),

  signer: (select) =>
    new Field("signer", undefined as never, new SelectionSet(select(User))),

  state: () => new Field("state"),
  wasSignedByGitHub: () => new Field("wasSignedByGitHub"),
};

export interface ISponsorable {
  __typename: string;
  hasSponsorsListing: boolean;
  isSponsoringViewer: boolean;
  sponsorsListing: ISponsorsListing;
  sponsorshipsAsMaintainer: ISponsorshipConnection;
  sponsorshipsAsSponsor: ISponsorshipConnection;
  viewerCanSponsor: boolean;
  viewerIsSponsoring: boolean;
}

interface SponsorableSelector {
  __typename: () => Field<"__typename">;

  hasSponsorsListing: () => Field<"hasSponsorsListing">;

  isSponsoringViewer: () => Field<"isSponsoringViewer">;

  sponsorsListing: <T extends Array<Selection>>(
    select: (t: SponsorsListingSelector) => T
  ) => Field<"sponsorsListing", never, SelectionSet<T>>;

  sponsorshipsAsMaintainer: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      includePrivate?: Variable<"includePrivate"> | boolean;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | SponsorshipOrder;
    },
    select: (t: SponsorshipConnectionSelector) => T
  ) => Field<
    "sponsorshipsAsMaintainer",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"includePrivate", Variable<"includePrivate"> | boolean>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | SponsorshipOrder>
    ],
    SelectionSet<T>
  >;

  sponsorshipsAsSponsor: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | SponsorshipOrder;
    },
    select: (t: SponsorshipConnectionSelector) => T
  ) => Field<
    "sponsorshipsAsSponsor",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | SponsorshipOrder>
    ],
    SelectionSet<T>
  >;

  viewerCanSponsor: () => Field<"viewerCanSponsor">;

  viewerIsSponsoring: () => Field<"viewerIsSponsoring">;

  on: <T extends Array<Selection>, F extends "Organization" | "User">(
    type: F,
    select: (
      t: F extends "Organization"
        ? OrganizationSelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Sponsorable: SponsorableSelector = {
  __typename: () => new Field("__typename"),

  hasSponsorsListing: () => new Field("hasSponsorsListing"),
  isSponsoringViewer: () => new Field("isSponsoringViewer"),

  sponsorsListing: (select) =>
    new Field(
      "sponsorsListing",
      undefined as never,
      new SelectionSet(select(SponsorsListing))
    ),

  sponsorshipsAsMaintainer: (variables, select) =>
    new Field(
      "sponsorshipsAsMaintainer",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("includePrivate", variables.includePrivate),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(SponsorshipConnection))
    ),

  sponsorshipsAsSponsor: (variables, select) =>
    new Field(
      "sponsorshipsAsSponsor",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(SponsorshipConnection))
    ),

  viewerCanSponsor: () => new Field("viewerCanSponsor"),
  viewerIsSponsoring: () => new Field("viewerIsSponsoring"),

  on: (type, select) => {
    switch (type) {
      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface ISponsorsListing extends INode {
  __typename: "SponsorsListing";
  createdAt: unknown;
  fullDescription: string;
  fullDescriptionHTML: unknown;
  name: string;
  shortDescription: string;
  slug: string;
  tiers: ISponsorsTierConnection;
}

interface SponsorsListingSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  fullDescription: () => Field<"fullDescription">;

  fullDescriptionHTML: () => Field<"fullDescriptionHTML">;

  id: () => Field<"id">;

  name: () => Field<"name">;

  shortDescription: () => Field<"shortDescription">;

  slug: () => Field<"slug">;

  tiers: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | SponsorsTierOrder;
    },
    select: (t: SponsorsTierConnectionSelector) => T
  ) => Field<
    "tiers",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | SponsorsTierOrder>
    ],
    SelectionSet<T>
  >;
}

export const isSponsorsListing = (
  object: Record<string, any>
): object is Partial<ISponsorsListing> => {
  return object.__typename === "SponsorsListing";
};

export const SponsorsListing: SponsorsListingSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),
  fullDescription: () => new Field("fullDescription"),
  fullDescriptionHTML: () => new Field("fullDescriptionHTML"),
  id: () => new Field("id"),
  name: () => new Field("name"),
  shortDescription: () => new Field("shortDescription"),
  slug: () => new Field("slug"),

  tiers: (variables, select) =>
    new Field(
      "tiers",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(SponsorsTierConnection))
    ),
};

export interface ISponsorsTier extends INode {
  __typename: "SponsorsTier";
  adminInfo: ISponsorsTierAdminInfo;
  createdAt: unknown;
  description: string;
  descriptionHTML: unknown;
  monthlyPriceInCents: number;
  monthlyPriceInDollars: number;
  name: string;
  sponsorsListing: ISponsorsListing;
  updatedAt: unknown;
}

interface SponsorsTierSelector {
  __typename: () => Field<"__typename">;

  adminInfo: <T extends Array<Selection>>(
    select: (t: SponsorsTierAdminInfoSelector) => T
  ) => Field<"adminInfo", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  description: () => Field<"description">;

  descriptionHTML: () => Field<"descriptionHTML">;

  id: () => Field<"id">;

  monthlyPriceInCents: () => Field<"monthlyPriceInCents">;

  monthlyPriceInDollars: () => Field<"monthlyPriceInDollars">;

  name: () => Field<"name">;

  sponsorsListing: <T extends Array<Selection>>(
    select: (t: SponsorsListingSelector) => T
  ) => Field<"sponsorsListing", never, SelectionSet<T>>;

  updatedAt: () => Field<"updatedAt">;
}

export const isSponsorsTier = (
  object: Record<string, any>
): object is Partial<ISponsorsTier> => {
  return object.__typename === "SponsorsTier";
};

export const SponsorsTier: SponsorsTierSelector = {
  __typename: () => new Field("__typename"),

  adminInfo: (select) =>
    new Field(
      "adminInfo",
      undefined as never,
      new SelectionSet(select(SponsorsTierAdminInfo))
    ),

  createdAt: () => new Field("createdAt"),
  description: () => new Field("description"),
  descriptionHTML: () => new Field("descriptionHTML"),
  id: () => new Field("id"),
  monthlyPriceInCents: () => new Field("monthlyPriceInCents"),
  monthlyPriceInDollars: () => new Field("monthlyPriceInDollars"),
  name: () => new Field("name"),

  sponsorsListing: (select) =>
    new Field(
      "sponsorsListing",
      undefined as never,
      new SelectionSet(select(SponsorsListing))
    ),

  updatedAt: () => new Field("updatedAt"),
};

export interface ISponsorsTierAdminInfo {
  sponsorships: ISponsorshipConnection;
}

interface SponsorsTierAdminInfoSelector {
  __typename: () => Field<"__typename">;

  sponsorships: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      includePrivate?: Variable<"includePrivate"> | boolean;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | SponsorshipOrder;
    },
    select: (t: SponsorshipConnectionSelector) => T
  ) => Field<
    "sponsorships",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"includePrivate", Variable<"includePrivate"> | boolean>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | SponsorshipOrder>
    ],
    SelectionSet<T>
  >;
}

export const SponsorsTierAdminInfo: SponsorsTierAdminInfoSelector = {
  __typename: () => new Field("__typename"),

  sponsorships: (variables, select) =>
    new Field(
      "sponsorships",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("includePrivate", variables.includePrivate),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(SponsorshipConnection))
    ),
};

export interface ISponsorsTierConnection {
  edges: ISponsorsTierEdge[];
  nodes: ISponsorsTier[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface SponsorsTierConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: SponsorsTierEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: SponsorsTierSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const SponsorsTierConnection: SponsorsTierConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(SponsorsTierEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(SponsorsTier))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ISponsorsTierEdge {
  cursor: string;
  node: ISponsorsTier;
}

interface SponsorsTierEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: SponsorsTierSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const SponsorsTierEdge: SponsorsTierEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(SponsorsTier))
    ),
};

export interface ISponsorship extends INode {
  __typename: "Sponsorship";
  createdAt: unknown;
  maintainer: IUser;
  privacyLevel: SponsorshipPrivacy;
  sponsor: IUser;
  sponsorEntity: ISponsor;
  sponsorable: ISponsorable;
  tier: ISponsorsTier;
}

interface SponsorshipSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  /**
   * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.
   */

  maintainer: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"maintainer", never, SelectionSet<T>>;

  privacyLevel: () => Field<"privacyLevel">;

  /**
   * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.
   */

  sponsor: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"sponsor", never, SelectionSet<T>>;

  sponsorEntity: <T extends Array<Selection>>(
    select: (t: SponsorSelector) => T
  ) => Field<"sponsorEntity", never, SelectionSet<T>>;

  sponsorable: <T extends Array<Selection>>(
    select: (t: SponsorableSelector) => T
  ) => Field<"sponsorable", never, SelectionSet<T>>;

  tier: <T extends Array<Selection>>(
    select: (t: SponsorsTierSelector) => T
  ) => Field<"tier", never, SelectionSet<T>>;
}

export const isSponsorship = (
  object: Record<string, any>
): object is Partial<ISponsorship> => {
  return object.__typename === "Sponsorship";
};

export const Sponsorship: SponsorshipSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  /**
   * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.
   */

  maintainer: (select) =>
    new Field("maintainer", undefined as never, new SelectionSet(select(User))),

  privacyLevel: () => new Field("privacyLevel"),

  /**
   * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.
   */

  sponsor: (select) =>
    new Field("sponsor", undefined as never, new SelectionSet(select(User))),

  sponsorEntity: (select) =>
    new Field(
      "sponsorEntity",
      undefined as never,
      new SelectionSet(select(Sponsor))
    ),

  sponsorable: (select) =>
    new Field(
      "sponsorable",
      undefined as never,
      new SelectionSet(select(Sponsorable))
    ),

  tier: (select) =>
    new Field(
      "tier",
      undefined as never,
      new SelectionSet(select(SponsorsTier))
    ),
};

export interface ISponsorshipConnection {
  edges: ISponsorshipEdge[];
  nodes: ISponsorship[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface SponsorshipConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: SponsorshipEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: SponsorshipSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const SponsorshipConnection: SponsorshipConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(SponsorshipEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(Sponsorship))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ISponsorshipEdge {
  cursor: string;
  node: ISponsorship;
}

interface SponsorshipEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: SponsorshipSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const SponsorshipEdge: SponsorshipEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(Sponsorship))
    ),
};

export interface IStargazerConnection {
  edges: IStargazerEdge[];
  nodes: IUser[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface StargazerConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: StargazerEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const StargazerConnection: StargazerConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(StargazerEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(User))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IStargazerEdge {
  cursor: string;
  node: IUser;
  starredAt: unknown;
}

interface StargazerEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;

  starredAt: () => Field<"starredAt">;
}

export const StargazerEdge: StargazerEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(User))),

  starredAt: () => new Field("starredAt"),
};

export interface IStarrable {
  __typename: string;
  id: string;
  stargazerCount: number;
  stargazers: IStargazerConnection;
  viewerHasStarred: boolean;
}

interface StarrableSelector {
  __typename: () => Field<"__typename">;

  id: () => Field<"id">;

  stargazerCount: () => Field<"stargazerCount">;

  stargazers: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | StarOrder;
    },
    select: (t: StargazerConnectionSelector) => T
  ) => Field<
    "stargazers",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | StarOrder>
    ],
    SelectionSet<T>
  >;

  viewerHasStarred: () => Field<"viewerHasStarred">;

  on: <T extends Array<Selection>, F extends "Gist" | "Repository" | "Topic">(
    type: F,
    select: (
      t: F extends "Gist"
        ? GistSelector
        : F extends "Repository"
        ? RepositorySelector
        : F extends "Topic"
        ? TopicSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Starrable: StarrableSelector = {
  __typename: () => new Field("__typename"),

  id: () => new Field("id"),
  stargazerCount: () => new Field("stargazerCount"),

  stargazers: (variables, select) =>
    new Field(
      "stargazers",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(StargazerConnection))
    ),

  viewerHasStarred: () => new Field("viewerHasStarred"),

  on: (type, select) => {
    switch (type) {
      case "Gist": {
        return new InlineFragment(
          new NamedType("Gist") as any,
          new SelectionSet(select(Gist as any))
        );
      }

      case "Repository": {
        return new InlineFragment(
          new NamedType("Repository") as any,
          new SelectionSet(select(Repository as any))
        );
      }

      case "Topic": {
        return new InlineFragment(
          new NamedType("Topic") as any,
          new SelectionSet(select(Topic as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IStarredRepositoryConnection {
  edges: IStarredRepositoryEdge[];
  isOverLimit: boolean;
  nodes: IRepository[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface StarredRepositoryConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: StarredRepositoryEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  isOverLimit: () => Field<"isOverLimit">;

  nodes: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const StarredRepositoryConnection: StarredRepositoryConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(StarredRepositoryEdge))
    ),

  isOverLimit: () => new Field("isOverLimit"),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IStarredRepositoryEdge {
  cursor: string;
  node: IRepository;
  starredAt: unknown;
}

interface StarredRepositoryEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"node", never, SelectionSet<T>>;

  starredAt: () => Field<"starredAt">;
}

export const StarredRepositoryEdge: StarredRepositoryEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Repository))),

  starredAt: () => new Field("starredAt"),
};

export interface IStatus extends INode {
  __typename: "Status";
  combinedContexts: IStatusCheckRollupContextConnection;
  commit: ICommit;
  context: IStatusContext;
  contexts: IStatusContext[];
  state: StatusState;
}

interface StatusSelector {
  __typename: () => Field<"__typename">;

  combinedContexts: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: StatusCheckRollupContextConnectionSelector) => T
  ) => Field<
    "combinedContexts",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  commit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"commit", never, SelectionSet<T>>;

  context: <T extends Array<Selection>>(
    variables: { name?: Variable<"name"> | string },
    select: (t: StatusContextSelector) => T
  ) => Field<
    "context",
    [Argument<"name", Variable<"name"> | string>],
    SelectionSet<T>
  >;

  contexts: <T extends Array<Selection>>(
    select: (t: StatusContextSelector) => T
  ) => Field<"contexts", never, SelectionSet<T>>;

  id: () => Field<"id">;

  state: () => Field<"state">;
}

export const isStatus = (
  object: Record<string, any>
): object is Partial<IStatus> => {
  return object.__typename === "Status";
};

export const Status: StatusSelector = {
  __typename: () => new Field("__typename"),

  combinedContexts: (variables, select) =>
    new Field(
      "combinedContexts",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(StatusCheckRollupContextConnection))
    ),

  commit: (select) =>
    new Field("commit", undefined as never, new SelectionSet(select(Commit))),

  context: (variables, select) =>
    new Field(
      "context",
      [new Argument("name", variables.name)],
      new SelectionSet(select(StatusContext))
    ),

  contexts: (select) =>
    new Field(
      "contexts",
      undefined as never,
      new SelectionSet(select(StatusContext))
    ),

  id: () => new Field("id"),
  state: () => new Field("state"),
};

export interface IStatusCheckRollup extends INode {
  __typename: "StatusCheckRollup";
  commit: ICommit;
  contexts: IStatusCheckRollupContextConnection;
  state: StatusState;
}

interface StatusCheckRollupSelector {
  __typename: () => Field<"__typename">;

  commit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"commit", never, SelectionSet<T>>;

  contexts: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: StatusCheckRollupContextConnectionSelector) => T
  ) => Field<
    "contexts",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  id: () => Field<"id">;

  state: () => Field<"state">;
}

export const isStatusCheckRollup = (
  object: Record<string, any>
): object is Partial<IStatusCheckRollup> => {
  return object.__typename === "StatusCheckRollup";
};

export const StatusCheckRollup: StatusCheckRollupSelector = {
  __typename: () => new Field("__typename"),

  commit: (select) =>
    new Field("commit", undefined as never, new SelectionSet(select(Commit))),

  contexts: (variables, select) =>
    new Field(
      "contexts",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(StatusCheckRollupContextConnection))
    ),

  id: () => new Field("id"),
  state: () => new Field("state"),
};

export interface IStatusCheckRollupContextConnection {
  edges: IStatusCheckRollupContextEdge[];
  nodes: IStatusCheckRollupContext[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface StatusCheckRollupContextConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: StatusCheckRollupContextEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: StatusCheckRollupContextSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const StatusCheckRollupContextConnection: StatusCheckRollupContextConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(StatusCheckRollupContextEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(StatusCheckRollupContext))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IStatusCheckRollupContextEdge {
  cursor: string;
  node: IStatusCheckRollupContext;
}

interface StatusCheckRollupContextEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: StatusCheckRollupContextSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const StatusCheckRollupContextEdge: StatusCheckRollupContextEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(StatusCheckRollupContext))
    ),
};

export interface IStatusContext extends INode {
  __typename: "StatusContext";
  avatarUrl: unknown;
  commit: ICommit;
  context: string;
  createdAt: unknown;
  creator: IActor;
  description: string;
  state: StatusState;
  targetUrl: unknown;
}

interface StatusContextSelector {
  __typename: () => Field<"__typename">;

  avatarUrl: (variables: {
    size: unknown;
  }) => Field<"avatarUrl", [/* @todo */]>;

  commit: <T extends Array<Selection>>(
    select: (t: CommitSelector) => T
  ) => Field<"commit", never, SelectionSet<T>>;

  context: () => Field<"context">;

  createdAt: () => Field<"createdAt">;

  creator: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"creator", never, SelectionSet<T>>;

  description: () => Field<"description">;

  id: () => Field<"id">;

  state: () => Field<"state">;

  targetUrl: () => Field<"targetUrl">;
}

export const isStatusContext = (
  object: Record<string, any>
): object is Partial<IStatusContext> => {
  return object.__typename === "StatusContext";
};

export const StatusContext: StatusContextSelector = {
  __typename: () => new Field("__typename"),

  avatarUrl: (variables) => new Field("avatarUrl"),

  commit: (select) =>
    new Field("commit", undefined as never, new SelectionSet(select(Commit))),

  context: () => new Field("context"),
  createdAt: () => new Field("createdAt"),

  creator: (select) =>
    new Field("creator", undefined as never, new SelectionSet(select(Actor))),

  description: () => new Field("description"),
  id: () => new Field("id"),
  state: () => new Field("state"),
  targetUrl: () => new Field("targetUrl"),
};

export interface ISubmitPullRequestReviewPayload {
  clientMutationId: string;
  pullRequestReview: IPullRequestReview;
}

interface SubmitPullRequestReviewPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequestReview: <T extends Array<Selection>>(
    select: (t: PullRequestReviewSelector) => T
  ) => Field<"pullRequestReview", never, SelectionSet<T>>;
}

export const SubmitPullRequestReviewPayload: SubmitPullRequestReviewPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequestReview: (select) =>
    new Field(
      "pullRequestReview",
      undefined as never,
      new SelectionSet(select(PullRequestReview))
    ),
};

export interface ISubmodule {
  branch: string;
  gitUrl: unknown;
  name: string;
  path: string;
  subprojectCommitOid: unknown;
}

interface SubmoduleSelector {
  __typename: () => Field<"__typename">;

  branch: () => Field<"branch">;

  gitUrl: () => Field<"gitUrl">;

  name: () => Field<"name">;

  path: () => Field<"path">;

  subprojectCommitOid: () => Field<"subprojectCommitOid">;
}

export const Submodule: SubmoduleSelector = {
  __typename: () => new Field("__typename"),

  branch: () => new Field("branch"),
  gitUrl: () => new Field("gitUrl"),
  name: () => new Field("name"),
  path: () => new Field("path"),
  subprojectCommitOid: () => new Field("subprojectCommitOid"),
};

export interface ISubmoduleConnection {
  edges: ISubmoduleEdge[];
  nodes: ISubmodule[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface SubmoduleConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: SubmoduleEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: SubmoduleSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const SubmoduleConnection: SubmoduleConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(SubmoduleEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(Submodule))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ISubmoduleEdge {
  cursor: string;
  node: ISubmodule;
}

interface SubmoduleEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: SubmoduleSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const SubmoduleEdge: SubmoduleEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Submodule))),
};

export interface ISubscribable {
  __typename: string;
  id: string;
  viewerCanSubscribe: boolean;
  viewerSubscription: SubscriptionState;
}

interface SubscribableSelector {
  __typename: () => Field<"__typename">;

  id: () => Field<"id">;

  viewerCanSubscribe: () => Field<"viewerCanSubscribe">;

  viewerSubscription: () => Field<"viewerSubscription">;

  on: <
    T extends Array<Selection>,
    F extends
      | "Commit"
      | "Issue"
      | "PullRequest"
      | "Repository"
      | "Team"
      | "TeamDiscussion"
  >(
    type: F,
    select: (
      t: F extends "Commit"
        ? CommitSelector
        : F extends "Issue"
        ? IssueSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : F extends "Repository"
        ? RepositorySelector
        : F extends "Team"
        ? TeamSelector
        : F extends "TeamDiscussion"
        ? TeamDiscussionSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Subscribable: SubscribableSelector = {
  __typename: () => new Field("__typename"),

  id: () => new Field("id"),
  viewerCanSubscribe: () => new Field("viewerCanSubscribe"),
  viewerSubscription: () => new Field("viewerSubscription"),

  on: (type, select) => {
    switch (type) {
      case "Commit": {
        return new InlineFragment(
          new NamedType("Commit") as any,
          new SelectionSet(select(Commit as any))
        );
      }

      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      case "Repository": {
        return new InlineFragment(
          new NamedType("Repository") as any,
          new SelectionSet(select(Repository as any))
        );
      }

      case "Team": {
        return new InlineFragment(
          new NamedType("Team") as any,
          new SelectionSet(select(Team as any))
        );
      }

      case "TeamDiscussion": {
        return new InlineFragment(
          new NamedType("TeamDiscussion") as any,
          new SelectionSet(select(TeamDiscussion as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface ISubscribedEvent extends INode {
  __typename: "SubscribedEvent";
  actor: IActor;
  createdAt: unknown;
  subscribable: ISubscribable;
}

interface SubscribedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  subscribable: <T extends Array<Selection>>(
    select: (t: SubscribableSelector) => T
  ) => Field<"subscribable", never, SelectionSet<T>>;
}

export const isSubscribedEvent = (
  object: Record<string, any>
): object is Partial<ISubscribedEvent> => {
  return object.__typename === "SubscribedEvent";
};

export const SubscribedEvent: SubscribedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  subscribable: (select) =>
    new Field(
      "subscribable",
      undefined as never,
      new SelectionSet(select(Subscribable))
    ),
};

export interface ISuggestedReviewer {
  isAuthor: boolean;
  isCommenter: boolean;
  reviewer: IUser;
}

interface SuggestedReviewerSelector {
  __typename: () => Field<"__typename">;

  isAuthor: () => Field<"isAuthor">;

  isCommenter: () => Field<"isCommenter">;

  reviewer: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"reviewer", never, SelectionSet<T>>;
}

export const SuggestedReviewer: SuggestedReviewerSelector = {
  __typename: () => new Field("__typename"),

  isAuthor: () => new Field("isAuthor"),
  isCommenter: () => new Field("isCommenter"),

  reviewer: (select) =>
    new Field("reviewer", undefined as never, new SelectionSet(select(User))),
};

export interface ITag extends IGitObject, INode {
  __typename: "Tag";
  message: string;
  name: string;
  tagger: IGitActor;
  target: IGitObject;
}

interface TagSelector {
  __typename: () => Field<"__typename">;

  abbreviatedOid: () => Field<"abbreviatedOid">;

  commitResourcePath: () => Field<"commitResourcePath">;

  commitUrl: () => Field<"commitUrl">;

  id: () => Field<"id">;

  message: () => Field<"message">;

  name: () => Field<"name">;

  oid: () => Field<"oid">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  tagger: <T extends Array<Selection>>(
    select: (t: GitActorSelector) => T
  ) => Field<"tagger", never, SelectionSet<T>>;

  target: <T extends Array<Selection>>(
    select: (t: GitObjectSelector) => T
  ) => Field<"target", never, SelectionSet<T>>;
}

export const isTag = (object: Record<string, any>): object is Partial<ITag> => {
  return object.__typename === "Tag";
};

export const Tag: TagSelector = {
  __typename: () => new Field("__typename"),

  abbreviatedOid: () => new Field("abbreviatedOid"),
  commitResourcePath: () => new Field("commitResourcePath"),
  commitUrl: () => new Field("commitUrl"),
  id: () => new Field("id"),
  message: () => new Field("message"),
  name: () => new Field("name"),
  oid: () => new Field("oid"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  tagger: (select) =>
    new Field("tagger", undefined as never, new SelectionSet(select(GitActor))),

  target: (select) =>
    new Field(
      "target",
      undefined as never,
      new SelectionSet(select(GitObject))
    ),
};

export interface ITeam extends IMemberStatusable, INode, ISubscribable {
  __typename: "Team";
  ancestors: ITeamConnection;
  avatarUrl: unknown;
  childTeams: ITeamConnection;
  combinedSlug: string;
  createdAt: unknown;
  databaseId: number;
  description: string;
  discussion: ITeamDiscussion;
  discussions: ITeamDiscussionConnection;
  discussionsResourcePath: unknown;
  discussionsUrl: unknown;
  editTeamResourcePath: unknown;
  editTeamUrl: unknown;
  invitations: IOrganizationInvitationConnection;
  members: ITeamMemberConnection;
  membersResourcePath: unknown;
  membersUrl: unknown;
  name: string;
  newTeamResourcePath: unknown;
  newTeamUrl: unknown;
  organization: IOrganization;
  parentTeam: ITeam;
  privacy: TeamPrivacy;
  repositories: ITeamRepositoryConnection;
  repositoriesResourcePath: unknown;
  repositoriesUrl: unknown;
  resourcePath: unknown;
  slug: string;
  teamsResourcePath: unknown;
  teamsUrl: unknown;
  updatedAt: unknown;
  url: unknown;
  viewerCanAdminister: boolean;
}

interface TeamSelector {
  __typename: () => Field<"__typename">;

  ancestors: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: TeamConnectionSelector) => T
  ) => Field<
    "ancestors",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  avatarUrl: (variables: {
    size: unknown;
  }) => Field<"avatarUrl", [/* @todo */]>;

  childTeams: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      immediateOnly?: Variable<"immediateOnly"> | boolean;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | TeamOrder;
      userLogins?: Variable<"userLogins"> | string;
    },
    select: (t: TeamConnectionSelector) => T
  ) => Field<
    "childTeams",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"immediateOnly", Variable<"immediateOnly"> | boolean>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | TeamOrder>,
      Argument<"userLogins", Variable<"userLogins"> | string>
    ],
    SelectionSet<T>
  >;

  combinedSlug: () => Field<"combinedSlug">;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  description: () => Field<"description">;

  discussion: <T extends Array<Selection>>(
    variables: { number?: Variable<"number"> | number },
    select: (t: TeamDiscussionSelector) => T
  ) => Field<
    "discussion",
    [Argument<"number", Variable<"number"> | number>],
    SelectionSet<T>
  >;

  discussions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      isPinned?: Variable<"isPinned"> | boolean;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | TeamDiscussionOrder;
    },
    select: (t: TeamDiscussionConnectionSelector) => T
  ) => Field<
    "discussions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"isPinned", Variable<"isPinned"> | boolean>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | TeamDiscussionOrder>
    ],
    SelectionSet<T>
  >;

  discussionsResourcePath: () => Field<"discussionsResourcePath">;

  discussionsUrl: () => Field<"discussionsUrl">;

  editTeamResourcePath: () => Field<"editTeamResourcePath">;

  editTeamUrl: () => Field<"editTeamUrl">;

  id: () => Field<"id">;

  invitations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: OrganizationInvitationConnectionSelector) => T
  ) => Field<
    "invitations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  memberStatuses: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | UserStatusOrder;
    },
    select: (t: UserStatusConnectionSelector) => T
  ) => Field<
    "memberStatuses",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | UserStatusOrder>
    ],
    SelectionSet<T>
  >;

  members: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      membership?: Variable<"membership"> | TeamMembershipType;
      orderBy?: Variable<"orderBy"> | TeamMemberOrder;
      query?: Variable<"query"> | string;
      role?: Variable<"role"> | TeamMemberRole;
    },
    select: (t: TeamMemberConnectionSelector) => T
  ) => Field<
    "members",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"membership", Variable<"membership"> | TeamMembershipType>,
      Argument<"orderBy", Variable<"orderBy"> | TeamMemberOrder>,
      Argument<"query", Variable<"query"> | string>,
      Argument<"role", Variable<"role"> | TeamMemberRole>
    ],
    SelectionSet<T>
  >;

  membersResourcePath: () => Field<"membersResourcePath">;

  membersUrl: () => Field<"membersUrl">;

  name: () => Field<"name">;

  newTeamResourcePath: () => Field<"newTeamResourcePath">;

  newTeamUrl: () => Field<"newTeamUrl">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  parentTeam: <T extends Array<Selection>>(
    select: (t: TeamSelector) => T
  ) => Field<"parentTeam", never, SelectionSet<T>>;

  privacy: () => Field<"privacy">;

  repositories: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | TeamRepositoryOrder;
      query?: Variable<"query"> | string;
    },
    select: (t: TeamRepositoryConnectionSelector) => T
  ) => Field<
    "repositories",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | TeamRepositoryOrder>,
      Argument<"query", Variable<"query"> | string>
    ],
    SelectionSet<T>
  >;

  repositoriesResourcePath: () => Field<"repositoriesResourcePath">;

  repositoriesUrl: () => Field<"repositoriesUrl">;

  resourcePath: () => Field<"resourcePath">;

  slug: () => Field<"slug">;

  teamsResourcePath: () => Field<"teamsResourcePath">;

  teamsUrl: () => Field<"teamsUrl">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  viewerCanAdminister: () => Field<"viewerCanAdminister">;

  viewerCanSubscribe: () => Field<"viewerCanSubscribe">;

  viewerSubscription: () => Field<"viewerSubscription">;
}

export const isTeam = (
  object: Record<string, any>
): object is Partial<ITeam> => {
  return object.__typename === "Team";
};

export const Team: TeamSelector = {
  __typename: () => new Field("__typename"),

  ancestors: (variables, select) =>
    new Field(
      "ancestors",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(TeamConnection))
    ),

  avatarUrl: (variables) => new Field("avatarUrl"),

  childTeams: (variables, select) =>
    new Field(
      "childTeams",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("immediateOnly", variables.immediateOnly),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("userLogins", variables.userLogins),
      ],
      new SelectionSet(select(TeamConnection))
    ),

  combinedSlug: () => new Field("combinedSlug"),
  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  description: () => new Field("description"),

  discussion: (variables, select) =>
    new Field(
      "discussion",
      [new Argument("number", variables.number)],
      new SelectionSet(select(TeamDiscussion))
    ),

  discussions: (variables, select) =>
    new Field(
      "discussions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("isPinned", variables.isPinned),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(TeamDiscussionConnection))
    ),

  discussionsResourcePath: () => new Field("discussionsResourcePath"),
  discussionsUrl: () => new Field("discussionsUrl"),
  editTeamResourcePath: () => new Field("editTeamResourcePath"),
  editTeamUrl: () => new Field("editTeamUrl"),
  id: () => new Field("id"),

  invitations: (variables, select) =>
    new Field(
      "invitations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(OrganizationInvitationConnection))
    ),

  memberStatuses: (variables, select) =>
    new Field(
      "memberStatuses",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(UserStatusConnection))
    ),

  members: (variables, select) =>
    new Field(
      "members",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("membership", variables.membership, TeamMembershipType),
        new Argument("orderBy", variables.orderBy),
        new Argument("query", variables.query),
        new Argument("role", variables.role, TeamMemberRole),
      ],
      new SelectionSet(select(TeamMemberConnection))
    ),

  membersResourcePath: () => new Field("membersResourcePath"),
  membersUrl: () => new Field("membersUrl"),
  name: () => new Field("name"),
  newTeamResourcePath: () => new Field("newTeamResourcePath"),
  newTeamUrl: () => new Field("newTeamUrl"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  parentTeam: (select) =>
    new Field("parentTeam", undefined as never, new SelectionSet(select(Team))),

  privacy: () => new Field("privacy"),

  repositories: (variables, select) =>
    new Field(
      "repositories",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("query", variables.query),
      ],
      new SelectionSet(select(TeamRepositoryConnection))
    ),

  repositoriesResourcePath: () => new Field("repositoriesResourcePath"),
  repositoriesUrl: () => new Field("repositoriesUrl"),
  resourcePath: () => new Field("resourcePath"),
  slug: () => new Field("slug"),
  teamsResourcePath: () => new Field("teamsResourcePath"),
  teamsUrl: () => new Field("teamsUrl"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
  viewerCanAdminister: () => new Field("viewerCanAdminister"),
  viewerCanSubscribe: () => new Field("viewerCanSubscribe"),
  viewerSubscription: () => new Field("viewerSubscription"),
};

export interface ITeamAddMemberAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    ITeamAuditEntryData {
  __typename: "TeamAddMemberAuditEntry";
  isLdapMapped: boolean;
}

interface TeamAddMemberAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  isLdapMapped: () => Field<"isLdapMapped">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  team: <T extends Array<Selection>>(
    select: (t: TeamSelector) => T
  ) => Field<"team", never, SelectionSet<T>>;

  teamName: () => Field<"teamName">;

  teamResourcePath: () => Field<"teamResourcePath">;

  teamUrl: () => Field<"teamUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isTeamAddMemberAuditEntry = (
  object: Record<string, any>
): object is Partial<ITeamAddMemberAuditEntry> => {
  return object.__typename === "TeamAddMemberAuditEntry";
};

export const TeamAddMemberAuditEntry: TeamAddMemberAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  isLdapMapped: () => new Field("isLdapMapped"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  team: (select) =>
    new Field("team", undefined as never, new SelectionSet(select(Team))),

  teamName: () => new Field("teamName"),
  teamResourcePath: () => new Field("teamResourcePath"),
  teamUrl: () => new Field("teamUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface ITeamAddRepositoryAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData,
    ITeamAuditEntryData {
  __typename: "TeamAddRepositoryAuditEntry";
  isLdapMapped: boolean;
}

interface TeamAddRepositoryAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  isLdapMapped: () => Field<"isLdapMapped">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  team: <T extends Array<Selection>>(
    select: (t: TeamSelector) => T
  ) => Field<"team", never, SelectionSet<T>>;

  teamName: () => Field<"teamName">;

  teamResourcePath: () => Field<"teamResourcePath">;

  teamUrl: () => Field<"teamUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isTeamAddRepositoryAuditEntry = (
  object: Record<string, any>
): object is Partial<ITeamAddRepositoryAuditEntry> => {
  return object.__typename === "TeamAddRepositoryAuditEntry";
};

export const TeamAddRepositoryAuditEntry: TeamAddRepositoryAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  isLdapMapped: () => new Field("isLdapMapped"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  team: (select) =>
    new Field("team", undefined as never, new SelectionSet(select(Team))),

  teamName: () => new Field("teamName"),
  teamResourcePath: () => new Field("teamResourcePath"),
  teamUrl: () => new Field("teamUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface ITeamAuditEntryData {
  __typename: string;
  team: ITeam;
  teamName: string;
  teamResourcePath: unknown;
  teamUrl: unknown;
}

interface TeamAuditEntryDataSelector {
  __typename: () => Field<"__typename">;

  team: <T extends Array<Selection>>(
    select: (t: TeamSelector) => T
  ) => Field<"team", never, SelectionSet<T>>;

  teamName: () => Field<"teamName">;

  teamResourcePath: () => Field<"teamResourcePath">;

  teamUrl: () => Field<"teamUrl">;

  on: <
    T extends Array<Selection>,
    F extends
      | "OrgRestoreMemberMembershipTeamAuditEntryData"
      | "TeamAddMemberAuditEntry"
      | "TeamAddRepositoryAuditEntry"
      | "TeamChangeParentTeamAuditEntry"
      | "TeamRemoveMemberAuditEntry"
      | "TeamRemoveRepositoryAuditEntry"
  >(
    type: F,
    select: (
      t: F extends "OrgRestoreMemberMembershipTeamAuditEntryData"
        ? OrgRestoreMemberMembershipTeamAuditEntryDataSelector
        : F extends "TeamAddMemberAuditEntry"
        ? TeamAddMemberAuditEntrySelector
        : F extends "TeamAddRepositoryAuditEntry"
        ? TeamAddRepositoryAuditEntrySelector
        : F extends "TeamChangeParentTeamAuditEntry"
        ? TeamChangeParentTeamAuditEntrySelector
        : F extends "TeamRemoveMemberAuditEntry"
        ? TeamRemoveMemberAuditEntrySelector
        : F extends "TeamRemoveRepositoryAuditEntry"
        ? TeamRemoveRepositoryAuditEntrySelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const TeamAuditEntryData: TeamAuditEntryDataSelector = {
  __typename: () => new Field("__typename"),

  team: (select) =>
    new Field("team", undefined as never, new SelectionSet(select(Team))),

  teamName: () => new Field("teamName"),
  teamResourcePath: () => new Field("teamResourcePath"),
  teamUrl: () => new Field("teamUrl"),

  on: (type, select) => {
    switch (type) {
      case "OrgRestoreMemberMembershipTeamAuditEntryData": {
        return new InlineFragment(
          new NamedType("OrgRestoreMemberMembershipTeamAuditEntryData") as any,
          new SelectionSet(
            select(OrgRestoreMemberMembershipTeamAuditEntryData as any)
          )
        );
      }

      case "TeamAddMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamAddMemberAuditEntry") as any,
          new SelectionSet(select(TeamAddMemberAuditEntry as any))
        );
      }

      case "TeamAddRepositoryAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamAddRepositoryAuditEntry") as any,
          new SelectionSet(select(TeamAddRepositoryAuditEntry as any))
        );
      }

      case "TeamChangeParentTeamAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamChangeParentTeamAuditEntry") as any,
          new SelectionSet(select(TeamChangeParentTeamAuditEntry as any))
        );
      }

      case "TeamRemoveMemberAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamRemoveMemberAuditEntry") as any,
          new SelectionSet(select(TeamRemoveMemberAuditEntry as any))
        );
      }

      case "TeamRemoveRepositoryAuditEntry": {
        return new InlineFragment(
          new NamedType("TeamRemoveRepositoryAuditEntry") as any,
          new SelectionSet(select(TeamRemoveRepositoryAuditEntry as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface ITeamChangeParentTeamAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    ITeamAuditEntryData {
  __typename: "TeamChangeParentTeamAuditEntry";
  isLdapMapped: boolean;
  parentTeam: ITeam;
  parentTeamName: string;
  parentTeamNameWas: string;
  parentTeamResourcePath: unknown;
  parentTeamUrl: unknown;
  parentTeamWas: ITeam;
  parentTeamWasResourcePath: unknown;
  parentTeamWasUrl: unknown;
}

interface TeamChangeParentTeamAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  isLdapMapped: () => Field<"isLdapMapped">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  parentTeam: <T extends Array<Selection>>(
    select: (t: TeamSelector) => T
  ) => Field<"parentTeam", never, SelectionSet<T>>;

  parentTeamName: () => Field<"parentTeamName">;

  parentTeamNameWas: () => Field<"parentTeamNameWas">;

  parentTeamResourcePath: () => Field<"parentTeamResourcePath">;

  parentTeamUrl: () => Field<"parentTeamUrl">;

  parentTeamWas: <T extends Array<Selection>>(
    select: (t: TeamSelector) => T
  ) => Field<"parentTeamWas", never, SelectionSet<T>>;

  parentTeamWasResourcePath: () => Field<"parentTeamWasResourcePath">;

  parentTeamWasUrl: () => Field<"parentTeamWasUrl">;

  team: <T extends Array<Selection>>(
    select: (t: TeamSelector) => T
  ) => Field<"team", never, SelectionSet<T>>;

  teamName: () => Field<"teamName">;

  teamResourcePath: () => Field<"teamResourcePath">;

  teamUrl: () => Field<"teamUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isTeamChangeParentTeamAuditEntry = (
  object: Record<string, any>
): object is Partial<ITeamChangeParentTeamAuditEntry> => {
  return object.__typename === "TeamChangeParentTeamAuditEntry";
};

export const TeamChangeParentTeamAuditEntry: TeamChangeParentTeamAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  isLdapMapped: () => new Field("isLdapMapped"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  parentTeam: (select) =>
    new Field("parentTeam", undefined as never, new SelectionSet(select(Team))),

  parentTeamName: () => new Field("parentTeamName"),
  parentTeamNameWas: () => new Field("parentTeamNameWas"),
  parentTeamResourcePath: () => new Field("parentTeamResourcePath"),
  parentTeamUrl: () => new Field("parentTeamUrl"),

  parentTeamWas: (select) =>
    new Field(
      "parentTeamWas",
      undefined as never,
      new SelectionSet(select(Team))
    ),

  parentTeamWasResourcePath: () => new Field("parentTeamWasResourcePath"),
  parentTeamWasUrl: () => new Field("parentTeamWasUrl"),

  team: (select) =>
    new Field("team", undefined as never, new SelectionSet(select(Team))),

  teamName: () => new Field("teamName"),
  teamResourcePath: () => new Field("teamResourcePath"),
  teamUrl: () => new Field("teamUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface ITeamConnection {
  edges: ITeamEdge[];
  nodes: ITeam[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface TeamConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: TeamEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: TeamSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const TeamConnection: TeamConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field("edges", undefined as never, new SelectionSet(select(TeamEdge))),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(Team))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ITeamDiscussion
  extends IComment,
    IDeletable,
    INode,
    IReactable,
    ISubscribable,
    IUniformResourceLocatable,
    IUpdatable,
    IUpdatableComment {
  __typename: "TeamDiscussion";
  bodyVersion: string;
  comments: ITeamDiscussionCommentConnection;
  commentsResourcePath: unknown;
  commentsUrl: unknown;
  isPinned: boolean;
  isPrivate: boolean;
  number: number;
  team: ITeam;
  title: string;
  viewerCanPin: boolean;
}

interface TeamDiscussionSelector {
  __typename: () => Field<"__typename">;

  author: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"author", never, SelectionSet<T>>;

  authorAssociation: () => Field<"authorAssociation">;

  body: () => Field<"body">;

  bodyHTML: () => Field<"bodyHTML">;

  bodyText: () => Field<"bodyText">;

  bodyVersion: () => Field<"bodyVersion">;

  comments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      fromComment?: Variable<"fromComment"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | TeamDiscussionCommentOrder;
    },
    select: (t: TeamDiscussionCommentConnectionSelector) => T
  ) => Field<
    "comments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"fromComment", Variable<"fromComment"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | TeamDiscussionCommentOrder>
    ],
    SelectionSet<T>
  >;

  commentsResourcePath: () => Field<"commentsResourcePath">;

  commentsUrl: () => Field<"commentsUrl">;

  createdAt: () => Field<"createdAt">;

  createdViaEmail: () => Field<"createdViaEmail">;

  databaseId: () => Field<"databaseId">;

  editor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"editor", never, SelectionSet<T>>;

  id: () => Field<"id">;

  includesCreatedEdit: () => Field<"includesCreatedEdit">;

  isPinned: () => Field<"isPinned">;

  isPrivate: () => Field<"isPrivate">;

  lastEditedAt: () => Field<"lastEditedAt">;

  number: () => Field<"number">;

  publishedAt: () => Field<"publishedAt">;

  reactionGroups: <T extends Array<Selection>>(
    select: (t: ReactionGroupSelector) => T
  ) => Field<"reactionGroups", never, SelectionSet<T>>;

  reactions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      content?: Variable<"content"> | ReactionContent;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ReactionOrder;
    },
    select: (t: ReactionConnectionSelector) => T
  ) => Field<
    "reactions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"content", Variable<"content"> | ReactionContent>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ReactionOrder>
    ],
    SelectionSet<T>
  >;

  resourcePath: () => Field<"resourcePath">;

  team: <T extends Array<Selection>>(
    select: (t: TeamSelector) => T
  ) => Field<"team", never, SelectionSet<T>>;

  title: () => Field<"title">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  userContentEdits: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserContentEditConnectionSelector) => T
  ) => Field<
    "userContentEdits",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  viewerCanDelete: () => Field<"viewerCanDelete">;

  viewerCanPin: () => Field<"viewerCanPin">;

  viewerCanReact: () => Field<"viewerCanReact">;

  viewerCanSubscribe: () => Field<"viewerCanSubscribe">;

  viewerCanUpdate: () => Field<"viewerCanUpdate">;

  viewerCannotUpdateReasons: () => Field<"viewerCannotUpdateReasons">;

  viewerDidAuthor: () => Field<"viewerDidAuthor">;

  viewerSubscription: () => Field<"viewerSubscription">;
}

export const isTeamDiscussion = (
  object: Record<string, any>
): object is Partial<ITeamDiscussion> => {
  return object.__typename === "TeamDiscussion";
};

export const TeamDiscussion: TeamDiscussionSelector = {
  __typename: () => new Field("__typename"),

  author: (select) =>
    new Field("author", undefined as never, new SelectionSet(select(Actor))),

  authorAssociation: () => new Field("authorAssociation"),
  body: () => new Field("body"),
  bodyHTML: () => new Field("bodyHTML"),
  bodyText: () => new Field("bodyText"),
  bodyVersion: () => new Field("bodyVersion"),

  comments: (variables, select) =>
    new Field(
      "comments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("fromComment", variables.fromComment),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(TeamDiscussionCommentConnection))
    ),

  commentsResourcePath: () => new Field("commentsResourcePath"),
  commentsUrl: () => new Field("commentsUrl"),
  createdAt: () => new Field("createdAt"),
  createdViaEmail: () => new Field("createdViaEmail"),
  databaseId: () => new Field("databaseId"),

  editor: (select) =>
    new Field("editor", undefined as never, new SelectionSet(select(Actor))),

  id: () => new Field("id"),
  includesCreatedEdit: () => new Field("includesCreatedEdit"),
  isPinned: () => new Field("isPinned"),
  isPrivate: () => new Field("isPrivate"),
  lastEditedAt: () => new Field("lastEditedAt"),
  number: () => new Field("number"),
  publishedAt: () => new Field("publishedAt"),

  reactionGroups: (select) =>
    new Field(
      "reactionGroups",
      undefined as never,
      new SelectionSet(select(ReactionGroup))
    ),

  reactions: (variables, select) =>
    new Field(
      "reactions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("content", variables.content, ReactionContent),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(ReactionConnection))
    ),

  resourcePath: () => new Field("resourcePath"),

  team: (select) =>
    new Field("team", undefined as never, new SelectionSet(select(Team))),

  title: () => new Field("title"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),

  userContentEdits: (variables, select) =>
    new Field(
      "userContentEdits",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserContentEditConnection))
    ),

  viewerCanDelete: () => new Field("viewerCanDelete"),
  viewerCanPin: () => new Field("viewerCanPin"),
  viewerCanReact: () => new Field("viewerCanReact"),
  viewerCanSubscribe: () => new Field("viewerCanSubscribe"),
  viewerCanUpdate: () => new Field("viewerCanUpdate"),
  viewerCannotUpdateReasons: () => new Field("viewerCannotUpdateReasons"),
  viewerDidAuthor: () => new Field("viewerDidAuthor"),
  viewerSubscription: () => new Field("viewerSubscription"),
};

export interface ITeamDiscussionComment
  extends IComment,
    IDeletable,
    INode,
    IReactable,
    IUniformResourceLocatable,
    IUpdatable,
    IUpdatableComment {
  __typename: "TeamDiscussionComment";
  bodyVersion: string;
  discussion: ITeamDiscussion;
  number: number;
}

interface TeamDiscussionCommentSelector {
  __typename: () => Field<"__typename">;

  author: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"author", never, SelectionSet<T>>;

  authorAssociation: () => Field<"authorAssociation">;

  body: () => Field<"body">;

  bodyHTML: () => Field<"bodyHTML">;

  bodyText: () => Field<"bodyText">;

  bodyVersion: () => Field<"bodyVersion">;

  createdAt: () => Field<"createdAt">;

  createdViaEmail: () => Field<"createdViaEmail">;

  databaseId: () => Field<"databaseId">;

  discussion: <T extends Array<Selection>>(
    select: (t: TeamDiscussionSelector) => T
  ) => Field<"discussion", never, SelectionSet<T>>;

  editor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"editor", never, SelectionSet<T>>;

  id: () => Field<"id">;

  includesCreatedEdit: () => Field<"includesCreatedEdit">;

  lastEditedAt: () => Field<"lastEditedAt">;

  number: () => Field<"number">;

  publishedAt: () => Field<"publishedAt">;

  reactionGroups: <T extends Array<Selection>>(
    select: (t: ReactionGroupSelector) => T
  ) => Field<"reactionGroups", never, SelectionSet<T>>;

  reactions: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      content?: Variable<"content"> | ReactionContent;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ReactionOrder;
    },
    select: (t: ReactionConnectionSelector) => T
  ) => Field<
    "reactions",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"content", Variable<"content"> | ReactionContent>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ReactionOrder>
    ],
    SelectionSet<T>
  >;

  resourcePath: () => Field<"resourcePath">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  userContentEdits: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: UserContentEditConnectionSelector) => T
  ) => Field<
    "userContentEdits",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  viewerCanDelete: () => Field<"viewerCanDelete">;

  viewerCanReact: () => Field<"viewerCanReact">;

  viewerCanUpdate: () => Field<"viewerCanUpdate">;

  viewerCannotUpdateReasons: () => Field<"viewerCannotUpdateReasons">;

  viewerDidAuthor: () => Field<"viewerDidAuthor">;
}

export const isTeamDiscussionComment = (
  object: Record<string, any>
): object is Partial<ITeamDiscussionComment> => {
  return object.__typename === "TeamDiscussionComment";
};

export const TeamDiscussionComment: TeamDiscussionCommentSelector = {
  __typename: () => new Field("__typename"),

  author: (select) =>
    new Field("author", undefined as never, new SelectionSet(select(Actor))),

  authorAssociation: () => new Field("authorAssociation"),
  body: () => new Field("body"),
  bodyHTML: () => new Field("bodyHTML"),
  bodyText: () => new Field("bodyText"),
  bodyVersion: () => new Field("bodyVersion"),
  createdAt: () => new Field("createdAt"),
  createdViaEmail: () => new Field("createdViaEmail"),
  databaseId: () => new Field("databaseId"),

  discussion: (select) =>
    new Field(
      "discussion",
      undefined as never,
      new SelectionSet(select(TeamDiscussion))
    ),

  editor: (select) =>
    new Field("editor", undefined as never, new SelectionSet(select(Actor))),

  id: () => new Field("id"),
  includesCreatedEdit: () => new Field("includesCreatedEdit"),
  lastEditedAt: () => new Field("lastEditedAt"),
  number: () => new Field("number"),
  publishedAt: () => new Field("publishedAt"),

  reactionGroups: (select) =>
    new Field(
      "reactionGroups",
      undefined as never,
      new SelectionSet(select(ReactionGroup))
    ),

  reactions: (variables, select) =>
    new Field(
      "reactions",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("content", variables.content, ReactionContent),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(ReactionConnection))
    ),

  resourcePath: () => new Field("resourcePath"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),

  userContentEdits: (variables, select) =>
    new Field(
      "userContentEdits",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(UserContentEditConnection))
    ),

  viewerCanDelete: () => new Field("viewerCanDelete"),
  viewerCanReact: () => new Field("viewerCanReact"),
  viewerCanUpdate: () => new Field("viewerCanUpdate"),
  viewerCannotUpdateReasons: () => new Field("viewerCannotUpdateReasons"),
  viewerDidAuthor: () => new Field("viewerDidAuthor"),
};

export interface ITeamDiscussionCommentConnection {
  edges: ITeamDiscussionCommentEdge[];
  nodes: ITeamDiscussionComment[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface TeamDiscussionCommentConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: TeamDiscussionCommentEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: TeamDiscussionCommentSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const TeamDiscussionCommentConnection: TeamDiscussionCommentConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(TeamDiscussionCommentEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(TeamDiscussionComment))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ITeamDiscussionCommentEdge {
  cursor: string;
  node: ITeamDiscussionComment;
}

interface TeamDiscussionCommentEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: TeamDiscussionCommentSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const TeamDiscussionCommentEdge: TeamDiscussionCommentEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(TeamDiscussionComment))
    ),
};

export interface ITeamDiscussionConnection {
  edges: ITeamDiscussionEdge[];
  nodes: ITeamDiscussion[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface TeamDiscussionConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: TeamDiscussionEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: TeamDiscussionSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const TeamDiscussionConnection: TeamDiscussionConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(TeamDiscussionEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(TeamDiscussion))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ITeamDiscussionEdge {
  cursor: string;
  node: ITeamDiscussion;
}

interface TeamDiscussionEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: TeamDiscussionSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const TeamDiscussionEdge: TeamDiscussionEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(TeamDiscussion))
    ),
};

export interface ITeamEdge {
  cursor: string;
  node: ITeam;
}

interface TeamEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: TeamSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const TeamEdge: TeamEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Team))),
};

export interface ITeamMemberConnection {
  edges: ITeamMemberEdge[];
  nodes: IUser[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface TeamMemberConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: TeamMemberEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const TeamMemberConnection: TeamMemberConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(TeamMemberEdge))
    ),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(User))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ITeamMemberEdge {
  cursor: string;
  memberAccessResourcePath: unknown;
  memberAccessUrl: unknown;
  node: IUser;
  role: TeamMemberRole;
}

interface TeamMemberEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  memberAccessResourcePath: () => Field<"memberAccessResourcePath">;

  memberAccessUrl: () => Field<"memberAccessUrl">;

  node: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;

  role: () => Field<"role">;
}

export const TeamMemberEdge: TeamMemberEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),
  memberAccessResourcePath: () => new Field("memberAccessResourcePath"),
  memberAccessUrl: () => new Field("memberAccessUrl"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(User))),

  role: () => new Field("role"),
};

export interface ITeamRemoveMemberAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    ITeamAuditEntryData {
  __typename: "TeamRemoveMemberAuditEntry";
  isLdapMapped: boolean;
}

interface TeamRemoveMemberAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  isLdapMapped: () => Field<"isLdapMapped">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  team: <T extends Array<Selection>>(
    select: (t: TeamSelector) => T
  ) => Field<"team", never, SelectionSet<T>>;

  teamName: () => Field<"teamName">;

  teamResourcePath: () => Field<"teamResourcePath">;

  teamUrl: () => Field<"teamUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isTeamRemoveMemberAuditEntry = (
  object: Record<string, any>
): object is Partial<ITeamRemoveMemberAuditEntry> => {
  return object.__typename === "TeamRemoveMemberAuditEntry";
};

export const TeamRemoveMemberAuditEntry: TeamRemoveMemberAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  isLdapMapped: () => new Field("isLdapMapped"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  team: (select) =>
    new Field("team", undefined as never, new SelectionSet(select(Team))),

  teamName: () => new Field("teamName"),
  teamResourcePath: () => new Field("teamResourcePath"),
  teamUrl: () => new Field("teamUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface ITeamRemoveRepositoryAuditEntry
  extends IAuditEntry,
    INode,
    IOrganizationAuditEntryData,
    IRepositoryAuditEntryData,
    ITeamAuditEntryData {
  __typename: "TeamRemoveRepositoryAuditEntry";
  isLdapMapped: boolean;
}

interface TeamRemoveRepositoryAuditEntrySelector {
  __typename: () => Field<"__typename">;

  action: () => Field<"action">;

  actor: <T extends Array<Selection>>(
    select: (t: AuditEntryActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  actorIp: () => Field<"actorIp">;

  actorLocation: <T extends Array<Selection>>(
    select: (t: ActorLocationSelector) => T
  ) => Field<"actorLocation", never, SelectionSet<T>>;

  actorLogin: () => Field<"actorLogin">;

  actorResourcePath: () => Field<"actorResourcePath">;

  actorUrl: () => Field<"actorUrl">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  isLdapMapped: () => Field<"isLdapMapped">;

  operationType: () => Field<"operationType">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  organizationName: () => Field<"organizationName">;

  organizationResourcePath: () => Field<"organizationResourcePath">;

  organizationUrl: () => Field<"organizationUrl">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  repositoryName: () => Field<"repositoryName">;

  repositoryResourcePath: () => Field<"repositoryResourcePath">;

  repositoryUrl: () => Field<"repositoryUrl">;

  team: <T extends Array<Selection>>(
    select: (t: TeamSelector) => T
  ) => Field<"team", never, SelectionSet<T>>;

  teamName: () => Field<"teamName">;

  teamResourcePath: () => Field<"teamResourcePath">;

  teamUrl: () => Field<"teamUrl">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;

  userLogin: () => Field<"userLogin">;

  userResourcePath: () => Field<"userResourcePath">;

  userUrl: () => Field<"userUrl">;
}

export const isTeamRemoveRepositoryAuditEntry = (
  object: Record<string, any>
): object is Partial<ITeamRemoveRepositoryAuditEntry> => {
  return object.__typename === "TeamRemoveRepositoryAuditEntry";
};

export const TeamRemoveRepositoryAuditEntry: TeamRemoveRepositoryAuditEntrySelector = {
  __typename: () => new Field("__typename"),

  action: () => new Field("action"),

  actor: (select) =>
    new Field(
      "actor",
      undefined as never,
      new SelectionSet(select(AuditEntryActor))
    ),

  actorIp: () => new Field("actorIp"),

  actorLocation: (select) =>
    new Field(
      "actorLocation",
      undefined as never,
      new SelectionSet(select(ActorLocation))
    ),

  actorLogin: () => new Field("actorLogin"),
  actorResourcePath: () => new Field("actorResourcePath"),
  actorUrl: () => new Field("actorUrl"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),
  isLdapMapped: () => new Field("isLdapMapped"),
  operationType: () => new Field("operationType"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  organizationName: () => new Field("organizationName"),
  organizationResourcePath: () => new Field("organizationResourcePath"),
  organizationUrl: () => new Field("organizationUrl"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  repositoryName: () => new Field("repositoryName"),
  repositoryResourcePath: () => new Field("repositoryResourcePath"),
  repositoryUrl: () => new Field("repositoryUrl"),

  team: (select) =>
    new Field("team", undefined as never, new SelectionSet(select(Team))),

  teamName: () => new Field("teamName"),
  teamResourcePath: () => new Field("teamResourcePath"),
  teamUrl: () => new Field("teamUrl"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),

  userLogin: () => new Field("userLogin"),
  userResourcePath: () => new Field("userResourcePath"),
  userUrl: () => new Field("userUrl"),
};

export interface ITeamRepositoryConnection {
  edges: ITeamRepositoryEdge[];
  nodes: IRepository[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface TeamRepositoryConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: TeamRepositoryEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const TeamRepositoryConnection: TeamRepositoryConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(TeamRepositoryEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface ITeamRepositoryEdge {
  cursor: string;
  node: IRepository;
  permission: RepositoryPermission;
}

interface TeamRepositoryEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"node", never, SelectionSet<T>>;

  permission: () => Field<"permission">;
}

export const TeamRepositoryEdge: TeamRepositoryEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(Repository))),

  permission: () => new Field("permission"),
};

export interface ITextMatch {
  fragment: string;
  highlights: ITextMatchHighlight[];
  property: string;
}

interface TextMatchSelector {
  __typename: () => Field<"__typename">;

  fragment: () => Field<"fragment">;

  highlights: <T extends Array<Selection>>(
    select: (t: TextMatchHighlightSelector) => T
  ) => Field<"highlights", never, SelectionSet<T>>;

  property: () => Field<"property">;
}

export const TextMatch: TextMatchSelector = {
  __typename: () => new Field("__typename"),

  fragment: () => new Field("fragment"),

  highlights: (select) =>
    new Field(
      "highlights",
      undefined as never,
      new SelectionSet(select(TextMatchHighlight))
    ),

  property: () => new Field("property"),
};

export interface ITextMatchHighlight {
  beginIndice: number;
  endIndice: number;
  text: string;
}

interface TextMatchHighlightSelector {
  __typename: () => Field<"__typename">;

  beginIndice: () => Field<"beginIndice">;

  endIndice: () => Field<"endIndice">;

  text: () => Field<"text">;
}

export const TextMatchHighlight: TextMatchHighlightSelector = {
  __typename: () => new Field("__typename"),

  beginIndice: () => new Field("beginIndice"),
  endIndice: () => new Field("endIndice"),
  text: () => new Field("text"),
};

export interface ITopic extends INode, IStarrable {
  __typename: "Topic";
  name: string;
  relatedTopics: ITopic[];
}

interface TopicSelector {
  __typename: () => Field<"__typename">;

  id: () => Field<"id">;

  name: () => Field<"name">;

  relatedTopics: <T extends Array<Selection>>(
    variables: { first?: Variable<"first"> | number },
    select: (t: TopicSelector) => T
  ) => Field<
    "relatedTopics",
    [Argument<"first", Variable<"first"> | number>],
    SelectionSet<T>
  >;

  stargazerCount: () => Field<"stargazerCount">;

  stargazers: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | StarOrder;
    },
    select: (t: StargazerConnectionSelector) => T
  ) => Field<
    "stargazers",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | StarOrder>
    ],
    SelectionSet<T>
  >;

  viewerHasStarred: () => Field<"viewerHasStarred">;
}

export const isTopic = (
  object: Record<string, any>
): object is Partial<ITopic> => {
  return object.__typename === "Topic";
};

export const Topic: TopicSelector = {
  __typename: () => new Field("__typename"),

  id: () => new Field("id"),
  name: () => new Field("name"),

  relatedTopics: (variables, select) =>
    new Field(
      "relatedTopics",
      [new Argument("first", variables.first)],
      new SelectionSet(select(Topic))
    ),

  stargazerCount: () => new Field("stargazerCount"),

  stargazers: (variables, select) =>
    new Field(
      "stargazers",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(StargazerConnection))
    ),

  viewerHasStarred: () => new Field("viewerHasStarred"),
};

export interface ITopicAuditEntryData {
  __typename: string;
  topic: ITopic;
  topicName: string;
}

interface TopicAuditEntryDataSelector {
  __typename: () => Field<"__typename">;

  topic: <T extends Array<Selection>>(
    select: (t: TopicSelector) => T
  ) => Field<"topic", never, SelectionSet<T>>;

  topicName: () => Field<"topicName">;

  on: <
    T extends Array<Selection>,
    F extends "RepoAddTopicAuditEntry" | "RepoRemoveTopicAuditEntry"
  >(
    type: F,
    select: (
      t: F extends "RepoAddTopicAuditEntry"
        ? RepoAddTopicAuditEntrySelector
        : F extends "RepoRemoveTopicAuditEntry"
        ? RepoRemoveTopicAuditEntrySelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const TopicAuditEntryData: TopicAuditEntryDataSelector = {
  __typename: () => new Field("__typename"),

  topic: (select) =>
    new Field("topic", undefined as never, new SelectionSet(select(Topic))),

  topicName: () => new Field("topicName"),

  on: (type, select) => {
    switch (type) {
      case "RepoAddTopicAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoAddTopicAuditEntry") as any,
          new SelectionSet(select(RepoAddTopicAuditEntry as any))
        );
      }

      case "RepoRemoveTopicAuditEntry": {
        return new InlineFragment(
          new NamedType("RepoRemoveTopicAuditEntry") as any,
          new SelectionSet(select(RepoRemoveTopicAuditEntry as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface ITransferIssuePayload {
  clientMutationId: string;
  issue: IIssue;
}

interface TransferIssuePayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  issue: <T extends Array<Selection>>(
    select: (t: IssueSelector) => T
  ) => Field<"issue", never, SelectionSet<T>>;
}

export const TransferIssuePayload: TransferIssuePayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  issue: (select) =>
    new Field("issue", undefined as never, new SelectionSet(select(Issue))),
};

export interface ITransferredEvent extends INode {
  __typename: "TransferredEvent";
  actor: IActor;
  createdAt: unknown;
  fromRepository: IRepository;
  issue: IIssue;
}

interface TransferredEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  fromRepository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"fromRepository", never, SelectionSet<T>>;

  id: () => Field<"id">;

  issue: <T extends Array<Selection>>(
    select: (t: IssueSelector) => T
  ) => Field<"issue", never, SelectionSet<T>>;
}

export const isTransferredEvent = (
  object: Record<string, any>
): object is Partial<ITransferredEvent> => {
  return object.__typename === "TransferredEvent";
};

export const TransferredEvent: TransferredEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),

  fromRepository: (select) =>
    new Field(
      "fromRepository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  id: () => new Field("id"),

  issue: (select) =>
    new Field("issue", undefined as never, new SelectionSet(select(Issue))),
};

export interface ITree extends IGitObject, INode {
  __typename: "Tree";
  entries: ITreeEntry[];
}

interface TreeSelector {
  __typename: () => Field<"__typename">;

  abbreviatedOid: () => Field<"abbreviatedOid">;

  commitResourcePath: () => Field<"commitResourcePath">;

  commitUrl: () => Field<"commitUrl">;

  entries: <T extends Array<Selection>>(
    select: (t: TreeEntrySelector) => T
  ) => Field<"entries", never, SelectionSet<T>>;

  id: () => Field<"id">;

  oid: () => Field<"oid">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const isTree = (
  object: Record<string, any>
): object is Partial<ITree> => {
  return object.__typename === "Tree";
};

export const Tree: TreeSelector = {
  __typename: () => new Field("__typename"),

  abbreviatedOid: () => new Field("abbreviatedOid"),
  commitResourcePath: () => new Field("commitResourcePath"),
  commitUrl: () => new Field("commitUrl"),

  entries: (select) =>
    new Field(
      "entries",
      undefined as never,
      new SelectionSet(select(TreeEntry))
    ),

  id: () => new Field("id"),
  oid: () => new Field("oid"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface ITreeEntry {
  extension: string;
  isGenerated: boolean;
  mode: number;
  name: string;
  object: IGitObject;
  oid: unknown;
  path: string;
  repository: IRepository;
  submodule: ISubmodule;
  type: string;
}

interface TreeEntrySelector {
  __typename: () => Field<"__typename">;

  extension: () => Field<"extension">;

  isGenerated: () => Field<"isGenerated">;

  mode: () => Field<"mode">;

  name: () => Field<"name">;

  object: <T extends Array<Selection>>(
    select: (t: GitObjectSelector) => T
  ) => Field<"object", never, SelectionSet<T>>;

  oid: () => Field<"oid">;

  path: () => Field<"path">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;

  submodule: <T extends Array<Selection>>(
    select: (t: SubmoduleSelector) => T
  ) => Field<"submodule", never, SelectionSet<T>>;

  type: () => Field<"type">;
}

export const TreeEntry: TreeEntrySelector = {
  __typename: () => new Field("__typename"),

  extension: () => new Field("extension"),
  isGenerated: () => new Field("isGenerated"),
  mode: () => new Field("mode"),
  name: () => new Field("name"),

  object: (select) =>
    new Field(
      "object",
      undefined as never,
      new SelectionSet(select(GitObject))
    ),

  oid: () => new Field("oid"),
  path: () => new Field("path"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),

  submodule: (select) =>
    new Field(
      "submodule",
      undefined as never,
      new SelectionSet(select(Submodule))
    ),

  type: () => new Field("type"),
};

export interface IUnarchiveRepositoryPayload {
  clientMutationId: string;
  repository: IRepository;
}

interface UnarchiveRepositoryPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const UnarchiveRepositoryPayload: UnarchiveRepositoryPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface IUnassignedEvent extends INode {
  __typename: "UnassignedEvent";
  actor: IActor;
  assignable: IAssignable;
  assignee: IAssignee;
  createdAt: unknown;
  user: IUser;
}

interface UnassignedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  assignable: <T extends Array<Selection>>(
    select: (t: AssignableSelector) => T
  ) => Field<"assignable", never, SelectionSet<T>>;

  assignee: <T extends Array<Selection>>(
    select: (t: AssigneeSelector) => T
  ) => Field<"assignee", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  /**
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   */

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const isUnassignedEvent = (
  object: Record<string, any>
): object is Partial<IUnassignedEvent> => {
  return object.__typename === "UnassignedEvent";
};

export const UnassignedEvent: UnassignedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  assignable: (select) =>
    new Field(
      "assignable",
      undefined as never,
      new SelectionSet(select(Assignable))
    ),

  assignee: (select) =>
    new Field(
      "assignee",
      undefined as never,
      new SelectionSet(select(Assignee))
    ),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  /**
   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.
   */

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface IUnfollowUserPayload {
  clientMutationId: string;
  user: IUser;
}

interface UnfollowUserPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const UnfollowUserPayload: UnfollowUserPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface IUniformResourceLocatable {
  __typename: string;
  resourcePath: unknown;
  url: unknown;
}

interface UniformResourceLocatableSelector {
  __typename: () => Field<"__typename">;

  resourcePath: () => Field<"resourcePath">;

  url: () => Field<"url">;

  on: <
    T extends Array<Selection>,
    F extends
      | "Bot"
      | "CheckRun"
      | "ClosedEvent"
      | "Commit"
      | "ConvertToDraftEvent"
      | "CrossReferencedEvent"
      | "Gist"
      | "Issue"
      | "Mannequin"
      | "MergedEvent"
      | "Milestone"
      | "Organization"
      | "PullRequest"
      | "PullRequestCommit"
      | "ReadyForReviewEvent"
      | "Release"
      | "Repository"
      | "RepositoryTopic"
      | "ReviewDismissedEvent"
      | "TeamDiscussion"
      | "TeamDiscussionComment"
      | "User"
  >(
    type: F,
    select: (
      t: F extends "Bot"
        ? BotSelector
        : F extends "CheckRun"
        ? CheckRunSelector
        : F extends "ClosedEvent"
        ? ClosedEventSelector
        : F extends "Commit"
        ? CommitSelector
        : F extends "ConvertToDraftEvent"
        ? ConvertToDraftEventSelector
        : F extends "CrossReferencedEvent"
        ? CrossReferencedEventSelector
        : F extends "Gist"
        ? GistSelector
        : F extends "Issue"
        ? IssueSelector
        : F extends "Mannequin"
        ? MannequinSelector
        : F extends "MergedEvent"
        ? MergedEventSelector
        : F extends "Milestone"
        ? MilestoneSelector
        : F extends "Organization"
        ? OrganizationSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : F extends "PullRequestCommit"
        ? PullRequestCommitSelector
        : F extends "ReadyForReviewEvent"
        ? ReadyForReviewEventSelector
        : F extends "Release"
        ? ReleaseSelector
        : F extends "Repository"
        ? RepositorySelector
        : F extends "RepositoryTopic"
        ? RepositoryTopicSelector
        : F extends "ReviewDismissedEvent"
        ? ReviewDismissedEventSelector
        : F extends "TeamDiscussion"
        ? TeamDiscussionSelector
        : F extends "TeamDiscussionComment"
        ? TeamDiscussionCommentSelector
        : F extends "User"
        ? UserSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const UniformResourceLocatable: UniformResourceLocatableSelector = {
  __typename: () => new Field("__typename"),

  resourcePath: () => new Field("resourcePath"),
  url: () => new Field("url"),

  on: (type, select) => {
    switch (type) {
      case "Bot": {
        return new InlineFragment(
          new NamedType("Bot") as any,
          new SelectionSet(select(Bot as any))
        );
      }

      case "CheckRun": {
        return new InlineFragment(
          new NamedType("CheckRun") as any,
          new SelectionSet(select(CheckRun as any))
        );
      }

      case "ClosedEvent": {
        return new InlineFragment(
          new NamedType("ClosedEvent") as any,
          new SelectionSet(select(ClosedEvent as any))
        );
      }

      case "Commit": {
        return new InlineFragment(
          new NamedType("Commit") as any,
          new SelectionSet(select(Commit as any))
        );
      }

      case "ConvertToDraftEvent": {
        return new InlineFragment(
          new NamedType("ConvertToDraftEvent") as any,
          new SelectionSet(select(ConvertToDraftEvent as any))
        );
      }

      case "CrossReferencedEvent": {
        return new InlineFragment(
          new NamedType("CrossReferencedEvent") as any,
          new SelectionSet(select(CrossReferencedEvent as any))
        );
      }

      case "Gist": {
        return new InlineFragment(
          new NamedType("Gist") as any,
          new SelectionSet(select(Gist as any))
        );
      }

      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "Mannequin": {
        return new InlineFragment(
          new NamedType("Mannequin") as any,
          new SelectionSet(select(Mannequin as any))
        );
      }

      case "MergedEvent": {
        return new InlineFragment(
          new NamedType("MergedEvent") as any,
          new SelectionSet(select(MergedEvent as any))
        );
      }

      case "Milestone": {
        return new InlineFragment(
          new NamedType("Milestone") as any,
          new SelectionSet(select(Milestone as any))
        );
      }

      case "Organization": {
        return new InlineFragment(
          new NamedType("Organization") as any,
          new SelectionSet(select(Organization as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      case "PullRequestCommit": {
        return new InlineFragment(
          new NamedType("PullRequestCommit") as any,
          new SelectionSet(select(PullRequestCommit as any))
        );
      }

      case "ReadyForReviewEvent": {
        return new InlineFragment(
          new NamedType("ReadyForReviewEvent") as any,
          new SelectionSet(select(ReadyForReviewEvent as any))
        );
      }

      case "Release": {
        return new InlineFragment(
          new NamedType("Release") as any,
          new SelectionSet(select(Release as any))
        );
      }

      case "Repository": {
        return new InlineFragment(
          new NamedType("Repository") as any,
          new SelectionSet(select(Repository as any))
        );
      }

      case "RepositoryTopic": {
        return new InlineFragment(
          new NamedType("RepositoryTopic") as any,
          new SelectionSet(select(RepositoryTopic as any))
        );
      }

      case "ReviewDismissedEvent": {
        return new InlineFragment(
          new NamedType("ReviewDismissedEvent") as any,
          new SelectionSet(select(ReviewDismissedEvent as any))
        );
      }

      case "TeamDiscussion": {
        return new InlineFragment(
          new NamedType("TeamDiscussion") as any,
          new SelectionSet(select(TeamDiscussion as any))
        );
      }

      case "TeamDiscussionComment": {
        return new InlineFragment(
          new NamedType("TeamDiscussionComment") as any,
          new SelectionSet(select(TeamDiscussionComment as any))
        );
      }

      case "User": {
        return new InlineFragment(
          new NamedType("User") as any,
          new SelectionSet(select(User as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IUnknownSignature extends IGitSignature {
  __typename: "UnknownSignature";
}

interface UnknownSignatureSelector {
  __typename: () => Field<"__typename">;

  email: () => Field<"email">;

  isValid: () => Field<"isValid">;

  payload: () => Field<"payload">;

  signature: () => Field<"signature">;

  signer: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"signer", never, SelectionSet<T>>;

  state: () => Field<"state">;

  wasSignedByGitHub: () => Field<"wasSignedByGitHub">;
}

export const isUnknownSignature = (
  object: Record<string, any>
): object is Partial<IUnknownSignature> => {
  return object.__typename === "UnknownSignature";
};

export const UnknownSignature: UnknownSignatureSelector = {
  __typename: () => new Field("__typename"),

  email: () => new Field("email"),
  isValid: () => new Field("isValid"),
  payload: () => new Field("payload"),
  signature: () => new Field("signature"),

  signer: (select) =>
    new Field("signer", undefined as never, new SelectionSet(select(User))),

  state: () => new Field("state"),
  wasSignedByGitHub: () => new Field("wasSignedByGitHub"),
};

export interface IUnlabeledEvent extends INode {
  __typename: "UnlabeledEvent";
  actor: IActor;
  createdAt: unknown;
  label: ILabel;
  labelable: ILabelable;
}

interface UnlabeledEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  label: <T extends Array<Selection>>(
    select: (t: LabelSelector) => T
  ) => Field<"label", never, SelectionSet<T>>;

  labelable: <T extends Array<Selection>>(
    select: (t: LabelableSelector) => T
  ) => Field<"labelable", never, SelectionSet<T>>;
}

export const isUnlabeledEvent = (
  object: Record<string, any>
): object is Partial<IUnlabeledEvent> => {
  return object.__typename === "UnlabeledEvent";
};

export const UnlabeledEvent: UnlabeledEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  label: (select) =>
    new Field("label", undefined as never, new SelectionSet(select(Label))),

  labelable: (select) =>
    new Field(
      "labelable",
      undefined as never,
      new SelectionSet(select(Labelable))
    ),
};

export interface IUnlinkRepositoryFromProjectPayload {
  clientMutationId: string;
  project: IProject;
  repository: IRepository;
}

interface UnlinkRepositoryFromProjectPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  project: <T extends Array<Selection>>(
    select: (t: ProjectSelector) => T
  ) => Field<"project", never, SelectionSet<T>>;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const UnlinkRepositoryFromProjectPayload: UnlinkRepositoryFromProjectPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  project: (select) =>
    new Field("project", undefined as never, new SelectionSet(select(Project))),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface IUnlockLockablePayload {
  actor: IActor;
  clientMutationId: string;
  unlockedRecord: ILockable;
}

interface UnlockLockablePayloadSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;

  unlockedRecord: <T extends Array<Selection>>(
    select: (t: LockableSelector) => T
  ) => Field<"unlockedRecord", never, SelectionSet<T>>;
}

export const UnlockLockablePayload: UnlockLockablePayloadSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  clientMutationId: () => new Field("clientMutationId"),

  unlockedRecord: (select) =>
    new Field(
      "unlockedRecord",
      undefined as never,
      new SelectionSet(select(Lockable))
    ),
};

export interface IUnlockedEvent extends INode {
  __typename: "UnlockedEvent";
  actor: IActor;
  createdAt: unknown;
  lockable: ILockable;
}

interface UnlockedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  lockable: <T extends Array<Selection>>(
    select: (t: LockableSelector) => T
  ) => Field<"lockable", never, SelectionSet<T>>;
}

export const isUnlockedEvent = (
  object: Record<string, any>
): object is Partial<IUnlockedEvent> => {
  return object.__typename === "UnlockedEvent";
};

export const UnlockedEvent: UnlockedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  lockable: (select) =>
    new Field(
      "lockable",
      undefined as never,
      new SelectionSet(select(Lockable))
    ),
};

export interface IUnmarkFileAsViewedPayload {
  clientMutationId: string;
  pullRequest: IPullRequest;
}

interface UnmarkFileAsViewedPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const UnmarkFileAsViewedPayload: UnmarkFileAsViewedPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IUnmarkIssueAsDuplicatePayload {
  clientMutationId: string;
  duplicate: IIssueOrPullRequest;
}

interface UnmarkIssueAsDuplicatePayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  duplicate: <T extends Array<Selection>>(
    select: (t: IssueOrPullRequestSelector) => T
  ) => Field<"duplicate", never, SelectionSet<T>>;
}

export const UnmarkIssueAsDuplicatePayload: UnmarkIssueAsDuplicatePayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  duplicate: (select) =>
    new Field(
      "duplicate",
      undefined as never,
      new SelectionSet(select(IssueOrPullRequest))
    ),
};

export interface IUnmarkedAsDuplicateEvent extends INode {
  __typename: "UnmarkedAsDuplicateEvent";
  actor: IActor;
  canonical: IIssueOrPullRequest;
  createdAt: unknown;
  duplicate: IIssueOrPullRequest;
  isCrossRepository: boolean;
}

interface UnmarkedAsDuplicateEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  canonical: <T extends Array<Selection>>(
    select: (t: IssueOrPullRequestSelector) => T
  ) => Field<"canonical", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  duplicate: <T extends Array<Selection>>(
    select: (t: IssueOrPullRequestSelector) => T
  ) => Field<"duplicate", never, SelectionSet<T>>;

  id: () => Field<"id">;

  isCrossRepository: () => Field<"isCrossRepository">;
}

export const isUnmarkedAsDuplicateEvent = (
  object: Record<string, any>
): object is Partial<IUnmarkedAsDuplicateEvent> => {
  return object.__typename === "UnmarkedAsDuplicateEvent";
};

export const UnmarkedAsDuplicateEvent: UnmarkedAsDuplicateEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  canonical: (select) =>
    new Field(
      "canonical",
      undefined as never,
      new SelectionSet(select(IssueOrPullRequest))
    ),

  createdAt: () => new Field("createdAt"),

  duplicate: (select) =>
    new Field(
      "duplicate",
      undefined as never,
      new SelectionSet(select(IssueOrPullRequest))
    ),

  id: () => new Field("id"),
  isCrossRepository: () => new Field("isCrossRepository"),
};

export interface IUnminimizeCommentPayload {
  clientMutationId: string;
  unminimizedComment: IMinimizable;
}

interface UnminimizeCommentPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  unminimizedComment: <T extends Array<Selection>>(
    select: (t: MinimizableSelector) => T
  ) => Field<"unminimizedComment", never, SelectionSet<T>>;
}

export const UnminimizeCommentPayload: UnminimizeCommentPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  unminimizedComment: (select) =>
    new Field(
      "unminimizedComment",
      undefined as never,
      new SelectionSet(select(Minimizable))
    ),
};

export interface IUnpinnedEvent extends INode {
  __typename: "UnpinnedEvent";
  actor: IActor;
  createdAt: unknown;
  issue: IIssue;
}

interface UnpinnedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  issue: <T extends Array<Selection>>(
    select: (t: IssueSelector) => T
  ) => Field<"issue", never, SelectionSet<T>>;
}

export const isUnpinnedEvent = (
  object: Record<string, any>
): object is Partial<IUnpinnedEvent> => {
  return object.__typename === "UnpinnedEvent";
};

export const UnpinnedEvent: UnpinnedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  issue: (select) =>
    new Field("issue", undefined as never, new SelectionSet(select(Issue))),
};

export interface IUnresolveReviewThreadPayload {
  clientMutationId: string;
  thread: IPullRequestReviewThread;
}

interface UnresolveReviewThreadPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  thread: <T extends Array<Selection>>(
    select: (t: PullRequestReviewThreadSelector) => T
  ) => Field<"thread", never, SelectionSet<T>>;
}

export const UnresolveReviewThreadPayload: UnresolveReviewThreadPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  thread: (select) =>
    new Field(
      "thread",
      undefined as never,
      new SelectionSet(select(PullRequestReviewThread))
    ),
};

export interface IUnsubscribedEvent extends INode {
  __typename: "UnsubscribedEvent";
  actor: IActor;
  createdAt: unknown;
  subscribable: ISubscribable;
}

interface UnsubscribedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  subscribable: <T extends Array<Selection>>(
    select: (t: SubscribableSelector) => T
  ) => Field<"subscribable", never, SelectionSet<T>>;
}

export const isUnsubscribedEvent = (
  object: Record<string, any>
): object is Partial<IUnsubscribedEvent> => {
  return object.__typename === "UnsubscribedEvent";
};

export const UnsubscribedEvent: UnsubscribedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  subscribable: (select) =>
    new Field(
      "subscribable",
      undefined as never,
      new SelectionSet(select(Subscribable))
    ),
};

export interface IUpdatable {
  __typename: string;
  viewerCanUpdate: boolean;
}

interface UpdatableSelector {
  __typename: () => Field<"__typename">;

  viewerCanUpdate: () => Field<"viewerCanUpdate">;

  on: <
    T extends Array<Selection>,
    F extends
      | "CommitComment"
      | "GistComment"
      | "Issue"
      | "IssueComment"
      | "Project"
      | "PullRequest"
      | "PullRequestReview"
      | "PullRequestReviewComment"
      | "TeamDiscussion"
      | "TeamDiscussionComment"
  >(
    type: F,
    select: (
      t: F extends "CommitComment"
        ? CommitCommentSelector
        : F extends "GistComment"
        ? GistCommentSelector
        : F extends "Issue"
        ? IssueSelector
        : F extends "IssueComment"
        ? IssueCommentSelector
        : F extends "Project"
        ? ProjectSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : F extends "PullRequestReview"
        ? PullRequestReviewSelector
        : F extends "PullRequestReviewComment"
        ? PullRequestReviewCommentSelector
        : F extends "TeamDiscussion"
        ? TeamDiscussionSelector
        : F extends "TeamDiscussionComment"
        ? TeamDiscussionCommentSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const Updatable: UpdatableSelector = {
  __typename: () => new Field("__typename"),

  viewerCanUpdate: () => new Field("viewerCanUpdate"),

  on: (type, select) => {
    switch (type) {
      case "CommitComment": {
        return new InlineFragment(
          new NamedType("CommitComment") as any,
          new SelectionSet(select(CommitComment as any))
        );
      }

      case "GistComment": {
        return new InlineFragment(
          new NamedType("GistComment") as any,
          new SelectionSet(select(GistComment as any))
        );
      }

      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "IssueComment": {
        return new InlineFragment(
          new NamedType("IssueComment") as any,
          new SelectionSet(select(IssueComment as any))
        );
      }

      case "Project": {
        return new InlineFragment(
          new NamedType("Project") as any,
          new SelectionSet(select(Project as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      case "PullRequestReview": {
        return new InlineFragment(
          new NamedType("PullRequestReview") as any,
          new SelectionSet(select(PullRequestReview as any))
        );
      }

      case "PullRequestReviewComment": {
        return new InlineFragment(
          new NamedType("PullRequestReviewComment") as any,
          new SelectionSet(select(PullRequestReviewComment as any))
        );
      }

      case "TeamDiscussion": {
        return new InlineFragment(
          new NamedType("TeamDiscussion") as any,
          new SelectionSet(select(TeamDiscussion as any))
        );
      }

      case "TeamDiscussionComment": {
        return new InlineFragment(
          new NamedType("TeamDiscussionComment") as any,
          new SelectionSet(select(TeamDiscussionComment as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IUpdatableComment {
  __typename: string;
  viewerCannotUpdateReasons: CommentCannotUpdateReason[];
}

interface UpdatableCommentSelector {
  __typename: () => Field<"__typename">;

  viewerCannotUpdateReasons: () => Field<"viewerCannotUpdateReasons">;

  on: <
    T extends Array<Selection>,
    F extends
      | "CommitComment"
      | "GistComment"
      | "Issue"
      | "IssueComment"
      | "PullRequest"
      | "PullRequestReview"
      | "PullRequestReviewComment"
      | "TeamDiscussion"
      | "TeamDiscussionComment"
  >(
    type: F,
    select: (
      t: F extends "CommitComment"
        ? CommitCommentSelector
        : F extends "GistComment"
        ? GistCommentSelector
        : F extends "Issue"
        ? IssueSelector
        : F extends "IssueComment"
        ? IssueCommentSelector
        : F extends "PullRequest"
        ? PullRequestSelector
        : F extends "PullRequestReview"
        ? PullRequestReviewSelector
        : F extends "PullRequestReviewComment"
        ? PullRequestReviewCommentSelector
        : F extends "TeamDiscussion"
        ? TeamDiscussionSelector
        : F extends "TeamDiscussionComment"
        ? TeamDiscussionCommentSelector
        : never
    ) => T
  ) => InlineFragment<NamedType<F, any>, SelectionSet<T>>;
}

export const UpdatableComment: UpdatableCommentSelector = {
  __typename: () => new Field("__typename"),

  viewerCannotUpdateReasons: () => new Field("viewerCannotUpdateReasons"),

  on: (type, select) => {
    switch (type) {
      case "CommitComment": {
        return new InlineFragment(
          new NamedType("CommitComment") as any,
          new SelectionSet(select(CommitComment as any))
        );
      }

      case "GistComment": {
        return new InlineFragment(
          new NamedType("GistComment") as any,
          new SelectionSet(select(GistComment as any))
        );
      }

      case "Issue": {
        return new InlineFragment(
          new NamedType("Issue") as any,
          new SelectionSet(select(Issue as any))
        );
      }

      case "IssueComment": {
        return new InlineFragment(
          new NamedType("IssueComment") as any,
          new SelectionSet(select(IssueComment as any))
        );
      }

      case "PullRequest": {
        return new InlineFragment(
          new NamedType("PullRequest") as any,
          new SelectionSet(select(PullRequest as any))
        );
      }

      case "PullRequestReview": {
        return new InlineFragment(
          new NamedType("PullRequestReview") as any,
          new SelectionSet(select(PullRequestReview as any))
        );
      }

      case "PullRequestReviewComment": {
        return new InlineFragment(
          new NamedType("PullRequestReviewComment") as any,
          new SelectionSet(select(PullRequestReviewComment as any))
        );
      }

      case "TeamDiscussion": {
        return new InlineFragment(
          new NamedType("TeamDiscussion") as any,
          new SelectionSet(select(TeamDiscussion as any))
        );
      }

      case "TeamDiscussionComment": {
        return new InlineFragment(
          new NamedType("TeamDiscussionComment") as any,
          new SelectionSet(select(TeamDiscussionComment as any))
        );
      }

      default:
        throw new Error("Unknown type!");
    }
  },
};

export interface IUpdateBranchProtectionRulePayload {
  branchProtectionRule: IBranchProtectionRule;
  clientMutationId: string;
}

interface UpdateBranchProtectionRulePayloadSelector {
  __typename: () => Field<"__typename">;

  branchProtectionRule: <T extends Array<Selection>>(
    select: (t: BranchProtectionRuleSelector) => T
  ) => Field<"branchProtectionRule", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;
}

export const UpdateBranchProtectionRulePayload: UpdateBranchProtectionRulePayloadSelector = {
  __typename: () => new Field("__typename"),

  branchProtectionRule: (select) =>
    new Field(
      "branchProtectionRule",
      undefined as never,
      new SelectionSet(select(BranchProtectionRule))
    ),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface IUpdateCheckRunPayload {
  checkRun: ICheckRun;
  clientMutationId: string;
}

interface UpdateCheckRunPayloadSelector {
  __typename: () => Field<"__typename">;

  checkRun: <T extends Array<Selection>>(
    select: (t: CheckRunSelector) => T
  ) => Field<"checkRun", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;
}

export const UpdateCheckRunPayload: UpdateCheckRunPayloadSelector = {
  __typename: () => new Field("__typename"),

  checkRun: (select) =>
    new Field(
      "checkRun",
      undefined as never,
      new SelectionSet(select(CheckRun))
    ),

  clientMutationId: () => new Field("clientMutationId"),
};

export interface IUpdateCheckSuitePreferencesPayload {
  clientMutationId: string;
  repository: IRepository;
}

interface UpdateCheckSuitePreferencesPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const UpdateCheckSuitePreferencesPayload: UpdateCheckSuitePreferencesPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface IUpdateEnterpriseAdministratorRolePayload {
  clientMutationId: string;
  message: string;
}

interface UpdateEnterpriseAdministratorRolePayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  message: () => Field<"message">;
}

export const UpdateEnterpriseAdministratorRolePayload: UpdateEnterpriseAdministratorRolePayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),
  message: () => new Field("message"),
};

export interface IUpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
}

interface UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload: UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),
};

export interface IUpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
}

interface UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const UpdateEnterpriseDefaultRepositoryPermissionSettingPayload: UpdateEnterpriseDefaultRepositoryPermissionSettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),
};

export interface IUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
}

interface UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),
};

export interface IUpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
}

interface UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload: UpdateEnterpriseMembersCanCreateRepositoriesSettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),
};

export interface IUpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
}

interface UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const UpdateEnterpriseMembersCanDeleteIssuesSettingPayload: UpdateEnterpriseMembersCanDeleteIssuesSettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),
};

export interface IUpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
}

interface UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload: UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),
};

export interface IUpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
}

interface UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload: UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),
};

export interface IUpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
}

interface UpdateEnterpriseMembersCanMakePurchasesSettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const UpdateEnterpriseMembersCanMakePurchasesSettingPayload: UpdateEnterpriseMembersCanMakePurchasesSettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),
};

export interface IUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
}

interface UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),
};

export interface IUpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
}

interface UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload: UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),
};

export interface IUpdateEnterpriseOrganizationProjectsSettingPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
}

interface UpdateEnterpriseOrganizationProjectsSettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const UpdateEnterpriseOrganizationProjectsSettingPayload: UpdateEnterpriseOrganizationProjectsSettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),
};

export interface IUpdateEnterpriseProfilePayload {
  clientMutationId: string;
  enterprise: IEnterprise;
}

interface UpdateEnterpriseProfilePayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;
}

export const UpdateEnterpriseProfilePayload: UpdateEnterpriseProfilePayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),
};

export interface IUpdateEnterpriseRepositoryProjectsSettingPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
}

interface UpdateEnterpriseRepositoryProjectsSettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const UpdateEnterpriseRepositoryProjectsSettingPayload: UpdateEnterpriseRepositoryProjectsSettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),
};

export interface IUpdateEnterpriseTeamDiscussionsSettingPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
}

interface UpdateEnterpriseTeamDiscussionsSettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const UpdateEnterpriseTeamDiscussionsSettingPayload: UpdateEnterpriseTeamDiscussionsSettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),
};

export interface IUpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  clientMutationId: string;
  enterprise: IEnterprise;
  message: string;
}

interface UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  enterprise: <T extends Array<Selection>>(
    select: (t: EnterpriseSelector) => T
  ) => Field<"enterprise", never, SelectionSet<T>>;

  message: () => Field<"message">;
}

export const UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  enterprise: (select) =>
    new Field(
      "enterprise",
      undefined as never,
      new SelectionSet(select(Enterprise))
    ),

  message: () => new Field("message"),
};

export interface IUpdateIpAllowListEnabledSettingPayload {
  clientMutationId: string;
  owner: IIpAllowListOwner;
}

interface UpdateIpAllowListEnabledSettingPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  owner: <T extends Array<Selection>>(
    select: (t: IpAllowListOwnerSelector) => T
  ) => Field<"owner", never, SelectionSet<T>>;
}

export const UpdateIpAllowListEnabledSettingPayload: UpdateIpAllowListEnabledSettingPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  owner: (select) =>
    new Field(
      "owner",
      undefined as never,
      new SelectionSet(select(IpAllowListOwner))
    ),
};

export interface IUpdateIpAllowListEntryPayload {
  clientMutationId: string;
  ipAllowListEntry: IIpAllowListEntry;
}

interface UpdateIpAllowListEntryPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  ipAllowListEntry: <T extends Array<Selection>>(
    select: (t: IpAllowListEntrySelector) => T
  ) => Field<"ipAllowListEntry", never, SelectionSet<T>>;
}

export const UpdateIpAllowListEntryPayload: UpdateIpAllowListEntryPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  ipAllowListEntry: (select) =>
    new Field(
      "ipAllowListEntry",
      undefined as never,
      new SelectionSet(select(IpAllowListEntry))
    ),
};

export interface IUpdateIssueCommentPayload {
  clientMutationId: string;
  issueComment: IIssueComment;
}

interface UpdateIssueCommentPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  issueComment: <T extends Array<Selection>>(
    select: (t: IssueCommentSelector) => T
  ) => Field<"issueComment", never, SelectionSet<T>>;
}

export const UpdateIssueCommentPayload: UpdateIssueCommentPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  issueComment: (select) =>
    new Field(
      "issueComment",
      undefined as never,
      new SelectionSet(select(IssueComment))
    ),
};

export interface IUpdateIssuePayload {
  actor: IActor;
  clientMutationId: string;
  issue: IIssue;
}

interface UpdateIssuePayloadSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;

  issue: <T extends Array<Selection>>(
    select: (t: IssueSelector) => T
  ) => Field<"issue", never, SelectionSet<T>>;
}

export const UpdateIssuePayload: UpdateIssuePayloadSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  clientMutationId: () => new Field("clientMutationId"),

  issue: (select) =>
    new Field("issue", undefined as never, new SelectionSet(select(Issue))),
};

export interface IUpdateProjectCardPayload {
  clientMutationId: string;
  projectCard: IProjectCard;
}

interface UpdateProjectCardPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  projectCard: <T extends Array<Selection>>(
    select: (t: ProjectCardSelector) => T
  ) => Field<"projectCard", never, SelectionSet<T>>;
}

export const UpdateProjectCardPayload: UpdateProjectCardPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  projectCard: (select) =>
    new Field(
      "projectCard",
      undefined as never,
      new SelectionSet(select(ProjectCard))
    ),
};

export interface IUpdateProjectColumnPayload {
  clientMutationId: string;
  projectColumn: IProjectColumn;
}

interface UpdateProjectColumnPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  projectColumn: <T extends Array<Selection>>(
    select: (t: ProjectColumnSelector) => T
  ) => Field<"projectColumn", never, SelectionSet<T>>;
}

export const UpdateProjectColumnPayload: UpdateProjectColumnPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  projectColumn: (select) =>
    new Field(
      "projectColumn",
      undefined as never,
      new SelectionSet(select(ProjectColumn))
    ),
};

export interface IUpdateProjectPayload {
  clientMutationId: string;
  project: IProject;
}

interface UpdateProjectPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  project: <T extends Array<Selection>>(
    select: (t: ProjectSelector) => T
  ) => Field<"project", never, SelectionSet<T>>;
}

export const UpdateProjectPayload: UpdateProjectPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  project: (select) =>
    new Field("project", undefined as never, new SelectionSet(select(Project))),
};

export interface IUpdatePullRequestPayload {
  actor: IActor;
  clientMutationId: string;
  pullRequest: IPullRequest;
}

interface UpdatePullRequestPayloadSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequest: <T extends Array<Selection>>(
    select: (t: PullRequestSelector) => T
  ) => Field<"pullRequest", never, SelectionSet<T>>;
}

export const UpdatePullRequestPayload: UpdatePullRequestPayloadSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequest: (select) =>
    new Field(
      "pullRequest",
      undefined as never,
      new SelectionSet(select(PullRequest))
    ),
};

export interface IUpdatePullRequestReviewCommentPayload {
  clientMutationId: string;
  pullRequestReviewComment: IPullRequestReviewComment;
}

interface UpdatePullRequestReviewCommentPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequestReviewComment: <T extends Array<Selection>>(
    select: (t: PullRequestReviewCommentSelector) => T
  ) => Field<"pullRequestReviewComment", never, SelectionSet<T>>;
}

export const UpdatePullRequestReviewCommentPayload: UpdatePullRequestReviewCommentPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequestReviewComment: (select) =>
    new Field(
      "pullRequestReviewComment",
      undefined as never,
      new SelectionSet(select(PullRequestReviewComment))
    ),
};

export interface IUpdatePullRequestReviewPayload {
  clientMutationId: string;
  pullRequestReview: IPullRequestReview;
}

interface UpdatePullRequestReviewPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  pullRequestReview: <T extends Array<Selection>>(
    select: (t: PullRequestReviewSelector) => T
  ) => Field<"pullRequestReview", never, SelectionSet<T>>;
}

export const UpdatePullRequestReviewPayload: UpdatePullRequestReviewPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  pullRequestReview: (select) =>
    new Field(
      "pullRequestReview",
      undefined as never,
      new SelectionSet(select(PullRequestReview))
    ),
};

export interface IUpdateRefPayload {
  clientMutationId: string;
  ref: IRef;
}

interface UpdateRefPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  ref: <T extends Array<Selection>>(
    select: (t: RefSelector) => T
  ) => Field<"ref", never, SelectionSet<T>>;
}

export const UpdateRefPayload: UpdateRefPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  ref: (select) =>
    new Field("ref", undefined as never, new SelectionSet(select(Ref))),
};

export interface IUpdateRepositoryPayload {
  clientMutationId: string;
  repository: IRepository;
}

interface UpdateRepositoryPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const UpdateRepositoryPayload: UpdateRepositoryPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface IUpdateSubscriptionPayload {
  clientMutationId: string;
  subscribable: ISubscribable;
}

interface UpdateSubscriptionPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  subscribable: <T extends Array<Selection>>(
    select: (t: SubscribableSelector) => T
  ) => Field<"subscribable", never, SelectionSet<T>>;
}

export const UpdateSubscriptionPayload: UpdateSubscriptionPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  subscribable: (select) =>
    new Field(
      "subscribable",
      undefined as never,
      new SelectionSet(select(Subscribable))
    ),
};

export interface IUpdateTeamDiscussionCommentPayload {
  clientMutationId: string;
  teamDiscussionComment: ITeamDiscussionComment;
}

interface UpdateTeamDiscussionCommentPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  teamDiscussionComment: <T extends Array<Selection>>(
    select: (t: TeamDiscussionCommentSelector) => T
  ) => Field<"teamDiscussionComment", never, SelectionSet<T>>;
}

export const UpdateTeamDiscussionCommentPayload: UpdateTeamDiscussionCommentPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  teamDiscussionComment: (select) =>
    new Field(
      "teamDiscussionComment",
      undefined as never,
      new SelectionSet(select(TeamDiscussionComment))
    ),
};

export interface IUpdateTeamDiscussionPayload {
  clientMutationId: string;
  teamDiscussion: ITeamDiscussion;
}

interface UpdateTeamDiscussionPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  teamDiscussion: <T extends Array<Selection>>(
    select: (t: TeamDiscussionSelector) => T
  ) => Field<"teamDiscussion", never, SelectionSet<T>>;
}

export const UpdateTeamDiscussionPayload: UpdateTeamDiscussionPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),

  teamDiscussion: (select) =>
    new Field(
      "teamDiscussion",
      undefined as never,
      new SelectionSet(select(TeamDiscussion))
    ),
};

export interface IUpdateTopicsPayload {
  clientMutationId: string;
  invalidTopicNames: string[];
  repository: IRepository;
}

interface UpdateTopicsPayloadSelector {
  __typename: () => Field<"__typename">;

  clientMutationId: () => Field<"clientMutationId">;

  invalidTopicNames: () => Field<"invalidTopicNames">;

  repository: <T extends Array<Selection>>(
    select: (t: RepositorySelector) => T
  ) => Field<"repository", never, SelectionSet<T>>;
}

export const UpdateTopicsPayload: UpdateTopicsPayloadSelector = {
  __typename: () => new Field("__typename"),

  clientMutationId: () => new Field("clientMutationId"),
  invalidTopicNames: () => new Field("invalidTopicNames"),

  repository: (select) =>
    new Field(
      "repository",
      undefined as never,
      new SelectionSet(select(Repository))
    ),
};

export interface IUser
  extends IActor,
    INode,
    IPackageOwner,
    IProfileOwner,
    IProjectOwner,
    IRepositoryOwner,
    ISponsorable,
    IUniformResourceLocatable {
  __typename: "User";
  bio: string;
  bioHTML: unknown;
  commitComments: ICommitCommentConnection;
  company: string;
  companyHTML: unknown;
  contributionsCollection: IContributionsCollection;
  createdAt: unknown;
  databaseId: number;
  followers: IFollowerConnection;
  following: IFollowingConnection;
  gist: IGist;
  gistComments: IGistCommentConnection;
  gists: IGistConnection;
  hovercard: IHovercard;
  interactionAbility: IRepositoryInteractionAbility;
  isBountyHunter: boolean;
  isCampusExpert: boolean;
  isDeveloperProgramMember: boolean;
  isEmployee: boolean;
  isHireable: boolean;
  isSiteAdmin: boolean;
  isViewer: boolean;
  issueComments: IIssueCommentConnection;
  issues: IIssueConnection;
  organization: IOrganization;
  organizationVerifiedDomainEmails: string[];
  organizations: IOrganizationConnection;
  publicKeys: IPublicKeyConnection;
  pullRequests: IPullRequestConnection;
  repositoriesContributedTo: IRepositoryConnection;
  savedReplies: ISavedReplyConnection;
  starredRepositories: IStarredRepositoryConnection;
  status: IUserStatus;
  topRepositories: IRepositoryConnection;
  twitterUsername: string;
  updatedAt: unknown;
  viewerCanFollow: boolean;
  viewerIsFollowing: boolean;
  watching: IRepositoryConnection;
}

interface UserSelector {
  __typename: () => Field<"__typename">;

  anyPinnableItems: (variables: {
    type: unknown;
  }) => Field<"anyPinnableItems", [/* @todo */]>;

  avatarUrl: (variables: {
    size: unknown;
  }) => Field<"avatarUrl", [/* @todo */]>;

  bio: () => Field<"bio">;

  bioHTML: () => Field<"bioHTML">;

  commitComments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: CommitCommentConnectionSelector) => T
  ) => Field<
    "commitComments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  company: () => Field<"company">;

  companyHTML: () => Field<"companyHTML">;

  contributionsCollection: <T extends Array<Selection>>(
    variables: {
      from?: Variable<"from"> | unknown;
      organizationID?: Variable<"organizationID"> | string;
      to?: Variable<"to"> | unknown;
    },
    select: (t: ContributionsCollectionSelector) => T
  ) => Field<
    "contributionsCollection",
    [
      Argument<"from", Variable<"from"> | unknown>,
      Argument<"organizationID", Variable<"organizationID"> | string>,
      Argument<"to", Variable<"to"> | unknown>
    ],
    SelectionSet<T>
  >;

  createdAt: () => Field<"createdAt">;

  databaseId: () => Field<"databaseId">;

  email: () => Field<"email">;

  followers: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: FollowerConnectionSelector) => T
  ) => Field<
    "followers",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  following: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: FollowingConnectionSelector) => T
  ) => Field<
    "following",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  gist: <T extends Array<Selection>>(
    variables: { name?: Variable<"name"> | string },
    select: (t: GistSelector) => T
  ) => Field<
    "gist",
    [Argument<"name", Variable<"name"> | string>],
    SelectionSet<T>
  >;

  gistComments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: GistCommentConnectionSelector) => T
  ) => Field<
    "gistComments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  gists: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | GistOrder;
      privacy?: Variable<"privacy"> | GistPrivacy;
    },
    select: (t: GistConnectionSelector) => T
  ) => Field<
    "gists",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | GistOrder>,
      Argument<"privacy", Variable<"privacy"> | GistPrivacy>
    ],
    SelectionSet<T>
  >;

  hasSponsorsListing: () => Field<"hasSponsorsListing">;

  hovercard: <T extends Array<Selection>>(
    variables: { primarySubjectId?: Variable<"primarySubjectId"> | string },
    select: (t: HovercardSelector) => T
  ) => Field<
    "hovercard",
    [Argument<"primarySubjectId", Variable<"primarySubjectId"> | string>],
    SelectionSet<T>
  >;

  id: () => Field<"id">;

  interactionAbility: <T extends Array<Selection>>(
    select: (t: RepositoryInteractionAbilitySelector) => T
  ) => Field<"interactionAbility", never, SelectionSet<T>>;

  isBountyHunter: () => Field<"isBountyHunter">;

  isCampusExpert: () => Field<"isCampusExpert">;

  isDeveloperProgramMember: () => Field<"isDeveloperProgramMember">;

  isEmployee: () => Field<"isEmployee">;

  isHireable: () => Field<"isHireable">;

  isSiteAdmin: () => Field<"isSiteAdmin">;

  isSponsoringViewer: () => Field<"isSponsoringViewer">;

  isViewer: () => Field<"isViewer">;

  issueComments: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IssueCommentOrder;
    },
    select: (t: IssueCommentConnectionSelector) => T
  ) => Field<
    "issueComments",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IssueCommentOrder>
    ],
    SelectionSet<T>
  >;

  issues: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      filterBy?: Variable<"filterBy"> | IssueFilters;
      first?: Variable<"first"> | number;
      labels?: Variable<"labels"> | string;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IssueOrder;
      states?: Variable<"states"> | IssueState;
    },
    select: (t: IssueConnectionSelector) => T
  ) => Field<
    "issues",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"filterBy", Variable<"filterBy"> | IssueFilters>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"labels", Variable<"labels"> | string>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IssueOrder>,
      Argument<"states", Variable<"states"> | IssueState>
    ],
    SelectionSet<T>
  >;

  itemShowcase: <T extends Array<Selection>>(
    select: (t: ProfileItemShowcaseSelector) => T
  ) => Field<"itemShowcase", never, SelectionSet<T>>;

  location: () => Field<"location">;

  login: () => Field<"login">;

  name: () => Field<"name">;

  organization: <T extends Array<Selection>>(
    variables: { login?: Variable<"login"> | string },
    select: (t: OrganizationSelector) => T
  ) => Field<
    "organization",
    [Argument<"login", Variable<"login"> | string>],
    SelectionSet<T>
  >;

  organizationVerifiedDomainEmails: (variables: {
    login: unknown;
  }) => Field<"organizationVerifiedDomainEmails", [/* @todo */]>;

  organizations: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: OrganizationConnectionSelector) => T
  ) => Field<
    "organizations",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  packages: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      names?: Variable<"names"> | string;
      orderBy?: Variable<"orderBy"> | PackageOrder;
      packageType?: Variable<"packageType"> | PackageType;
      repositoryId?: Variable<"repositoryId"> | string;
    },
    select: (t: PackageConnectionSelector) => T
  ) => Field<
    "packages",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"names", Variable<"names"> | string>,
      Argument<"orderBy", Variable<"orderBy"> | PackageOrder>,
      Argument<"packageType", Variable<"packageType"> | PackageType>,
      Argument<"repositoryId", Variable<"repositoryId"> | string>
    ],
    SelectionSet<T>
  >;

  pinnableItems: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      types?: Variable<"types"> | PinnableItemType;
    },
    select: (t: PinnableItemConnectionSelector) => T
  ) => Field<
    "pinnableItems",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"types", Variable<"types"> | PinnableItemType>
    ],
    SelectionSet<T>
  >;

  pinnedItems: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      types?: Variable<"types"> | PinnableItemType;
    },
    select: (t: PinnableItemConnectionSelector) => T
  ) => Field<
    "pinnedItems",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"types", Variable<"types"> | PinnableItemType>
    ],
    SelectionSet<T>
  >;

  pinnedItemsRemaining: () => Field<"pinnedItemsRemaining">;

  project: <T extends Array<Selection>>(
    variables: { number?: Variable<"number"> | number },
    select: (t: ProjectSelector) => T
  ) => Field<
    "project",
    [Argument<"number", Variable<"number"> | number>],
    SelectionSet<T>
  >;

  projects: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | ProjectOrder;
      search?: Variable<"search"> | string;
      states?: Variable<"states"> | ProjectState;
    },
    select: (t: ProjectConnectionSelector) => T
  ) => Field<
    "projects",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | ProjectOrder>,
      Argument<"search", Variable<"search"> | string>,
      Argument<"states", Variable<"states"> | ProjectState>
    ],
    SelectionSet<T>
  >;

  projectsResourcePath: () => Field<"projectsResourcePath">;

  projectsUrl: () => Field<"projectsUrl">;

  publicKeys: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
    },
    select: (t: PublicKeyConnectionSelector) => T
  ) => Field<
    "publicKeys",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>
    ],
    SelectionSet<T>
  >;

  pullRequests: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      baseRefName?: Variable<"baseRefName"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      headRefName?: Variable<"headRefName"> | string;
      labels?: Variable<"labels"> | string;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | IssueOrder;
      states?: Variable<"states"> | PullRequestState;
    },
    select: (t: PullRequestConnectionSelector) => T
  ) => Field<
    "pullRequests",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"baseRefName", Variable<"baseRefName"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"headRefName", Variable<"headRefName"> | string>,
      Argument<"labels", Variable<"labels"> | string>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | IssueOrder>,
      Argument<"states", Variable<"states"> | PullRequestState>
    ],
    SelectionSet<T>
  >;

  repositories: <T extends Array<Selection>>(
    variables: {
      affiliations?: Variable<"affiliations"> | RepositoryAffiliation;
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      isFork?: Variable<"isFork"> | boolean;
      isLocked?: Variable<"isLocked"> | boolean;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | RepositoryOrder;
      ownerAffiliations?: Variable<"ownerAffiliations"> | RepositoryAffiliation;
      privacy?: Variable<"privacy"> | RepositoryPrivacy;
    },
    select: (t: RepositoryConnectionSelector) => T
  ) => Field<
    "repositories",
    [
      Argument<
        "affiliations",
        Variable<"affiliations"> | RepositoryAffiliation
      >,
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"isFork", Variable<"isFork"> | boolean>,
      Argument<"isLocked", Variable<"isLocked"> | boolean>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | RepositoryOrder>,
      Argument<
        "ownerAffiliations",
        Variable<"ownerAffiliations"> | RepositoryAffiliation
      >,
      Argument<"privacy", Variable<"privacy"> | RepositoryPrivacy>
    ],
    SelectionSet<T>
  >;

  repositoriesContributedTo: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      contributionTypes?:
        | Variable<"contributionTypes">
        | RepositoryContributionType;
      first?: Variable<"first"> | number;
      includeUserRepositories?: Variable<"includeUserRepositories"> | boolean;
      isLocked?: Variable<"isLocked"> | boolean;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | RepositoryOrder;
      privacy?: Variable<"privacy"> | RepositoryPrivacy;
    },
    select: (t: RepositoryConnectionSelector) => T
  ) => Field<
    "repositoriesContributedTo",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<
        "contributionTypes",
        Variable<"contributionTypes"> | RepositoryContributionType
      >,
      Argument<"first", Variable<"first"> | number>,
      Argument<
        "includeUserRepositories",
        Variable<"includeUserRepositories"> | boolean
      >,
      Argument<"isLocked", Variable<"isLocked"> | boolean>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | RepositoryOrder>,
      Argument<"privacy", Variable<"privacy"> | RepositoryPrivacy>
    ],
    SelectionSet<T>
  >;

  repository: <T extends Array<Selection>>(
    variables: { name?: Variable<"name"> | string },
    select: (t: RepositorySelector) => T
  ) => Field<
    "repository",
    [Argument<"name", Variable<"name"> | string>],
    SelectionSet<T>
  >;

  resourcePath: () => Field<"resourcePath">;

  savedReplies: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | SavedReplyOrder;
    },
    select: (t: SavedReplyConnectionSelector) => T
  ) => Field<
    "savedReplies",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | SavedReplyOrder>
    ],
    SelectionSet<T>
  >;

  sponsorsListing: <T extends Array<Selection>>(
    select: (t: SponsorsListingSelector) => T
  ) => Field<"sponsorsListing", never, SelectionSet<T>>;

  sponsorshipsAsMaintainer: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      includePrivate?: Variable<"includePrivate"> | boolean;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | SponsorshipOrder;
    },
    select: (t: SponsorshipConnectionSelector) => T
  ) => Field<
    "sponsorshipsAsMaintainer",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"includePrivate", Variable<"includePrivate"> | boolean>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | SponsorshipOrder>
    ],
    SelectionSet<T>
  >;

  sponsorshipsAsSponsor: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | SponsorshipOrder;
    },
    select: (t: SponsorshipConnectionSelector) => T
  ) => Field<
    "sponsorshipsAsSponsor",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | SponsorshipOrder>
    ],
    SelectionSet<T>
  >;

  starredRepositories: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | StarOrder;
      ownedByViewer?: Variable<"ownedByViewer"> | boolean;
    },
    select: (t: StarredRepositoryConnectionSelector) => T
  ) => Field<
    "starredRepositories",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | StarOrder>,
      Argument<"ownedByViewer", Variable<"ownedByViewer"> | boolean>
    ],
    SelectionSet<T>
  >;

  status: <T extends Array<Selection>>(
    select: (t: UserStatusSelector) => T
  ) => Field<"status", never, SelectionSet<T>>;

  topRepositories: <T extends Array<Selection>>(
    variables: {
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | RepositoryOrder;
      since?: Variable<"since"> | unknown;
    },
    select: (t: RepositoryConnectionSelector) => T
  ) => Field<
    "topRepositories",
    [
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | RepositoryOrder>,
      Argument<"since", Variable<"since"> | unknown>
    ],
    SelectionSet<T>
  >;

  twitterUsername: () => Field<"twitterUsername">;

  updatedAt: () => Field<"updatedAt">;

  url: () => Field<"url">;

  viewerCanChangePinnedItems: () => Field<"viewerCanChangePinnedItems">;

  viewerCanCreateProjects: () => Field<"viewerCanCreateProjects">;

  viewerCanFollow: () => Field<"viewerCanFollow">;

  viewerCanSponsor: () => Field<"viewerCanSponsor">;

  viewerIsFollowing: () => Field<"viewerIsFollowing">;

  viewerIsSponsoring: () => Field<"viewerIsSponsoring">;

  watching: <T extends Array<Selection>>(
    variables: {
      affiliations?: Variable<"affiliations"> | RepositoryAffiliation;
      after?: Variable<"after"> | string;
      before?: Variable<"before"> | string;
      first?: Variable<"first"> | number;
      isLocked?: Variable<"isLocked"> | boolean;
      last?: Variable<"last"> | number;
      orderBy?: Variable<"orderBy"> | RepositoryOrder;
      ownerAffiliations?: Variable<"ownerAffiliations"> | RepositoryAffiliation;
      privacy?: Variable<"privacy"> | RepositoryPrivacy;
    },
    select: (t: RepositoryConnectionSelector) => T
  ) => Field<
    "watching",
    [
      Argument<
        "affiliations",
        Variable<"affiliations"> | RepositoryAffiliation
      >,
      Argument<"after", Variable<"after"> | string>,
      Argument<"before", Variable<"before"> | string>,
      Argument<"first", Variable<"first"> | number>,
      Argument<"isLocked", Variable<"isLocked"> | boolean>,
      Argument<"last", Variable<"last"> | number>,
      Argument<"orderBy", Variable<"orderBy"> | RepositoryOrder>,
      Argument<
        "ownerAffiliations",
        Variable<"ownerAffiliations"> | RepositoryAffiliation
      >,
      Argument<"privacy", Variable<"privacy"> | RepositoryPrivacy>
    ],
    SelectionSet<T>
  >;

  websiteUrl: () => Field<"websiteUrl">;
}

export const isUser = (
  object: Record<string, any>
): object is Partial<IUser> => {
  return object.__typename === "User";
};

export const User: UserSelector = {
  __typename: () => new Field("__typename"),

  anyPinnableItems: (variables) => new Field("anyPinnableItems"),
  avatarUrl: (variables) => new Field("avatarUrl"),
  bio: () => new Field("bio"),
  bioHTML: () => new Field("bioHTML"),

  commitComments: (variables, select) =>
    new Field(
      "commitComments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(CommitCommentConnection))
    ),

  company: () => new Field("company"),
  companyHTML: () => new Field("companyHTML"),

  contributionsCollection: (variables, select) =>
    new Field(
      "contributionsCollection",
      [
        new Argument("from", variables.from),
        new Argument("organizationID", variables.organizationID),
        new Argument("to", variables.to),
      ],
      new SelectionSet(select(ContributionsCollection))
    ),

  createdAt: () => new Field("createdAt"),
  databaseId: () => new Field("databaseId"),
  email: () => new Field("email"),

  followers: (variables, select) =>
    new Field(
      "followers",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(FollowerConnection))
    ),

  following: (variables, select) =>
    new Field(
      "following",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(FollowingConnection))
    ),

  gist: (variables, select) =>
    new Field(
      "gist",
      [new Argument("name", variables.name)],
      new SelectionSet(select(Gist))
    ),

  gistComments: (variables, select) =>
    new Field(
      "gistComments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(GistCommentConnection))
    ),

  gists: (variables, select) =>
    new Field(
      "gists",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("privacy", variables.privacy, GistPrivacy),
      ],
      new SelectionSet(select(GistConnection))
    ),

  hasSponsorsListing: () => new Field("hasSponsorsListing"),

  hovercard: (variables, select) =>
    new Field(
      "hovercard",
      [new Argument("primarySubjectId", variables.primarySubjectId)],
      new SelectionSet(select(Hovercard))
    ),

  id: () => new Field("id"),

  interactionAbility: (select) =>
    new Field(
      "interactionAbility",
      undefined as never,
      new SelectionSet(select(RepositoryInteractionAbility))
    ),

  isBountyHunter: () => new Field("isBountyHunter"),
  isCampusExpert: () => new Field("isCampusExpert"),
  isDeveloperProgramMember: () => new Field("isDeveloperProgramMember"),
  isEmployee: () => new Field("isEmployee"),
  isHireable: () => new Field("isHireable"),
  isSiteAdmin: () => new Field("isSiteAdmin"),
  isSponsoringViewer: () => new Field("isSponsoringViewer"),
  isViewer: () => new Field("isViewer"),

  issueComments: (variables, select) =>
    new Field(
      "issueComments",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(IssueCommentConnection))
    ),

  issues: (variables, select) =>
    new Field(
      "issues",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("filterBy", variables.filterBy),
        new Argument("first", variables.first),
        new Argument("labels", variables.labels),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("states", variables.states, IssueState),
      ],
      new SelectionSet(select(IssueConnection))
    ),

  itemShowcase: (select) =>
    new Field(
      "itemShowcase",
      undefined as never,
      new SelectionSet(select(ProfileItemShowcase))
    ),

  location: () => new Field("location"),
  login: () => new Field("login"),
  name: () => new Field("name"),

  organization: (variables, select) =>
    new Field(
      "organization",
      [new Argument("login", variables.login)],
      new SelectionSet(select(Organization))
    ),

  organizationVerifiedDomainEmails: (variables) =>
    new Field("organizationVerifiedDomainEmails"),

  organizations: (variables, select) =>
    new Field(
      "organizations",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(OrganizationConnection))
    ),

  packages: (variables, select) =>
    new Field(
      "packages",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("names", variables.names),
        new Argument("orderBy", variables.orderBy),
        new Argument("packageType", variables.packageType, PackageType),
        new Argument("repositoryId", variables.repositoryId),
      ],
      new SelectionSet(select(PackageConnection))
    ),

  pinnableItems: (variables, select) =>
    new Field(
      "pinnableItems",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("types", variables.types, PinnableItemType),
      ],
      new SelectionSet(select(PinnableItemConnection))
    ),

  pinnedItems: (variables, select) =>
    new Field(
      "pinnedItems",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("types", variables.types, PinnableItemType),
      ],
      new SelectionSet(select(PinnableItemConnection))
    ),

  pinnedItemsRemaining: () => new Field("pinnedItemsRemaining"),

  project: (variables, select) =>
    new Field(
      "project",
      [new Argument("number", variables.number)],
      new SelectionSet(select(Project))
    ),

  projects: (variables, select) =>
    new Field(
      "projects",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("search", variables.search),
        new Argument("states", variables.states, ProjectState),
      ],
      new SelectionSet(select(ProjectConnection))
    ),

  projectsResourcePath: () => new Field("projectsResourcePath"),
  projectsUrl: () => new Field("projectsUrl"),

  publicKeys: (variables, select) =>
    new Field(
      "publicKeys",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
      ],
      new SelectionSet(select(PublicKeyConnection))
    ),

  pullRequests: (variables, select) =>
    new Field(
      "pullRequests",
      [
        new Argument("after", variables.after),
        new Argument("baseRefName", variables.baseRefName),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("headRefName", variables.headRefName),
        new Argument("labels", variables.labels),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("states", variables.states, PullRequestState),
      ],
      new SelectionSet(select(PullRequestConnection))
    ),

  repositories: (variables, select) =>
    new Field(
      "repositories",
      [
        new Argument(
          "affiliations",
          variables.affiliations,
          RepositoryAffiliation
        ),
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("isFork", variables.isFork),
        new Argument("isLocked", variables.isLocked),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument(
          "ownerAffiliations",
          variables.ownerAffiliations,
          RepositoryAffiliation
        ),
        new Argument("privacy", variables.privacy, RepositoryPrivacy),
      ],
      new SelectionSet(select(RepositoryConnection))
    ),

  repositoriesContributedTo: (variables, select) =>
    new Field(
      "repositoriesContributedTo",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument(
          "contributionTypes",
          variables.contributionTypes,
          RepositoryContributionType
        ),
        new Argument("first", variables.first),
        new Argument(
          "includeUserRepositories",
          variables.includeUserRepositories
        ),
        new Argument("isLocked", variables.isLocked),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("privacy", variables.privacy, RepositoryPrivacy),
      ],
      new SelectionSet(select(RepositoryConnection))
    ),

  repository: (variables, select) =>
    new Field(
      "repository",
      [new Argument("name", variables.name)],
      new SelectionSet(select(Repository))
    ),

  resourcePath: () => new Field("resourcePath"),

  savedReplies: (variables, select) =>
    new Field(
      "savedReplies",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(SavedReplyConnection))
    ),

  sponsorsListing: (select) =>
    new Field(
      "sponsorsListing",
      undefined as never,
      new SelectionSet(select(SponsorsListing))
    ),

  sponsorshipsAsMaintainer: (variables, select) =>
    new Field(
      "sponsorshipsAsMaintainer",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("includePrivate", variables.includePrivate),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(SponsorshipConnection))
    ),

  sponsorshipsAsSponsor: (variables, select) =>
    new Field(
      "sponsorshipsAsSponsor",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
      ],
      new SelectionSet(select(SponsorshipConnection))
    ),

  starredRepositories: (variables, select) =>
    new Field(
      "starredRepositories",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("ownedByViewer", variables.ownedByViewer),
      ],
      new SelectionSet(select(StarredRepositoryConnection))
    ),

  status: (select) =>
    new Field(
      "status",
      undefined as never,
      new SelectionSet(select(UserStatus))
    ),

  topRepositories: (variables, select) =>
    new Field(
      "topRepositories",
      [
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument("since", variables.since),
      ],
      new SelectionSet(select(RepositoryConnection))
    ),

  twitterUsername: () => new Field("twitterUsername"),
  updatedAt: () => new Field("updatedAt"),
  url: () => new Field("url"),
  viewerCanChangePinnedItems: () => new Field("viewerCanChangePinnedItems"),
  viewerCanCreateProjects: () => new Field("viewerCanCreateProjects"),
  viewerCanFollow: () => new Field("viewerCanFollow"),
  viewerCanSponsor: () => new Field("viewerCanSponsor"),
  viewerIsFollowing: () => new Field("viewerIsFollowing"),
  viewerIsSponsoring: () => new Field("viewerIsSponsoring"),

  watching: (variables, select) =>
    new Field(
      "watching",
      [
        new Argument(
          "affiliations",
          variables.affiliations,
          RepositoryAffiliation
        ),
        new Argument("after", variables.after),
        new Argument("before", variables.before),
        new Argument("first", variables.first),
        new Argument("isLocked", variables.isLocked),
        new Argument("last", variables.last),
        new Argument("orderBy", variables.orderBy),
        new Argument(
          "ownerAffiliations",
          variables.ownerAffiliations,
          RepositoryAffiliation
        ),
        new Argument("privacy", variables.privacy, RepositoryPrivacy),
      ],
      new SelectionSet(select(RepositoryConnection))
    ),

  websiteUrl: () => new Field("websiteUrl"),
};

export interface IUserBlockedEvent extends INode {
  __typename: "UserBlockedEvent";
  actor: IActor;
  blockDuration: UserBlockDuration;
  createdAt: unknown;
  subject: IUser;
}

interface UserBlockedEventSelector {
  __typename: () => Field<"__typename">;

  actor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"actor", never, SelectionSet<T>>;

  blockDuration: () => Field<"blockDuration">;

  createdAt: () => Field<"createdAt">;

  id: () => Field<"id">;

  subject: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"subject", never, SelectionSet<T>>;
}

export const isUserBlockedEvent = (
  object: Record<string, any>
): object is Partial<IUserBlockedEvent> => {
  return object.__typename === "UserBlockedEvent";
};

export const UserBlockedEvent: UserBlockedEventSelector = {
  __typename: () => new Field("__typename"),

  actor: (select) =>
    new Field("actor", undefined as never, new SelectionSet(select(Actor))),

  blockDuration: () => new Field("blockDuration"),
  createdAt: () => new Field("createdAt"),
  id: () => new Field("id"),

  subject: (select) =>
    new Field("subject", undefined as never, new SelectionSet(select(User))),
};

export interface IUserConnection {
  edges: IUserEdge[];
  nodes: IUser[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface UserConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: UserEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const UserConnection: UserConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field("edges", undefined as never, new SelectionSet(select(UserEdge))),

  nodes: (select) =>
    new Field("nodes", undefined as never, new SelectionSet(select(User))),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IUserContentEdit extends INode {
  __typename: "UserContentEdit";
  createdAt: unknown;
  deletedAt: unknown;
  deletedBy: IActor;
  diff: string;
  editedAt: unknown;
  editor: IActor;
  updatedAt: unknown;
}

interface UserContentEditSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  deletedAt: () => Field<"deletedAt">;

  deletedBy: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"deletedBy", never, SelectionSet<T>>;

  diff: () => Field<"diff">;

  editedAt: () => Field<"editedAt">;

  editor: <T extends Array<Selection>>(
    select: (t: ActorSelector) => T
  ) => Field<"editor", never, SelectionSet<T>>;

  id: () => Field<"id">;

  updatedAt: () => Field<"updatedAt">;
}

export const isUserContentEdit = (
  object: Record<string, any>
): object is Partial<IUserContentEdit> => {
  return object.__typename === "UserContentEdit";
};

export const UserContentEdit: UserContentEditSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),
  deletedAt: () => new Field("deletedAt"),

  deletedBy: (select) =>
    new Field("deletedBy", undefined as never, new SelectionSet(select(Actor))),

  diff: () => new Field("diff"),
  editedAt: () => new Field("editedAt"),

  editor: (select) =>
    new Field("editor", undefined as never, new SelectionSet(select(Actor))),

  id: () => new Field("id"),
  updatedAt: () => new Field("updatedAt"),
};

export interface IUserContentEditConnection {
  edges: IUserContentEditEdge[];
  nodes: IUserContentEdit[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface UserContentEditConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: UserContentEditEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: UserContentEditSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const UserContentEditConnection: UserContentEditConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(UserContentEditEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(UserContentEdit))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IUserContentEditEdge {
  cursor: string;
  node: IUserContentEdit;
}

interface UserContentEditEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: UserContentEditSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const UserContentEditEdge: UserContentEditEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field(
      "node",
      undefined as never,
      new SelectionSet(select(UserContentEdit))
    ),
};

export interface IUserEdge {
  cursor: string;
  node: IUser;
}

interface UserEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const UserEdge: UserEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(User))),
};

export interface IUserEmailMetadata {
  primary: boolean;
  type: string;
  value: string;
}

interface UserEmailMetadataSelector {
  __typename: () => Field<"__typename">;

  primary: () => Field<"primary">;

  type: () => Field<"type">;

  value: () => Field<"value">;
}

export const UserEmailMetadata: UserEmailMetadataSelector = {
  __typename: () => new Field("__typename"),

  primary: () => new Field("primary"),
  type: () => new Field("type"),
  value: () => new Field("value"),
};

export interface IUserStatus extends INode {
  __typename: "UserStatus";
  createdAt: unknown;
  emoji: string;
  emojiHTML: unknown;
  expiresAt: unknown;
  indicatesLimitedAvailability: boolean;
  message: string;
  organization: IOrganization;
  updatedAt: unknown;
  user: IUser;
}

interface UserStatusSelector {
  __typename: () => Field<"__typename">;

  createdAt: () => Field<"createdAt">;

  emoji: () => Field<"emoji">;

  emojiHTML: () => Field<"emojiHTML">;

  expiresAt: () => Field<"expiresAt">;

  id: () => Field<"id">;

  indicatesLimitedAvailability: () => Field<"indicatesLimitedAvailability">;

  message: () => Field<"message">;

  organization: <T extends Array<Selection>>(
    select: (t: OrganizationSelector) => T
  ) => Field<"organization", never, SelectionSet<T>>;

  updatedAt: () => Field<"updatedAt">;

  user: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"user", never, SelectionSet<T>>;
}

export const isUserStatus = (
  object: Record<string, any>
): object is Partial<IUserStatus> => {
  return object.__typename === "UserStatus";
};

export const UserStatus: UserStatusSelector = {
  __typename: () => new Field("__typename"),

  createdAt: () => new Field("createdAt"),
  emoji: () => new Field("emoji"),
  emojiHTML: () => new Field("emojiHTML"),
  expiresAt: () => new Field("expiresAt"),
  id: () => new Field("id"),
  indicatesLimitedAvailability: () => new Field("indicatesLimitedAvailability"),
  message: () => new Field("message"),

  organization: (select) =>
    new Field(
      "organization",
      undefined as never,
      new SelectionSet(select(Organization))
    ),

  updatedAt: () => new Field("updatedAt"),

  user: (select) =>
    new Field("user", undefined as never, new SelectionSet(select(User))),
};

export interface IUserStatusConnection {
  edges: IUserStatusEdge[];
  nodes: IUserStatus[];
  pageInfo: IPageInfo;
  totalCount: number;
}

interface UserStatusConnectionSelector {
  __typename: () => Field<"__typename">;

  edges: <T extends Array<Selection>>(
    select: (t: UserStatusEdgeSelector) => T
  ) => Field<"edges", never, SelectionSet<T>>;

  nodes: <T extends Array<Selection>>(
    select: (t: UserStatusSelector) => T
  ) => Field<"nodes", never, SelectionSet<T>>;

  pageInfo: <T extends Array<Selection>>(
    select: (t: PageInfoSelector) => T
  ) => Field<"pageInfo", never, SelectionSet<T>>;

  totalCount: () => Field<"totalCount">;
}

export const UserStatusConnection: UserStatusConnectionSelector = {
  __typename: () => new Field("__typename"),

  edges: (select) =>
    new Field(
      "edges",
      undefined as never,
      new SelectionSet(select(UserStatusEdge))
    ),

  nodes: (select) =>
    new Field(
      "nodes",
      undefined as never,
      new SelectionSet(select(UserStatus))
    ),

  pageInfo: (select) =>
    new Field(
      "pageInfo",
      undefined as never,
      new SelectionSet(select(PageInfo))
    ),

  totalCount: () => new Field("totalCount"),
};

export interface IUserStatusEdge {
  cursor: string;
  node: IUserStatus;
}

interface UserStatusEdgeSelector {
  __typename: () => Field<"__typename">;

  cursor: () => Field<"cursor">;

  node: <T extends Array<Selection>>(
    select: (t: UserStatusSelector) => T
  ) => Field<"node", never, SelectionSet<T>>;
}

export const UserStatusEdge: UserStatusEdgeSelector = {
  __typename: () => new Field("__typename"),

  cursor: () => new Field("cursor"),

  node: (select) =>
    new Field("node", undefined as never, new SelectionSet(select(UserStatus))),
};

export interface IViewerHovercardContext extends IHovercardContext {
  __typename: "ViewerHovercardContext";
  viewer: IUser;
}

interface ViewerHovercardContextSelector {
  __typename: () => Field<"__typename">;

  message: () => Field<"message">;

  octicon: () => Field<"octicon">;

  viewer: <T extends Array<Selection>>(
    select: (t: UserSelector) => T
  ) => Field<"viewer", never, SelectionSet<T>>;
}

export const isViewerHovercardContext = (
  object: Record<string, any>
): object is Partial<IViewerHovercardContext> => {
  return object.__typename === "ViewerHovercardContext";
};

export const ViewerHovercardContext: ViewerHovercardContextSelector = {
  __typename: () => new Field("__typename"),

  message: () => new Field("message"),
  octicon: () => new Field("octicon"),

  viewer: (select) =>
    new Field("viewer", undefined as never, new SelectionSet(select(User))),
};

export const query = <T extends Array<Selection>>(
  name: string,
  select: (t: typeof Query) => T
): Operation<SelectionSet<T>> =>
  new Operation(name, "query", new SelectionSet(select(Query)));

export const mutation = <T extends Array<Selection>>(
  name: string,
  select: (t: typeof Mutation) => T
): Operation<SelectionSet<T>> =>
  new Operation(name, "mutation", new SelectionSet(select(Mutation)));
